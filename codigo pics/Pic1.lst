;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 01/05/2020 23:27:39
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$01F0	$	_div_16x16_s_l:
$01F0	$1303			BCF	STATUS, RP1
$01F1	$1283			BCF	STATUS, RP0
;math.ppas,291 :: 		
;math.ppas,293 :: 		
$01F2	$0D71			RLF	STACK_1, W
;math.ppas,294 :: 		
$01F3	$0DF8			RLF	STACK_8, F
;math.ppas,295 :: 		
$01F4	$0DF9			RLF	STACK_9, F
;math.ppas,296 :: 		
$01F5	$0874			MOVF	STACK_4, W
;math.ppas,297 :: 		
$01F6	$02F8			SUBWF	STACK_8, F
;math.ppas,298 :: 		
$01F7	$0875			MOVF	STACK_5, W
;math.ppas,299 :: 		
$01F8	$1C03			BTFSS	STATUS, C
;math.ppas,300 :: 		
$01F9	$0F75			INCFSZ	STACK_5, W
;math.ppas,301 :: 		
$01FA	$02F9			SUBWF	STACK_9, F
;math.ppas,302 :: 		
$01FB	$0DF0			RLF	STACK_0, F
;math.ppas,304 :: 		
$01FC	$0DF1			RLF	STACK_1, F
;math.ppas,305 :: 		
$01FD	$300F			MOVLW	15
;math.ppas,307 :: 		
$01FE	$00FC			MOVWF	STACK_12
;math.ppas,308 :: 		
$01FF	$0D71			RLF	STACK_1, W
;math.ppas,309 :: 		
$0200	$0DF8			RLF	STACK_8, F
;math.ppas,310 :: 		
$0201	$0DF9			RLF	STACK_9, F
;math.ppas,312 :: 		
$0202	$0874			MOVF	STACK_4, W
;math.ppas,313 :: 		
$0203	$1C70			BTFSS	STACK_0, 0
;math.ppas,314 :: 		
$0204	$2A0B			GOTO	$+7
;math.ppas,315 :: 		
$0205	$02F8			SUBWF	STACK_8, F
;math.ppas,316 :: 		
$0206	$0875			MOVF	STACK_5, W
;math.ppas,317 :: 		
$0207	$1C03			BTFSS	STATUS, C
;math.ppas,318 :: 		
$0208	$0F75			INCFSZ	STACK_5, W
;math.ppas,319 :: 		
$0209	$02F9			SUBWF	STACK_9, F
;math.ppas,321 :: 		
$020A	$2A10			GOTO	$+6
;math.ppas,322 :: 		
$020B	$07F8			ADDWF	STACK_8, F
;math.ppas,323 :: 		
$020C	$0875			MOVF	STACK_5, W
;math.ppas,324 :: 		
$020D	$1803			BTFSC	STATUS, C
;math.ppas,325 :: 		
$020E	$0F75			INCFSZ	STACK_5, W
;math.ppas,327 :: 		
$020F	$07F9			ADDWF	STACK_9, F
;math.ppas,328 :: 		
$0210	$0DF0			RLF	STACK_0, F
;math.ppas,330 :: 		
$0211	$0DF1			RLF	STACK_1, F
;math.ppas,331 :: 		
$0212	$0BFC			DECFSZ	STACK_12, F
;math.ppas,333 :: 		
$0213	$29FF			GOTO	$-20
;math.ppas,334 :: 		
$0214	$1870			BTFSC	STACK_0, 0
;math.ppas,335 :: 		
$0215	$2A1C			GOTO	$+7
;math.ppas,336 :: 		
$0216	$0874			MOVF	STACK_4, W
;math.ppas,337 :: 		
$0217	$07F8			ADDWF	STACK_8, F
;math.ppas,338 :: 		
$0218	$0875			MOVF	STACK_5, W
;math.ppas,339 :: 		
$0219	$1803			BTFSC	STATUS, C
;math.ppas,340 :: 		
$021A	$0F75			INCFSZ	STACK_5, W
;math.ppas,341 :: 		
$021B	$07F9			ADDWF	STACK_9, F
;math.ppas,342 :: 		
$021C	$	math_L_6:
;math.ppas,343 :: 		
$021C	$0008			RETURN
$0270	$	_usart_write:
;USART_b75.ppas,40 :: 		
;USART_b75.ppas,42 :: 		
$0270	$	USART_b75_L_14:
$0270	$1303			BCF	STATUS, RP1
$0271	$1683			BSF	STATUS, RP0
$0272	$0818			MOVF	TXSTA, 0
$0273	$00F1			MOVWF	STACK_1
$0274	$3000			MOVLW	0
$0275	$18F1			BTFSC	STACK_1, 1
$0276	$3001			MOVLW	1
$0277	$00F1			MOVWF	STACK_1
$0278	$0871			MOVF	STACK_1, 0
$0279	$3A00			XORLW	0
$027A	$1D03			BTFSS	STATUS, Z
$027B	$2A7E			GOTO	USART_b75_L_15
;USART_b75.ppas,43 :: 		
$027C	$0000			NOP
$027D	$2A70			GOTO	USART_b75_L_14
$027E	$	USART_b75_L_15:
;USART_b75.ppas,44 :: 		
$027E	$1283			BCF	STATUS, RP0
$027F	$083F			MOVF	FARG_USART_Write, 0
$0280	$0099			MOVWF	TXREG
$0281	$	USART_b75_L_12:
;USART_b75.ppas,45 :: 		
$0281	$0008			RETURN
$0153	$	_div_16x16_s:
$0153	$1303			BCF	STATUS, RP1
$0154	$1283			BCF	STATUS, RP0
;math.ppas,346 :: 		
;math.ppas,348 :: 		
$0155	$01FD			CLRF	STACK_13
;math.ppas,349 :: 		
$0156	$01F9			CLRF	STACK_9
;math.ppas,350 :: 		
$0157	$01F8			CLRF	STACK_8
;math.ppas,351 :: 		
$0158	$0871			MOVF	STACK_1, W
;math.ppas,352 :: 		
$0159	$0470			IORWF	STACK_0, W
;math.ppas,353 :: 		
$015A	$1903			BTFSC	STATUS, Z
;math.ppas,355 :: 		
$015B	$3400			RETLW	0
;math.ppas,356 :: 		
$015C	$0871			MOVF	STACK_1, W
;math.ppas,357 :: 		
$015D	$0675			XORWF	STACK_5, W
;math.ppas,358 :: 		
$015E	$00FA			MOVWF	STACK_10
;math.ppas,359 :: 		
$015F	$1BFA			BTFSC	STACK_10, 7
;math.ppas,361 :: 		
$0160	$09FD			COMF	STACK_13, F
;math.ppas,363 :: 		
$0161	$01FB			CLRF	STACK_11
;math.ppas,364 :: 		
$0162	$1FF5			BTFSS	STACK_5, 7
;math.ppas,366 :: 		
$0163	$2969			GOTO	$+6
;math.ppas,367 :: 		
$0164	$09F4			COMF	STACK_4, F
;math.ppas,368 :: 		
$0165	$09F5			COMF	STACK_5, F
;math.ppas,369 :: 		
$0166	$0AF4			INCF	STACK_4, F
;math.ppas,370 :: 		
$0167	$1903			BTFSC	STATUS, Z
;math.ppas,372 :: 		
$0168	$0AF5			INCF	STACK_5, F
;math.ppas,373 :: 		
$0169	$1FF1			BTFSS	STACK_1, 7
;math.ppas,375 :: 		
$016A	$2970			GOTO	$+6
;math.ppas,376 :: 		
$016B	$09F0			COMF	STACK_0, F
;math.ppas,377 :: 		
$016C	$09F1			COMF	STACK_1, F
;math.ppas,378 :: 		
$016D	$0AF0			INCF	STACK_0, F
;math.ppas,379 :: 		
$016E	$1903			BTFSC	STATUS, Z
;math.ppas,381 :: 		
$016F	$0AF1			INCF	STACK_1, F
;math.ppas,382 :: 		
$0170	$0871			MOVF	STACK_1, W
;math.ppas,383 :: 		
$0171	$0475			IORWF	STACK_5, W
;math.ppas,384 :: 		
$0172	$00FA			MOVWF	STACK_10
;math.ppas,385 :: 		
$0173	$1BFA			BTFSC	STACK_10, 7
;math.ppas,386 :: 		
$0174	$2985			GOTO	$+17
;math.ppas,388 :: 		
$0175	$21F0			CALL	_div_16x16_s_l
;math.ppas,390 :: 		
$0176	$187B			BTFSC	STACK_11, 0
;math.ppas,392 :: 		
$0177	$2998			GOTO	$+33
;math.ppas,393 :: 		
$0178	$1FFD			BTFSS	STACK_13, 7
;math.ppas,395 :: 		
$0179	$3400			RETLW	0
;math.ppas,396 :: 		
$017A	$09F0			COMF	STACK_0, F
;math.ppas,397 :: 		
$017B	$09F1			COMF	STACK_1, F
;math.ppas,398 :: 		
$017C	$0AF0			INCF	STACK_0, F
;math.ppas,399 :: 		
$017D	$1903			BTFSC	STATUS, Z
;math.ppas,401 :: 		
$017E	$0AF1			INCF	STACK_1, F
;math.ppas,402 :: 		
$017F	$09F8			COMF	STACK_8, F
;math.ppas,403 :: 		
$0180	$09F9			COMF	STACK_9, F
;math.ppas,404 :: 		
$0181	$0AF8			INCF	STACK_8, F
;math.ppas,405 :: 		
$0182	$1903			BTFSC	STATUS, Z
;math.ppas,407 :: 		
$0183	$0AF9			INCF	STACK_9, F
;math.ppas,409 :: 		
$0184	$3400			RETLW	0
;math.ppas,410 :: 		
$0185	$1FF5			BTFSS	STACK_5, 7
;math.ppas,411 :: 		
$0186	$2994			GOTO	$+14
;math.ppas,412 :: 		
$0187	$1BF1			BTFSC	STACK_1, 7
;math.ppas,413 :: 		
$0188	$2990			GOTO	$+8
;math.ppas,414 :: 		
$0189	$0871			MOVF	STACK_1, W
;math.ppas,415 :: 		
$018A	$00F9			MOVWF	STACK_9
;math.ppas,416 :: 		
$018B	$0870			MOVF	STACK_0, W
;math.ppas,417 :: 		
$018C	$00F8			MOVWF	STACK_8
;math.ppas,418 :: 		
$018D	$01F1			CLRF	STACK_1
;math.ppas,419 :: 		
$018E	$01F0			CLRF	STACK_0
;math.ppas,420 :: 		
$018F	$2978			GOTO	$-23
;math.ppas,421 :: 		
$0190	$01F1			CLRF	STACK_1
;math.ppas,422 :: 		
$0191	$01F0			CLRF	STACK_0
;math.ppas,423 :: 		
$0192	$0AF0			INCF	STACK_0, F
;math.ppas,425 :: 		
$0193	$3400			RETLW	0
;math.ppas,426 :: 		
$0194	$09F1			COMF	STACK_1, F
;math.ppas,427 :: 		
$0195	$09F0			COMF	STACK_0, F
;math.ppas,428 :: 		
$0196	$0AFB			INCF	STACK_11, F
;math.ppas,430 :: 		
$0197	$2975			GOTO	$-34
;math.ppas,431 :: 		
$0198	$0AF8			INCF	STACK_8, F
;math.ppas,432 :: 		
$0199	$1903			BTFSC	STATUS, Z
;math.ppas,433 :: 		
$019A	$0AF9			INCF	STACK_9, F
;math.ppas,434 :: 		
$019B	$0874			MOVF	STACK_4, W
;math.ppas,435 :: 		
$019C	$0278			SUBWF	STACK_8, W
;math.ppas,436 :: 		
$019D	$1D03			BTFSS	STATUS, Z
;math.ppas,437 :: 		
$019E	$2978			GOTO	$-38
;math.ppas,438 :: 		
$019F	$0875			MOVF	STACK_5, W
;math.ppas,439 :: 		
$01A0	$0279			SUBWF	STACK_9, W
;math.ppas,440 :: 		
$01A1	$1D03			BTFSS	STATUS, Z
;math.ppas,441 :: 		
$01A2	$2978			GOTO	$-42
;math.ppas,442 :: 		
$01A3	$01F9			CLRF	STACK_9
;math.ppas,443 :: 		
$01A4	$01F8			CLRF	STACK_8
;math.ppas,444 :: 		
$01A5	$0AF0			INCF	STACK_0, F
;math.ppas,445 :: 		
$01A6	$1903			BTFSC	STATUS, Z
;math.ppas,446 :: 		
$01A7	$0AF1			INCF	STACK_1, F
;math.ppas,447 :: 		
$01A8	$1FF1			BTFSS	STACK_1, 7
;math.ppas,448 :: 		
$01A9	$2978			GOTO	$-49
;math.ppas,449 :: 		
$01AA	$0000			NOP
;math.ppas,450 :: 		
$01AB	$34FF			RETLW	255
;math.ppas,451 :: 		
$01AC	$	math_L_7:
;math.ppas,452 :: 		
$01AC	$0008			RETURN
$0282	$	_usart_data_ready:
;USART_b75.ppas,48 :: 		
;USART_b75.ppas,50 :: 		
$0282	$1303			BCF	STATUS, RP1
$0283	$1283			BCF	STATUS, RP0
$0284	$080C			MOVF	PIR1, 0
$0285	$00F1			MOVWF	STACK_1
$0286	$3000			MOVLW	0
$0287	$1AF1			BTFSC	STACK_1, 5
$0288	$3001			MOVLW	1
$0289	$00F1			MOVWF	STACK_1
$028A	$0871			MOVF	STACK_1, 0
$028B	$00BA			MOVWF	_usart_data_ready_local_result
$028C	$	USART_b75_L_18:
;USART_b75.ppas,51 :: 		
$028C	$083A			MOVF	_usart_data_ready_local_result, 0
$028D	$00F0			MOVWF	STACK_0
$028E	$0008			RETURN
$025D	$	_usart_read:
;USART_b75.ppas,54 :: 		
;USART_b75.ppas,55 :: 		
$025D	$1303			BCF	STATUS, RP1
$025E	$1283			BCF	STATUS, RP0
$025F	$081A			MOVF	RCREG, 0
$0260	$00BA			MOVWF	_usart_read_local_result
;USART_b75.ppas,61 :: 		
$0261	$0818			MOVF	RCSTA, 0
$0262	$00F1			MOVWF	STACK_1
$0263	$3000			MOVLW	0
$0264	$18F1			BTFSC	STACK_1, 1
$0265	$3001			MOVLW	1
$0266	$00F1			MOVWF	STACK_1
$0267	$0871			MOVF	STACK_1, 0
$0268	$3A01			XORLW	1
$0269	$1D03			BTFSS	STATUS, Z
$026A	$2A6D			GOTO	USART_b75_L_21
$026B	$	USART_b75_L_20:
;USART_b75.ppas,63 :: 		
$026B	$1218			BCF	RCSTA, 4
$026C	$	USART_b75_L_24:
;USART_b75.ppas,64 :: 		
$026C	$	USART_b75_L_25:
$026C	$1618			BSF	RCSTA, 4
$026D	$	USART_b75_L_26:
;USART_b75.ppas,65 :: 		
$026D	$	USART_b75_L_21:
$026D	$	USART_b75_L_22:
$026D	$	USART_b75_L_19:
;USART_b75.ppas,66 :: 		
$026D	$083A			MOVF	_usart_read_local_result, 0
$026E	$00F0			MOVWF	STACK_0
$026F	$0008			RETURN
$0232	$	_usart_write_text:
;USART_b75.ppas,121 :: 		
;USART_b75.ppas,122 :: 		
$0232	$1303			BCF	STATUS, RP1
$0233	$1283			BCF	STATUS, RP0
$0234	$01BB			CLRF	_usart_write_text_local_i, 1
;USART_b75.ppas,123 :: 		
$0235	$083A			MOVF	FARG_Usart_Write_Text, 0
$0236	$0084			MOVWF	FSR
$0237	$0800			MOVF	INDF, 0
$0238	$00BC			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,124 :: 		
$0239	$	USART_b75_L_47:
$0239	$083C			MOVF	_usart_write_text_local_data, 0
$023A	$3A00			XORLW	0
$023B	$1903			BTFSC	STATUS, Z
$023C	$2A47			GOTO	USART_b75_L_48
;USART_b75.ppas,126 :: 		
$023D	$083C			MOVF	_usart_write_text_local_data, 0
$023E	$00BF			MOVWF	FARG_USART_Write
$023F	$2270			CALL	_usart_write
;USART_b75.ppas,127 :: 		
$0240	$0ABB			INCF	_usart_write_text_local_i, 1
;USART_b75.ppas,128 :: 		
$0241	$083B			MOVF	_usart_write_text_local_i, 0
$0242	$073A			ADDWF	FARG_Usart_Write_Text, 0
$0243	$0084			MOVWF	FSR
$0244	$0800			MOVF	INDF, 0
$0245	$00BC			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,129 :: 		
$0246	$2A39			GOTO	USART_b75_L_47
$0247	$	USART_b75_L_48:
$0247	$	USART_b75_L_45:
;USART_b75.ppas,130 :: 		
$0247	$0008			RETURN
$00B0	$	_inttostr:
;conv.ppas,100 :: 		
;conv.ppas,101 :: 		
$00B0	$1303			BCF	STATUS, RP1
$00B1	$1283			BCF	STATUS, RP0
$00B2	$083B			MOVF	FARG_IntToStr+1, 0
$00B3	$3A80			XORLW	128
$00B4	$1D03			BTFSS	STATUS, Z
$00B5	$28B8			GOTO	L_IntToStr_4
$00B6	$3000			MOVLW	0
$00B7	$063A			XORWF	FARG_IntToStr, 0
$00B8	$	L_IntToStr_4:
$00B8	$1D03			BTFSS	STATUS, Z
$00B9	$28D0			GOTO	conv_L_57
$00BA	$	conv_L_56:
;conv.ppas,103 :: 		
$00BA	$083C			MOVF	FARG_IntToStr+2, 0
$00BB	$0084			MOVWF	FSR
$00BC	$302D			MOVLW	45
$00BD	$0080			MOVWF	INDF
$00BE	$0A84			INCF	FSR, 1
$00BF	$3033			MOVLW	51
$00C0	$0080			MOVWF	INDF
$00C1	$0A84			INCF	FSR, 1
$00C2	$3032			MOVLW	50
$00C3	$0080			MOVWF	INDF
$00C4	$0A84			INCF	FSR, 1
$00C5	$3037			MOVLW	55
$00C6	$0080			MOVWF	INDF
$00C7	$0A84			INCF	FSR, 1
$00C8	$3036			MOVLW	54
$00C9	$0080			MOVWF	INDF
$00CA	$0A84			INCF	FSR, 1
$00CB	$3038			MOVLW	56
$00CC	$0080			MOVWF	INDF
$00CD	$0A84			INCF	FSR, 1
$00CE	$0180			CLRF	INDF
;conv.ppas,104 :: 		
$00CF	$2952			GOTO	conv_L_55
;conv.ppas,105 :: 		
$00D0	$	conv_L_57:
$00D0	$	conv_L_58:
;conv.ppas,106 :: 		
$00D0	$01BE			CLRF	_inttostr_local_negative, 1
;conv.ppas,107 :: 		
$00D1	$3080			MOVLW	128
$00D2	$063B			XORWF	FARG_IntToStr+1, 0
$00D3	$00F0			MOVWF	STACK_0
$00D4	$3080			MOVLW	128
$00D5	$0270			SUBWF	STACK_0, 0
$00D6	$1D03			BTFSS	STATUS, Z
$00D7	$28DA			GOTO	L_IntToStr_5
$00D8	$3000			MOVLW	0
$00D9	$023A			SUBWF	FARG_IntToStr, 0
$00DA	$	L_IntToStr_5:
$00DA	$1803			BTFSC	STATUS, C
$00DB	$28E6			GOTO	conv_L_61
$00DC	$	conv_L_60:
;conv.ppas,109 :: 		
$00DC	$30FF			MOVLW	255
$00DD	$00BE			MOVWF	_inttostr_local_negative
;conv.ppas,110 :: 		
$00DE	$083A			MOVF	FARG_IntToStr, 0
$00DF	$3C00			SUBLW	0
$00E0	$00BA			MOVWF	FARG_IntToStr
$00E1	$083B			MOVF	FARG_IntToStr+1, 0
$00E2	$1C03			BTFSS	STATUS, C
$00E3	$3F01			ADDLW	1
$00E4	$01BB			CLRF	FARG_IntToStr+1
$00E5	$02BB			SUBWF	FARG_IntToStr+1, 1
;conv.ppas,111 :: 		
$00E6	$	conv_L_61:
$00E6	$	conv_L_62:
;conv.ppas,112 :: 		
$00E6	$3001			MOVLW	1
$00E7	$00BD			MOVWF	_inttostr_local_len
;conv.ppas,113 :: 		
$00E8	$3080			MOVLW	128
$00E9	$00F0			MOVWF	STACK_0
$00EA	$3080			MOVLW	128
$00EB	$063B			XORWF	FARG_IntToStr+1, 0
$00EC	$0270			SUBWF	STACK_0, 0
$00ED	$1D03			BTFSS	STATUS, Z
$00EE	$28F1			GOTO	L_IntToStr_6
$00EF	$083A			MOVF	FARG_IntToStr, 0
$00F0	$3C09			SUBLW	9
$00F1	$	L_IntToStr_6:
$00F1	$1803			BTFSC	STATUS, C
$00F2	$28F4			GOTO	conv_L_64
$00F3	$	conv_L_63:
;conv.ppas,114 :: 		
$00F3	$0ABD			INCF	_inttostr_local_len, 1
$00F4	$	conv_L_64:
$00F4	$	conv_L_65:
;conv.ppas,115 :: 		
$00F4	$3080			MOVLW	128
$00F5	$00F0			MOVWF	STACK_0
$00F6	$3080			MOVLW	128
$00F7	$063B			XORWF	FARG_IntToStr+1, 0
$00F8	$0270			SUBWF	STACK_0, 0
$00F9	$1D03			BTFSS	STATUS, Z
$00FA	$28FD			GOTO	L_IntToStr_7
$00FB	$083A			MOVF	FARG_IntToStr, 0
$00FC	$3C63			SUBLW	99
$00FD	$	L_IntToStr_7:
$00FD	$1803			BTFSC	STATUS, C
$00FE	$2900			GOTO	conv_L_67
$00FF	$	conv_L_66:
;conv.ppas,116 :: 		
$00FF	$0ABD			INCF	_inttostr_local_len, 1
$0100	$	conv_L_67:
$0100	$	conv_L_68:
;conv.ppas,117 :: 		
$0100	$3080			MOVLW	128
$0101	$3A03			XORLW	3
$0102	$00F0			MOVWF	STACK_0
$0103	$3080			MOVLW	128
$0104	$063B			XORWF	FARG_IntToStr+1, 0
$0105	$0270			SUBWF	STACK_0, 0
$0106	$1D03			BTFSS	STATUS, Z
$0107	$290A			GOTO	L_IntToStr_8
$0108	$083A			MOVF	FARG_IntToStr, 0
$0109	$3CE7			SUBLW	231
$010A	$	L_IntToStr_8:
$010A	$1803			BTFSC	STATUS, C
$010B	$290D			GOTO	conv_L_70
$010C	$	conv_L_69:
;conv.ppas,118 :: 		
$010C	$0ABD			INCF	_inttostr_local_len, 1
$010D	$	conv_L_70:
$010D	$	conv_L_71:
;conv.ppas,119 :: 		
$010D	$3080			MOVLW	128
$010E	$3A27			XORLW	39
$010F	$00F0			MOVWF	STACK_0
$0110	$3080			MOVLW	128
$0111	$063B			XORWF	FARG_IntToStr+1, 0
$0112	$0270			SUBWF	STACK_0, 0
$0113	$1D03			BTFSS	STATUS, Z
$0114	$2917			GOTO	L_IntToStr_9
$0115	$083A			MOVF	FARG_IntToStr, 0
$0116	$3C0F			SUBLW	15
$0117	$	L_IntToStr_9:
$0117	$1803			BTFSC	STATUS, C
$0118	$291A			GOTO	conv_L_73
$0119	$	conv_L_72:
;conv.ppas,120 :: 		
$0119	$0ABD			INCF	_inttostr_local_len, 1
$011A	$	conv_L_73:
$011A	$	conv_L_74:
;conv.ppas,121 :: 		
$011A	$083C			MOVF	FARG_IntToStr+2, 0
$011B	$0084			MOVWF	FSR
$011C	$3020			MOVLW	32
$011D	$0080			MOVWF	INDF
$011E	$0A84			INCF	FSR, 1
$011F	$0080			MOVWF	INDF
$0120	$0A84			INCF	FSR, 1
$0121	$0080			MOVWF	INDF
$0122	$0A84			INCF	FSR, 1
$0123	$0080			MOVWF	INDF
$0124	$0A84			INCF	FSR, 1
$0125	$0080			MOVWF	INDF
$0126	$0A84			INCF	FSR, 1
$0127	$0080			MOVWF	INDF
$0128	$0A84			INCF	FSR, 1
$0129	$0180			CLRF	INDF
;conv.ppas,122 :: 		
$012A	$0384			DECF	FSR, 1
;conv.ppas,123 :: 		
$012B	$	conv_L_77:
$012B	$083D			MOVF	_inttostr_local_len, 0
$012C	$3C00			SUBLW	0
$012D	$1803			BTFSC	STATUS, C
$012E	$294D			GOTO	conv_L_78
;conv.ppas,125 :: 		
$012F	$300A			MOVLW	10
$0130	$00F4			MOVWF	STACK_4
$0131	$01F5			CLRF	STACK_4+1
$0132	$083A			MOVF	FARG_IntToStr, 0
$0133	$00F0			MOVWF	STACK_0
$0134	$083B			MOVF	FARG_IntToStr+1, 0
$0135	$00F1			MOVWF	STACK_0+1
$0136	$2153			CALL	_div_16x16_s
$0137	$0878			MOVF	STACK_8, 0
$0138	$00F0			MOVWF	STACK_0
$0139	$0879			MOVF	STACK_9, 0
$013A	$00F1			MOVWF	STACK_1
$013B	$3030			MOVLW	48
$013C	$0770			ADDWF	STACK_0, 0
$013D	$0080			MOVWF	INDF
;conv.ppas,126 :: 		
;conv.ppas,127 :: 		
$013E	$0384			DECF	FSR, 1
;conv.ppas,128 :: 		
$013F	$300A			MOVLW	10
$0140	$00F4			MOVWF	STACK_4
$0141	$01F5			CLRF	STACK_4+1
$0142	$083A			MOVF	FARG_IntToStr, 0
$0143	$00F0			MOVWF	STACK_0
$0144	$083B			MOVF	FARG_IntToStr+1, 0
$0145	$00F1			MOVWF	STACK_0+1
$0146	$2153			CALL	_div_16x16_s
$0147	$0870			MOVF	STACK_0, 0
$0148	$00BA			MOVWF	FARG_IntToStr
$0149	$0871			MOVF	STACK_0+1, 0
$014A	$00BB			MOVWF	FARG_IntToStr+1
;conv.ppas,129 :: 		
$014B	$03BD			DECF	_inttostr_local_len, 1
;conv.ppas,130 :: 		
$014C	$292B			GOTO	conv_L_77
$014D	$	conv_L_78:
;conv.ppas,131 :: 		
$014D	$083E			MOVF	_inttostr_local_negative, 0
$014E	$1903			BTFSC	STATUS, Z
$014F	$2952			GOTO	conv_L_82
$0150	$	conv_L_81:
;conv.ppas,133 :: 		
$0150	$302D			MOVLW	45
$0151	$0080			MOVWF	INDF
;conv.ppas,134 :: 		
$0152	$	conv_L_82:
$0152	$	conv_L_83:
$0152	$	conv_L_55:
;conv.ppas,135 :: 		
$0152	$0008			RETURN
$01AD	$	_usart_read_text:
;USART_b75.ppas,78 :: 		
;USART_b75.ppas,79 :: 		
$01AD	$1303			BCF	STATUS, RP1
$01AE	$1283			BCF	STATUS, RP0
$01AF	$01B5			CLRF	_usart_read_text_local_i, 1
;USART_b75.ppas,80 :: 		
$01B0	$01B6			CLRF	_usart_read_text_local_j, 1
;USART_b75.ppas,81 :: 		
$01B1	$01B9			CLRF	_usart_read_text_local_lasti, 1
;USART_b75.ppas,82 :: 		
$01B2	$0834			MOVF	FARG_Usart_Read_Text+1, 0
$01B3	$0084			MOVWF	FSR
$01B4	$0800			MOVF	INDF, 0
$01B5	$00B8			MOVWF	_usart_read_text_local_data2
;USART_b75.ppas,83 :: 		
$01B6	$	USART_b75_L_29:
;USART_b75.ppas,85 :: 		
$01B6	$2282			CALL	_usart_data_ready
$01B7	$0870			MOVF	STACK_0, 0
$01B8	$3A00			XORLW	0
$01B9	$1903			BTFSC	STATUS, Z
$01BA	$29E6			GOTO	USART_b75_L_34
$01BB	$	USART_b75_L_33:
;USART_b75.ppas,87 :: 		
$01BB	$225D			CALL	_usart_read
$01BC	$0870			MOVF	STACK_0, 0
$01BD	$00B7			MOVWF	_usart_read_text_local_data
;USART_b75.ppas,88 :: 		
$01BE	$0835			MOVF	_usart_read_text_local_i, 0
$01BF	$0733			ADDWF	FARG_Usart_Read_Text, 0
$01C0	$00F1			MOVWF	STACK_1
$01C1	$0871			MOVF	STACK_1, 0
$01C2	$0084			MOVWF	FSR
$01C3	$0871			MOVF	STACK_1, 0
$01C4	$0084			MOVWF	FSR
$01C5	$0870			MOVF	STACK_0, 0
$01C6	$0080			MOVWF	INDF
;USART_b75.ppas,89 :: 		
$01C7	$0837			MOVF	_usart_read_text_local_data, 0
$01C8	$0638			XORWF	_usart_read_text_local_data2, 0
$01C9	$1D03			BTFSS	STATUS, Z
$01CA	$29D0			GOTO	USART_b75_L_37
$01CB	$	USART_b75_L_36:
;USART_b75.ppas,91 :: 		
$01CB	$0836			MOVF	_usart_read_text_local_j, 0
$01CC	$0235			SUBWF	_usart_read_text_local_i, 0
$01CD	$00B9			MOVWF	_usart_read_text_local_lasti
;USART_b75.ppas,92 :: 		
$01CE	$0AB6			INCF	_usart_read_text_local_j, 1
;USART_b75.ppas,93 :: 		
$01CF	$29D2			GOTO	USART_b75_L_38
;USART_b75.ppas,94 :: 		
$01D0	$	USART_b75_L_37:
;USART_b75.ppas,96 :: 		
$01D0	$01B6			CLRF	_usart_read_text_local_j, 1
;USART_b75.ppas,97 :: 		
$01D1	$01B9			CLRF	_usart_read_text_local_lasti, 1
;USART_b75.ppas,98 :: 		
$01D2	$	USART_b75_L_38:
;USART_b75.ppas,100 :: 		
$01D2	$0836			MOVF	_usart_read_text_local_j, 0
$01D3	$0734			ADDWF	FARG_Usart_Read_Text+1, 0
$01D4	$0084			MOVWF	FSR
$01D5	$0800			MOVF	INDF, 0
$01D6	$00F1			MOVWF	STACK_1
$01D7	$0871			MOVF	STACK_1, 0
$01D8	$00B8			MOVWF	_usart_read_text_local_data2
;USART_b75.ppas,102 :: 		
$01D9	$0871			MOVF	STACK_1, 0
$01DA	$3A00			XORLW	0
$01DB	$1D03			BTFSS	STATUS, Z
$01DC	$29DE			GOTO	USART_b75_L_40
$01DD	$	USART_b75_L_39:
;USART_b75.ppas,103 :: 		
$01DD	$29E7			GOTO	USART_b75_L_30
$01DE	$	USART_b75_L_40:
$01DE	$	USART_b75_L_41:
;USART_b75.ppas,105 :: 		
$01DE	$0AB5			INCF	_usart_read_text_local_i, 1
;USART_b75.ppas,106 :: 		
$01DF	$0835			MOVF	_usart_read_text_local_i, 0
$01E0	$3C14			SUBLW	20
$01E1	$1803			BTFSC	STATUS, C
$01E2	$29E6			GOTO	USART_b75_L_43
$01E3	$	USART_b75_L_42:
;USART_b75.ppas,108 :: 		
$01E3	$3013			MOVLW	19
$01E4	$00B9			MOVWF	_usart_read_text_local_lasti
;USART_b75.ppas,109 :: 		
$01E5	$29E7			GOTO	USART_b75_L_30
;USART_b75.ppas,110 :: 		
$01E6	$	USART_b75_L_43:
$01E6	$	USART_b75_L_44:
;USART_b75.ppas,111 :: 		
$01E6	$	USART_b75_L_34:
$01E6	$	USART_b75_L_35:
;USART_b75.ppas,112 :: 		
$01E6	$29B6			GOTO	USART_b75_L_29
$01E7	$	USART_b75_L_30:
;USART_b75.ppas,113 :: 		
$01E7	$0839			MOVF	_usart_read_text_local_lasti, 0
$01E8	$0733			ADDWF	FARG_Usart_Read_Text, 0
$01E9	$00F0			MOVWF	STACK_0
$01EA	$0870			MOVF	STACK_0, 0
$01EB	$0084			MOVWF	FSR
$01EC	$0870			MOVF	STACK_0, 0
$01ED	$0084			MOVWF	FSR
$01EE	$0180			CLRF	INDF, 1
$01EF	$	USART_b75_L_27:
;USART_b75.ppas,114 :: 		
$01EF	$0008			RETURN
$021D	$	_envia:
;Pic1.pbas,9 :: 		sub procedure envia
;Pic1.pbas,10 :: 		Usart_Write_Text("P1")
$021D	$3050			MOVLW	80
$021E	$1303			BCF	STATUS, RP1
$021F	$1283			BCF	STATUS, RP0
$0220	$00B3			MOVWF	?envia_Local_Text+0
$0221	$3031			MOVLW	49
$0222	$00B4			MOVWF	?envia_Local_Text+1
$0223	$01B5			CLRF	?envia_Local_Text+2
$0224	$3033			MOVLW	?envia_Local_Text
$0225	$00BA			MOVWF	FARG_Usart_Write_Text
$0226	$2232			CALL	_usart_write_text
;Pic1.pbas,11 :: 		intToStr(i, txt)
$0227	$0820			MOVF	_i, 0
$0228	$00BA			MOVWF	FARG_IntToStr
$0229	$0821			MOVF	_i+1, 0
$022A	$00BB			MOVWF	FARG_IntToStr+1
$022B	$3022			MOVLW	_txt
$022C	$00BC			MOVWF	FARG_IntToStr+2
$022D	$20B0			CALL	_inttostr
;Pic1.pbas,12 :: 		Usart_Write_Text(txt)
$022E	$3022			MOVLW	_txt
$022F	$00BA			MOVWF	FARG_Usart_Write_Text
$0230	$2232			CALL	_usart_write_text
$0231	$	Pic1_L_0:
$0231	$0008			RETURN
$0248	$	_usart_init:
;USART_b75.ppas,22 :: 		
;USART_b75.ppas,24 :: 		
$0248	$	USART_b75_L_1:
$0248	$1303			BCF	STATUS, RP1
$0249	$1683			BSF	STATUS, RP0
$024A	$1698			BSF	TXSTA, 5
$024B	$	USART_b75_L_2:
;USART_b75.ppas,25 :: 		
$024B	$3090			MOVLW	144
$024C	$1283			BCF	STATUS, RP0
$024D	$0098			MOVWF	RCSTA
;USART_b75.ppas,31 :: 		
$024E	$	USART_b75_L_3:
$024E	$1683			BSF	STATUS, RP0
$024F	$1686			BSF	TRISB, 5
$0250	$	USART_b75_L_4:
;USART_b75.ppas,32 :: 		
$0250	$	USART_b75_L_5:
$0250	$1786			BSF	TRISB, 7
$0251	$	USART_b75_L_6:
;USART_b75.ppas,35 :: 		
$0251	$	USART_b75_L_8:
$0251	$1283			BCF	STATUS, RP0
$0252	$080C			MOVF	PIR1, 0
$0253	$00F1			MOVWF	STACK_1
$0254	$3000			MOVLW	0
$0255	$1AF1			BTFSC	STACK_1, 5
$0256	$3001			MOVLW	1
$0257	$00F1			MOVWF	STACK_1
$0258	$0871			MOVF	STACK_1, 0
$0259	$3A01			XORLW	1
$025A	$1903			BTFSC	STATUS, Z
$025B	$2A51			GOTO	USART_b75_L_8
;USART_b75.ppas,36 :: 		
$025C	$	USART_b75_L_9:
$025C	$	USART_b75_L_0:
;USART_b75.ppas,37 :: 		
$025C	$0008			RETURN
$0004	$	_main:
;Pic1.pbas,16 :: 		main:
$0004	$	_main_main:
;Pic1.pbas,17 :: 		TRISA=%11111111
$0004	$30FF			MOVLW	255
$0005	$1303			BCF	STATUS, RP1
$0006	$1683			BSF	STATUS, RP0
$0007	$0085			MOVWF	TRISA
;Pic1.pbas,18 :: 		TRISB=%01101111
$0008	$306F			MOVLW	111
$0009	$0086			MOVWF	TRISB
;Pic1.pbas,19 :: 		TRISC=%00000000
$000A	$0187			CLRF	TRISC, 1
;Pic1.pbas,20 :: 		INTCON=%00000000
$000B	$018B			CLRF	INTCON, 1
;Pic1.pbas,21 :: 		ANSEL=%00000000
$000C	$1703			BSF	STATUS, RP1
$000D	$1283			BCF	STATUS, RP0
$000E	$019E			CLRF	ANSEL, 1
;Pic1.pbas,22 :: 		ANSELH=%00000000
$000F	$019F			CLRF	ANSELH, 1
;Pic1.pbas,24 :: 		Usart_Init(9600)
$0010	$3019			MOVLW	25
$0011	$1303			BCF	STATUS, RP1
$0012	$1683			BSF	STATUS, RP0
$0013	$0099			MOVWF	SPBRG
$0014	$1518			BSF	TXSTA, BRGH
$0015	$2248			CALL	_usart_init
;Pic1.pbas,25 :: 		PORTC=0
$0016	$0187			CLRF	PORTC, 1
;Pic1.pbas,26 :: 		i=0
$0017	$01A0			CLRF	_i
$0018	$01A1			CLRF	_i+1
;Pic1.pbas,27 :: 		b0=false
$0019	$01A9			CLRF	_b0, 1
;Pic1.pbas,28 :: 		b1=false
$001A	$01AA			CLRF	_b1, 1
;Pic1.pbas,29 :: 		b2=false
$001B	$01AB			CLRF	_b2, 1
;Pic1.pbas,30 :: 		b3=false
$001C	$01AC			CLRF	_b3, 1
;Pic1.pbas,31 :: 		b4=false
$001D	$01AD			CLRF	_b4, 1
;Pic1.pbas,32 :: 		b5=false
$001E	$01AE			CLRF	_b5, 1
;Pic1.pbas,33 :: 		b6=false
$001F	$01AF			CLRF	_b6, 1
;Pic1.pbas,35 :: 		executa:
$0020	$	_main_executa:
;Pic1.pbas,36 :: 		if USART_Data_Ready() > 0 then
$0020	$2282			CALL	_usart_data_ready
$0021	$0870			MOVF	STACK_0, 0
$0022	$3C00			SUBLW	0
$0023	$1803			BTFSC	STATUS, C
$0024	$282D			GOTO	Pic1_L_3
$0025	$	Pic1_L_2:
;Pic1.pbas,37 :: 		Usart_Read_Text(txt, "/")
$0025	$3022			MOVLW	_txt
$0026	$00B3			MOVWF	FARG_Usart_Read_Text
$0027	$302F			MOVLW	47
$0028	$00B1			MOVWF	?main_Local_Text+0
$0029	$01B2			CLRF	?main_Local_Text+1
$002A	$3031			MOVLW	?main_Local_Text
$002B	$00B4			MOVWF	FARG_Usart_Read_Text+1
$002C	$21AD			CALL	_usart_read_text
$002D	$	Pic1_L_3:
;Pic1.pbas,38 :: 		end if
$002D	$	Pic1_L_4:
;Pic1.pbas,41 :: 		if (testbit(portA,0) = 1) then
$002D	$3001			MOVLW	1
$002E	$0505			ANDWF	PORTA, 0
$002F	$00F1			MOVWF	STACK_1
$0030	$0871			MOVF	STACK_1, 0
$0031	$3A01			XORLW	1
$0032	$1D03			BTFSS	STATUS, Z
$0033	$283D			GOTO	Pic1_L_6
$0034	$	Pic1_L_5:
;Pic1.pbas,42 :: 		if b0 = false then
$0034	$0829			MOVF	_b0, 0
$0035	$3A00			XORLW	0
$0036	$1D03			BTFSS	STATUS, Z
$0037	$283D			GOTO	Pic1_L_9
$0038	$	Pic1_L_8:
;Pic1.pbas,43 :: 		b0 = true
$0038	$30FF			MOVLW	255
$0039	$00A9			MOVWF	_b0
;Pic1.pbas,44 :: 		i = i + 1
$003A	$0AA0			INCF	_i, 1
$003B	$1903			BTFSC	STATUS, Z
$003C	$0AA1			INCF	_i+1, 1
$003D	$	Pic1_L_9:
;Pic1.pbas,45 :: 		end if
$003D	$	Pic1_L_10:
$003D	$	Pic1_L_6:
;Pic1.pbas,46 :: 		end if
$003D	$	Pic1_L_7:
;Pic1.pbas,47 :: 		if testbit(portA,0) = 0 then
$003D	$3001			MOVLW	1
$003E	$0505			ANDWF	PORTA, 0
$003F	$00F1			MOVWF	STACK_1
$0040	$0871			MOVF	STACK_1, 0
$0041	$3A00			XORLW	0
$0042	$1D03			BTFSS	STATUS, Z
$0043	$2849			GOTO	Pic1_L_12
$0044	$	Pic1_L_11:
;Pic1.pbas,48 :: 		if b0 = true then
$0044	$0829			MOVF	_b0, 0
$0045	$3AFF			XORLW	255
$0046	$1D03			BTFSS	STATUS, Z
$0047	$2849			GOTO	Pic1_L_15
$0048	$	Pic1_L_14:
;Pic1.pbas,49 :: 		b0 = false
$0048	$01A9			CLRF	_b0, 1
$0049	$	Pic1_L_15:
;Pic1.pbas,50 :: 		end if
$0049	$	Pic1_L_16:
$0049	$	Pic1_L_12:
;Pic1.pbas,51 :: 		end if
$0049	$	Pic1_L_13:
;Pic1.pbas,54 :: 		if testbit(portA,1) = 1 then
$0049	$3000			MOVLW	0
$004A	$1885			BTFSC	PORTA, 1
$004B	$3001			MOVLW	1
$004C	$00F1			MOVWF	STACK_1
$004D	$0871			MOVF	STACK_1, 0
$004E	$3A01			XORLW	1
$004F	$1D03			BTFSS	STATUS, Z
$0050	$285B			GOTO	Pic1_L_18
$0051	$	Pic1_L_17:
;Pic1.pbas,55 :: 		if b1 = false then
$0051	$082A			MOVF	_b1, 0
$0052	$3A00			XORLW	0
$0053	$1D03			BTFSS	STATUS, Z
$0054	$285B			GOTO	Pic1_L_21
$0055	$	Pic1_L_20:
;Pic1.pbas,56 :: 		b1 = true
$0055	$30FF			MOVLW	255
$0056	$00AA			MOVWF	_b1
;Pic1.pbas,57 :: 		i = i - 1
$0057	$3001			MOVLW	1
$0058	$02A0			SUBWF	_i, 1
$0059	$1C03			BTFSS	STATUS, C
$005A	$03A1			DECF	_i+1, 1
$005B	$	Pic1_L_21:
;Pic1.pbas,58 :: 		end if
$005B	$	Pic1_L_22:
$005B	$	Pic1_L_18:
;Pic1.pbas,59 :: 		end if
$005B	$	Pic1_L_19:
;Pic1.pbas,60 :: 		if testbit(portA,1) = 0 then
$005B	$3000			MOVLW	0
$005C	$1885			BTFSC	PORTA, 1
$005D	$3001			MOVLW	1
$005E	$00F1			MOVWF	STACK_1
$005F	$0871			MOVF	STACK_1, 0
$0060	$3A00			XORLW	0
$0061	$1D03			BTFSS	STATUS, Z
$0062	$2868			GOTO	Pic1_L_24
$0063	$	Pic1_L_23:
;Pic1.pbas,61 :: 		if b1 = true then
$0063	$082A			MOVF	_b1, 0
$0064	$3AFF			XORLW	255
$0065	$1D03			BTFSS	STATUS, Z
$0066	$2868			GOTO	Pic1_L_27
$0067	$	Pic1_L_26:
;Pic1.pbas,62 :: 		b1 = false
$0067	$01AA			CLRF	_b1, 1
$0068	$	Pic1_L_27:
;Pic1.pbas,63 :: 		end if
$0068	$	Pic1_L_28:
$0068	$	Pic1_L_24:
;Pic1.pbas,64 :: 		end if
$0068	$	Pic1_L_25:
;Pic1.pbas,67 :: 		if testbit(portA,2) = 1 then
$0068	$3000			MOVLW	0
$0069	$1905			BTFSC	PORTA, 2
$006A	$3001			MOVLW	1
$006B	$00F1			MOVWF	STACK_1
$006C	$0871			MOVF	STACK_1, 0
$006D	$3A01			XORLW	1
$006E	$1D03			BTFSS	STATUS, Z
$006F	$2878			GOTO	Pic1_L_30
$0070	$	Pic1_L_29:
;Pic1.pbas,68 :: 		if b2 = false then
$0070	$082B			MOVF	_b2, 0
$0071	$3A00			XORLW	0
$0072	$1D03			BTFSS	STATUS, Z
$0073	$2878			GOTO	Pic1_L_33
$0074	$	Pic1_L_32:
;Pic1.pbas,69 :: 		b2 = true
$0074	$30FF			MOVLW	255
$0075	$00AB			MOVWF	_b2
;Pic1.pbas,70 :: 		i = 0
$0076	$01A0			CLRF	_i
$0077	$01A1			CLRF	_i+1
$0078	$	Pic1_L_33:
;Pic1.pbas,71 :: 		end if
$0078	$	Pic1_L_34:
$0078	$	Pic1_L_30:
;Pic1.pbas,72 :: 		end if
$0078	$	Pic1_L_31:
;Pic1.pbas,73 :: 		if testbit(portA,2) = 0 then
$0078	$3000			MOVLW	0
$0079	$1905			BTFSC	PORTA, 2
$007A	$3001			MOVLW	1
$007B	$00F1			MOVWF	STACK_1
$007C	$0871			MOVF	STACK_1, 0
$007D	$3A00			XORLW	0
$007E	$1D03			BTFSS	STATUS, Z
$007F	$2885			GOTO	Pic1_L_36
$0080	$	Pic1_L_35:
;Pic1.pbas,74 :: 		if b2 = true then
$0080	$082B			MOVF	_b2, 0
$0081	$3AFF			XORLW	255
$0082	$1D03			BTFSS	STATUS, Z
$0083	$2885			GOTO	Pic1_L_39
$0084	$	Pic1_L_38:
;Pic1.pbas,75 :: 		b2 = false
$0084	$01AB			CLRF	_b2, 1
$0085	$	Pic1_L_39:
;Pic1.pbas,76 :: 		end if
$0085	$	Pic1_L_40:
$0085	$	Pic1_L_36:
;Pic1.pbas,77 :: 		end if
$0085	$	Pic1_L_37:
;Pic1.pbas,80 :: 		if testbit(portA,5) = 1 then
$0085	$3000			MOVLW	0
$0086	$1A85			BTFSC	PORTA, 5
$0087	$3001			MOVLW	1
$0088	$00F1			MOVWF	STACK_1
$0089	$0871			MOVF	STACK_1, 0
$008A	$3A01			XORLW	1
$008B	$1D03			BTFSS	STATUS, Z
$008C	$2894			GOTO	Pic1_L_42
$008D	$	Pic1_L_41:
;Pic1.pbas,81 :: 		if b3 = false then
$008D	$082C			MOVF	_b3, 0
$008E	$3A00			XORLW	0
$008F	$1D03			BTFSS	STATUS, Z
$0090	$2894			GOTO	Pic1_L_45
$0091	$	Pic1_L_44:
;Pic1.pbas,82 :: 		b3 = true
$0091	$30FF			MOVLW	255
$0092	$00AC			MOVWF	_b3
;Pic1.pbas,83 :: 		envia
$0093	$221D			CALL	_envia
$0094	$	Pic1_L_45:
;Pic1.pbas,84 :: 		end if
$0094	$	Pic1_L_46:
$0094	$	Pic1_L_42:
;Pic1.pbas,85 :: 		end if
$0094	$	Pic1_L_43:
;Pic1.pbas,86 :: 		if testbit(portA,5) = 0 then
$0094	$3000			MOVLW	0
$0095	$1A85			BTFSC	PORTA, 5
$0096	$3001			MOVLW	1
$0097	$00F1			MOVWF	STACK_1
$0098	$0871			MOVF	STACK_1, 0
$0099	$3A00			XORLW	0
$009A	$1D03			BTFSS	STATUS, Z
$009B	$289D			GOTO	Pic1_L_48
$009C	$	Pic1_L_47:
;Pic1.pbas,87 :: 		b3 = false
$009C	$01AC			CLRF	_b3, 1
$009D	$	Pic1_L_48:
;Pic1.pbas,88 :: 		end if
$009D	$	Pic1_L_49:
;Pic1.pbas,90 :: 		if i > 999 then
$009D	$3080			MOVLW	128
$009E	$3A03			XORLW	3
$009F	$00F0			MOVWF	STACK_0
$00A0	$3080			MOVLW	128
$00A1	$0621			XORWF	_i+1, 0
$00A2	$0270			SUBWF	STACK_0, 0
$00A3	$1D03			BTFSS	STATUS, Z
$00A4	$28A7			GOTO	L_main_0
$00A5	$0820			MOVF	_i, 0
$00A6	$3CE7			SUBLW	231
$00A7	$	L_main_0:
$00A7	$1803			BTFSC	STATUS, C
$00A8	$28AD			GOTO	Pic1_L_51
$00A9	$	Pic1_L_50:
;Pic1.pbas,91 :: 		i = 999
$00A9	$30E7			MOVLW	231
$00AA	$00A0			MOVWF	_i
$00AB	$3003			MOVLW	3
$00AC	$00A1			MOVWF	_i+1
$00AD	$	Pic1_L_51:
;Pic1.pbas,92 :: 		end if
$00AD	$	Pic1_L_52:
;Pic1.pbas,94 :: 		info = 0
$00AD	$01B0			CLRF	_info, 1
;Pic1.pbas,96 :: 		goto executa
$00AE	$2820			GOTO	_main_executa
$00AF	$28AF			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$00B0		IntToStr
$0153		Div_16x16_S
$01AD		Usart_Read_Text
$01F0		Div_16x16_S_L
$021D		envia
$0232		Usart_Write_Text
$0248		USART_Init
$025D		USART_Read
$0270		USART_Write
$0282		USART_Data_Ready


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$0004		_main_main:
$0020		_main_executa:
$0025		Pic1_L_2:
$002D		Pic1_L_3:
$002D		Pic1_L_4:
$0034		Pic1_L_5:
$0038		Pic1_L_8:
$003D		Pic1_L_10:
$003D		Pic1_L_6:
$003D		Pic1_L_7:
$003D		Pic1_L_9:
$0044		Pic1_L_11:
$0048		Pic1_L_14:
$0049		Pic1_L_12:
$0049		Pic1_L_13:
$0049		Pic1_L_15:
$0049		Pic1_L_16:
$0051		Pic1_L_17:
$0055		Pic1_L_20:
$005B		Pic1_L_18:
$005B		Pic1_L_19:
$005B		Pic1_L_21:
$005B		Pic1_L_22:
$0063		Pic1_L_23:
$0067		Pic1_L_26:
$0068		Pic1_L_24:
$0068		Pic1_L_25:
$0068		Pic1_L_27:
$0068		Pic1_L_28:
$0070		Pic1_L_29:
$0074		Pic1_L_32:
$0078		Pic1_L_30:
$0078		Pic1_L_31:
$0078		Pic1_L_33:
$0078		Pic1_L_34:
$0080		Pic1_L_35:
$0084		Pic1_L_38:
$0085		Pic1_L_36:
$0085		Pic1_L_37:
$0085		Pic1_L_39:
$0085		Pic1_L_40:
$008D		Pic1_L_41:
$0091		Pic1_L_44:
$0094		Pic1_L_42:
$0094		Pic1_L_43:
$0094		Pic1_L_45:
$0094		Pic1_L_46:
$009C		Pic1_L_47:
$009D		Pic1_L_48:
$009D		Pic1_L_49:
$00A7		L_main_0:
$00A9		Pic1_L_50:
$00AD		Pic1_L_51:
$00AD		Pic1_L_52:
$00B0		_inttostr:
$00B8		L_IntToStr_4:
$00BA		conv_L_56:
$00D0		conv_L_57:
$00D0		conv_L_58:
$00DA		L_IntToStr_5:
$00DC		conv_L_60:
$00E6		conv_L_61:
$00E6		conv_L_62:
$00F1		L_IntToStr_6:
$00F3		conv_L_63:
$00F4		conv_L_64:
$00F4		conv_L_65:
$00FD		L_IntToStr_7:
$00FF		conv_L_66:
$0100		conv_L_67:
$0100		conv_L_68:
$010A		L_IntToStr_8:
$010C		conv_L_69:
$010D		conv_L_70:
$010D		conv_L_71:
$0117		L_IntToStr_9:
$0119		conv_L_72:
$011A		conv_L_73:
$011A		conv_L_74:
$012B		conv_L_77:
$014D		conv_L_78:
$0150		conv_L_81:
$0152		conv_L_55:
$0152		conv_L_82:
$0152		conv_L_83:
$0153		_div_16x16_s:
$01AC		math_L_7:
$01AD		_usart_read_text:
$01B6		USART_b75_L_29:
$01BB		USART_b75_L_33:
$01CB		USART_b75_L_36:
$01D0		USART_b75_L_37:
$01D2		USART_b75_L_38:
$01DD		USART_b75_L_39:
$01DE		USART_b75_L_40:
$01DE		USART_b75_L_41:
$01E3		USART_b75_L_42:
$01E6		USART_b75_L_34:
$01E6		USART_b75_L_35:
$01E6		USART_b75_L_43:
$01E6		USART_b75_L_44:
$01E7		USART_b75_L_30:
$01EF		USART_b75_L_27:
$01F0		_div_16x16_s_l:
$021C		math_L_6:
$021D		_envia:
$0231		Pic1_L_0:
$0232		_usart_write_text:
$0239		USART_b75_L_47:
$0247		USART_b75_L_45:
$0247		USART_b75_L_48:
$0248		_usart_init:
$0248		USART_b75_L_1:
$024B		USART_b75_L_2:
$024E		USART_b75_L_3:
$0250		USART_b75_L_4:
$0250		USART_b75_L_5:
$0251		USART_b75_L_6:
$0251		USART_b75_L_8:
$025C		USART_b75_L_0:
$025C		USART_b75_L_9:
$025D		_usart_read:
$026B		USART_b75_L_20:
$026C		USART_b75_L_24:
$026C		USART_b75_L_25:
$026D		USART_b75_L_19:
$026D		USART_b75_L_21:
$026D		USART_b75_L_22:
$026D		USART_b75_L_26:
$0270		_usart_write:
$0270		USART_b75_L_14:
$027E		USART_b75_L_15:
$0281		USART_b75_L_12:
$0282		_usart_data_ready:
$028C		USART_b75_L_18:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0007		PORTC
$000A		PCLATH
$000B		INTCON
$000C		PIR1
$0018		RCSTA
$0019		TXREG
$001A		RCREG
$0020		_i
$0022		_txt
$0029		_b0
$002A		_b1
$002B		_b2
$002C		_b3
$002D		_b4
$002E		_b5
$002F		_b6
$0030		_info
$0031		?main_Local_Text
$0033		?envia_Local_Text
$0033		FARG_USART_Init
$0033		FARG_Usart_Read_Text
$0034		FARG_Usart_Read_Text+1
$0035		_usart_read_text_local_i
$0036		_usart_read_text_local_j
$0037		_usart_read_text_local_data
$0038		_usart_read_text_local_data2
$0039		_usart_read_text_local_lasti
$003A		_usart_data_ready_local_result
$003A		_usart_read_local_result
$003A		FARG_IntToStr
$003A		FARG_Usart_Write_Text
$003B		_usart_write_text_local_i
$003C		_usart_write_text_local_data
$003C		FARG_IntToStr+2
$003D		_inttostr_local_len
$003E		_inttostr_local_negative
$003F		FARG_USART_Write
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0098		TXSTA
$0099		SPBRG
$011E		ANSEL
$011F		ANSELH


