;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 15/05/2020 16:59:54
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$03C5	$	_div_16x16_s_l:
$03C5	$1303			BCF	STATUS, RP1
$03C6	$1283			BCF	STATUS, RP0
;math.ppas,291 :: 		
;math.ppas,293 :: 		
$03C7	$0D71			RLF	STACK_1, W
;math.ppas,294 :: 		
$03C8	$0DF8			RLF	STACK_8, F
;math.ppas,295 :: 		
$03C9	$0DF9			RLF	STACK_9, F
;math.ppas,296 :: 		
$03CA	$0874			MOVF	STACK_4, W
;math.ppas,297 :: 		
$03CB	$02F8			SUBWF	STACK_8, F
;math.ppas,298 :: 		
$03CC	$0875			MOVF	STACK_5, W
;math.ppas,299 :: 		
$03CD	$1C03			BTFSS	STATUS, C
;math.ppas,300 :: 		
$03CE	$0F75			INCFSZ	STACK_5, W
;math.ppas,301 :: 		
$03CF	$02F9			SUBWF	STACK_9, F
;math.ppas,302 :: 		
$03D0	$0DF0			RLF	STACK_0, F
;math.ppas,304 :: 		
$03D1	$0DF1			RLF	STACK_1, F
;math.ppas,305 :: 		
$03D2	$300F			MOVLW	15
;math.ppas,307 :: 		
$03D3	$00FC			MOVWF	STACK_12
;math.ppas,308 :: 		
$03D4	$0D71			RLF	STACK_1, W
;math.ppas,309 :: 		
$03D5	$0DF8			RLF	STACK_8, F
;math.ppas,310 :: 		
$03D6	$0DF9			RLF	STACK_9, F
;math.ppas,312 :: 		
$03D7	$0874			MOVF	STACK_4, W
;math.ppas,313 :: 		
$03D8	$1C70			BTFSS	STACK_0, 0
;math.ppas,314 :: 		
$03D9	$2BE0			GOTO	$+7
;math.ppas,315 :: 		
$03DA	$02F8			SUBWF	STACK_8, F
;math.ppas,316 :: 		
$03DB	$0875			MOVF	STACK_5, W
;math.ppas,317 :: 		
$03DC	$1C03			BTFSS	STATUS, C
;math.ppas,318 :: 		
$03DD	$0F75			INCFSZ	STACK_5, W
;math.ppas,319 :: 		
$03DE	$02F9			SUBWF	STACK_9, F
;math.ppas,321 :: 		
$03DF	$2BE5			GOTO	$+6
;math.ppas,322 :: 		
$03E0	$07F8			ADDWF	STACK_8, F
;math.ppas,323 :: 		
$03E1	$0875			MOVF	STACK_5, W
;math.ppas,324 :: 		
$03E2	$1803			BTFSC	STATUS, C
;math.ppas,325 :: 		
$03E3	$0F75			INCFSZ	STACK_5, W
;math.ppas,327 :: 		
$03E4	$07F9			ADDWF	STACK_9, F
;math.ppas,328 :: 		
$03E5	$0DF0			RLF	STACK_0, F
;math.ppas,330 :: 		
$03E6	$0DF1			RLF	STACK_1, F
;math.ppas,331 :: 		
$03E7	$0BFC			DECFSZ	STACK_12, F
;math.ppas,333 :: 		
$03E8	$2BD4			GOTO	$-20
;math.ppas,334 :: 		
$03E9	$1870			BTFSC	STACK_0, 0
;math.ppas,335 :: 		
$03EA	$2BF1			GOTO	$+7
;math.ppas,336 :: 		
$03EB	$0874			MOVF	STACK_4, W
;math.ppas,337 :: 		
$03EC	$07F8			ADDWF	STACK_8, F
;math.ppas,338 :: 		
$03ED	$0875			MOVF	STACK_5, W
;math.ppas,339 :: 		
$03EE	$1803			BTFSC	STATUS, C
;math.ppas,340 :: 		
$03EF	$0F75			INCFSZ	STACK_5, W
;math.ppas,341 :: 		
$03F0	$07F9			ADDWF	STACK_9, F
;math.ppas,342 :: 		
$03F1	$	math_L_6:
;math.ppas,343 :: 		
$03F1	$0008			RETURN
$0322	$	_div_16x16_s:
$0322	$1303			BCF	STATUS, RP1
$0323	$1283			BCF	STATUS, RP0
;math.ppas,346 :: 		
;math.ppas,348 :: 		
$0324	$01FD			CLRF	STACK_13
;math.ppas,349 :: 		
$0325	$01F9			CLRF	STACK_9
;math.ppas,350 :: 		
$0326	$01F8			CLRF	STACK_8
;math.ppas,351 :: 		
$0327	$0871			MOVF	STACK_1, W
;math.ppas,352 :: 		
$0328	$0470			IORWF	STACK_0, W
;math.ppas,353 :: 		
$0329	$1903			BTFSC	STATUS, Z
;math.ppas,355 :: 		
$032A	$3400			RETLW	0
;math.ppas,356 :: 		
$032B	$0871			MOVF	STACK_1, W
;math.ppas,357 :: 		
$032C	$0675			XORWF	STACK_5, W
;math.ppas,358 :: 		
$032D	$00FA			MOVWF	STACK_10
;math.ppas,359 :: 		
$032E	$1BFA			BTFSC	STACK_10, 7
;math.ppas,361 :: 		
$032F	$09FD			COMF	STACK_13, F
;math.ppas,363 :: 		
$0330	$01FB			CLRF	STACK_11
;math.ppas,364 :: 		
$0331	$1FF5			BTFSS	STACK_5, 7
;math.ppas,366 :: 		
$0332	$2B38			GOTO	$+6
;math.ppas,367 :: 		
$0333	$09F4			COMF	STACK_4, F
;math.ppas,368 :: 		
$0334	$09F5			COMF	STACK_5, F
;math.ppas,369 :: 		
$0335	$0AF4			INCF	STACK_4, F
;math.ppas,370 :: 		
$0336	$1903			BTFSC	STATUS, Z
;math.ppas,372 :: 		
$0337	$0AF5			INCF	STACK_5, F
;math.ppas,373 :: 		
$0338	$1FF1			BTFSS	STACK_1, 7
;math.ppas,375 :: 		
$0339	$2B3F			GOTO	$+6
;math.ppas,376 :: 		
$033A	$09F0			COMF	STACK_0, F
;math.ppas,377 :: 		
$033B	$09F1			COMF	STACK_1, F
;math.ppas,378 :: 		
$033C	$0AF0			INCF	STACK_0, F
;math.ppas,379 :: 		
$033D	$1903			BTFSC	STATUS, Z
;math.ppas,381 :: 		
$033E	$0AF1			INCF	STACK_1, F
;math.ppas,382 :: 		
$033F	$0871			MOVF	STACK_1, W
;math.ppas,383 :: 		
$0340	$0475			IORWF	STACK_5, W
;math.ppas,384 :: 		
$0341	$00FA			MOVWF	STACK_10
;math.ppas,385 :: 		
$0342	$1BFA			BTFSC	STACK_10, 7
;math.ppas,386 :: 		
$0343	$2B54			GOTO	$+17
;math.ppas,388 :: 		
$0344	$23C5			CALL	_div_16x16_s_l
;math.ppas,390 :: 		
$0345	$187B			BTFSC	STACK_11, 0
;math.ppas,392 :: 		
$0346	$2B67			GOTO	$+33
;math.ppas,393 :: 		
$0347	$1FFD			BTFSS	STACK_13, 7
;math.ppas,395 :: 		
$0348	$3400			RETLW	0
;math.ppas,396 :: 		
$0349	$09F0			COMF	STACK_0, F
;math.ppas,397 :: 		
$034A	$09F1			COMF	STACK_1, F
;math.ppas,398 :: 		
$034B	$0AF0			INCF	STACK_0, F
;math.ppas,399 :: 		
$034C	$1903			BTFSC	STATUS, Z
;math.ppas,401 :: 		
$034D	$0AF1			INCF	STACK_1, F
;math.ppas,402 :: 		
$034E	$09F8			COMF	STACK_8, F
;math.ppas,403 :: 		
$034F	$09F9			COMF	STACK_9, F
;math.ppas,404 :: 		
$0350	$0AF8			INCF	STACK_8, F
;math.ppas,405 :: 		
$0351	$1903			BTFSC	STATUS, Z
;math.ppas,407 :: 		
$0352	$0AF9			INCF	STACK_9, F
;math.ppas,409 :: 		
$0353	$3400			RETLW	0
;math.ppas,410 :: 		
$0354	$1FF5			BTFSS	STACK_5, 7
;math.ppas,411 :: 		
$0355	$2B63			GOTO	$+14
;math.ppas,412 :: 		
$0356	$1BF1			BTFSC	STACK_1, 7
;math.ppas,413 :: 		
$0357	$2B5F			GOTO	$+8
;math.ppas,414 :: 		
$0358	$0871			MOVF	STACK_1, W
;math.ppas,415 :: 		
$0359	$00F9			MOVWF	STACK_9
;math.ppas,416 :: 		
$035A	$0870			MOVF	STACK_0, W
;math.ppas,417 :: 		
$035B	$00F8			MOVWF	STACK_8
;math.ppas,418 :: 		
$035C	$01F1			CLRF	STACK_1
;math.ppas,419 :: 		
$035D	$01F0			CLRF	STACK_0
;math.ppas,420 :: 		
$035E	$2B47			GOTO	$-23
;math.ppas,421 :: 		
$035F	$01F1			CLRF	STACK_1
;math.ppas,422 :: 		
$0360	$01F0			CLRF	STACK_0
;math.ppas,423 :: 		
$0361	$0AF0			INCF	STACK_0, F
;math.ppas,425 :: 		
$0362	$3400			RETLW	0
;math.ppas,426 :: 		
$0363	$09F1			COMF	STACK_1, F
;math.ppas,427 :: 		
$0364	$09F0			COMF	STACK_0, F
;math.ppas,428 :: 		
$0365	$0AFB			INCF	STACK_11, F
;math.ppas,430 :: 		
$0366	$2B44			GOTO	$-34
;math.ppas,431 :: 		
$0367	$0AF8			INCF	STACK_8, F
;math.ppas,432 :: 		
$0368	$1903			BTFSC	STATUS, Z
;math.ppas,433 :: 		
$0369	$0AF9			INCF	STACK_9, F
;math.ppas,434 :: 		
$036A	$0874			MOVF	STACK_4, W
;math.ppas,435 :: 		
$036B	$0278			SUBWF	STACK_8, W
;math.ppas,436 :: 		
$036C	$1D03			BTFSS	STATUS, Z
;math.ppas,437 :: 		
$036D	$2B47			GOTO	$-38
;math.ppas,438 :: 		
$036E	$0875			MOVF	STACK_5, W
;math.ppas,439 :: 		
$036F	$0279			SUBWF	STACK_9, W
;math.ppas,440 :: 		
$0370	$1D03			BTFSS	STATUS, Z
;math.ppas,441 :: 		
$0371	$2B47			GOTO	$-42
;math.ppas,442 :: 		
$0372	$01F9			CLRF	STACK_9
;math.ppas,443 :: 		
$0373	$01F8			CLRF	STACK_8
;math.ppas,444 :: 		
$0374	$0AF0			INCF	STACK_0, F
;math.ppas,445 :: 		
$0375	$1903			BTFSC	STATUS, Z
;math.ppas,446 :: 		
$0376	$0AF1			INCF	STACK_1, F
;math.ppas,447 :: 		
$0377	$1FF1			BTFSS	STACK_1, 7
;math.ppas,448 :: 		
$0378	$2B47			GOTO	$-49
;math.ppas,449 :: 		
$0379	$0000			NOP
;math.ppas,450 :: 		
$037A	$34FF			RETLW	255
;math.ppas,451 :: 		
$037B	$	math_L_7:
;math.ppas,452 :: 		
$037B	$0008			RETURN
$041D	$	_usart_write:
;USART_b75.ppas,40 :: 		
;USART_b75.ppas,42 :: 		
$041D	$	USART_b75_L_14:
$041D	$1303			BCF	STATUS, RP1
$041E	$1683			BSF	STATUS, RP0
$041F	$0818			MOVF	TXSTA, 0
$0420	$00F1			MOVWF	STACK_1
$0421	$3000			MOVLW	0
$0422	$18F1			BTFSC	STACK_1, 1
$0423	$3001			MOVLW	1
$0424	$00F1			MOVWF	STACK_1
$0425	$0871			MOVF	STACK_1, 0
$0426	$3A00			XORLW	0
$0427	$1D03			BTFSS	STATUS, Z
$0428	$2C2B			GOTO	USART_b75_L_15
;USART_b75.ppas,43 :: 		
$0429	$0000			NOP
$042A	$2C1D			GOTO	USART_b75_L_14
$042B	$	USART_b75_L_15:
;USART_b75.ppas,44 :: 		
$042B	$1283			BCF	STATUS, RP0
$042C	$0850			MOVF	FARG_USART_Write, 0
$042D	$0099			MOVWF	TXREG
$042E	$	USART_b75_L_12:
;USART_b75.ppas,45 :: 		
$042E	$0008			RETURN
$0240	$	_inttostr:
;conv.ppas,100 :: 		
;conv.ppas,101 :: 		
$0240	$1303			BCF	STATUS, RP1
$0241	$1283			BCF	STATUS, RP0
$0242	$084C			MOVF	FARG_IntToStr+1, 0
$0243	$3A80			XORLW	128
$0244	$1D03			BTFSS	STATUS, Z
$0245	$2A48			GOTO	L_IntToStr_4
$0246	$3000			MOVLW	0
$0247	$064B			XORWF	FARG_IntToStr, 0
$0248	$	L_IntToStr_4:
$0248	$1D03			BTFSS	STATUS, Z
$0249	$2A60			GOTO	conv_L_57
$024A	$	conv_L_56:
;conv.ppas,103 :: 		
$024A	$084D			MOVF	FARG_IntToStr+2, 0
$024B	$0084			MOVWF	FSR
$024C	$302D			MOVLW	45
$024D	$0080			MOVWF	INDF
$024E	$0A84			INCF	FSR, 1
$024F	$3033			MOVLW	51
$0250	$0080			MOVWF	INDF
$0251	$0A84			INCF	FSR, 1
$0252	$3032			MOVLW	50
$0253	$0080			MOVWF	INDF
$0254	$0A84			INCF	FSR, 1
$0255	$3037			MOVLW	55
$0256	$0080			MOVWF	INDF
$0257	$0A84			INCF	FSR, 1
$0258	$3036			MOVLW	54
$0259	$0080			MOVWF	INDF
$025A	$0A84			INCF	FSR, 1
$025B	$3038			MOVLW	56
$025C	$0080			MOVWF	INDF
$025D	$0A84			INCF	FSR, 1
$025E	$0180			CLRF	INDF
;conv.ppas,104 :: 		
$025F	$2AE2			GOTO	conv_L_55
;conv.ppas,105 :: 		
$0260	$	conv_L_57:
$0260	$	conv_L_58:
;conv.ppas,106 :: 		
$0260	$01CF			CLRF	_inttostr_local_negative, 1
;conv.ppas,107 :: 		
$0261	$3080			MOVLW	128
$0262	$064C			XORWF	FARG_IntToStr+1, 0
$0263	$00F0			MOVWF	STACK_0
$0264	$3080			MOVLW	128
$0265	$0270			SUBWF	STACK_0, 0
$0266	$1D03			BTFSS	STATUS, Z
$0267	$2A6A			GOTO	L_IntToStr_5
$0268	$3000			MOVLW	0
$0269	$024B			SUBWF	FARG_IntToStr, 0
$026A	$	L_IntToStr_5:
$026A	$1803			BTFSC	STATUS, C
$026B	$2A76			GOTO	conv_L_61
$026C	$	conv_L_60:
;conv.ppas,109 :: 		
$026C	$30FF			MOVLW	255
$026D	$00CF			MOVWF	_inttostr_local_negative
;conv.ppas,110 :: 		
$026E	$084B			MOVF	FARG_IntToStr, 0
$026F	$3C00			SUBLW	0
$0270	$00CB			MOVWF	FARG_IntToStr
$0271	$084C			MOVF	FARG_IntToStr+1, 0
$0272	$1C03			BTFSS	STATUS, C
$0273	$3F01			ADDLW	1
$0274	$01CC			CLRF	FARG_IntToStr+1
$0275	$02CC			SUBWF	FARG_IntToStr+1, 1
;conv.ppas,111 :: 		
$0276	$	conv_L_61:
$0276	$	conv_L_62:
;conv.ppas,112 :: 		
$0276	$3001			MOVLW	1
$0277	$00CE			MOVWF	_inttostr_local_len
;conv.ppas,113 :: 		
$0278	$3080			MOVLW	128
$0279	$00F0			MOVWF	STACK_0
$027A	$3080			MOVLW	128
$027B	$064C			XORWF	FARG_IntToStr+1, 0
$027C	$0270			SUBWF	STACK_0, 0
$027D	$1D03			BTFSS	STATUS, Z
$027E	$2A81			GOTO	L_IntToStr_6
$027F	$084B			MOVF	FARG_IntToStr, 0
$0280	$3C09			SUBLW	9
$0281	$	L_IntToStr_6:
$0281	$1803			BTFSC	STATUS, C
$0282	$2A84			GOTO	conv_L_64
$0283	$	conv_L_63:
;conv.ppas,114 :: 		
$0283	$0ACE			INCF	_inttostr_local_len, 1
$0284	$	conv_L_64:
$0284	$	conv_L_65:
;conv.ppas,115 :: 		
$0284	$3080			MOVLW	128
$0285	$00F0			MOVWF	STACK_0
$0286	$3080			MOVLW	128
$0287	$064C			XORWF	FARG_IntToStr+1, 0
$0288	$0270			SUBWF	STACK_0, 0
$0289	$1D03			BTFSS	STATUS, Z
$028A	$2A8D			GOTO	L_IntToStr_7
$028B	$084B			MOVF	FARG_IntToStr, 0
$028C	$3C63			SUBLW	99
$028D	$	L_IntToStr_7:
$028D	$1803			BTFSC	STATUS, C
$028E	$2A90			GOTO	conv_L_67
$028F	$	conv_L_66:
;conv.ppas,116 :: 		
$028F	$0ACE			INCF	_inttostr_local_len, 1
$0290	$	conv_L_67:
$0290	$	conv_L_68:
;conv.ppas,117 :: 		
$0290	$3080			MOVLW	128
$0291	$3A03			XORLW	3
$0292	$00F0			MOVWF	STACK_0
$0293	$3080			MOVLW	128
$0294	$064C			XORWF	FARG_IntToStr+1, 0
$0295	$0270			SUBWF	STACK_0, 0
$0296	$1D03			BTFSS	STATUS, Z
$0297	$2A9A			GOTO	L_IntToStr_8
$0298	$084B			MOVF	FARG_IntToStr, 0
$0299	$3CE7			SUBLW	231
$029A	$	L_IntToStr_8:
$029A	$1803			BTFSC	STATUS, C
$029B	$2A9D			GOTO	conv_L_70
$029C	$	conv_L_69:
;conv.ppas,118 :: 		
$029C	$0ACE			INCF	_inttostr_local_len, 1
$029D	$	conv_L_70:
$029D	$	conv_L_71:
;conv.ppas,119 :: 		
$029D	$3080			MOVLW	128
$029E	$3A27			XORLW	39
$029F	$00F0			MOVWF	STACK_0
$02A0	$3080			MOVLW	128
$02A1	$064C			XORWF	FARG_IntToStr+1, 0
$02A2	$0270			SUBWF	STACK_0, 0
$02A3	$1D03			BTFSS	STATUS, Z
$02A4	$2AA7			GOTO	L_IntToStr_9
$02A5	$084B			MOVF	FARG_IntToStr, 0
$02A6	$3C0F			SUBLW	15
$02A7	$	L_IntToStr_9:
$02A7	$1803			BTFSC	STATUS, C
$02A8	$2AAA			GOTO	conv_L_73
$02A9	$	conv_L_72:
;conv.ppas,120 :: 		
$02A9	$0ACE			INCF	_inttostr_local_len, 1
$02AA	$	conv_L_73:
$02AA	$	conv_L_74:
;conv.ppas,121 :: 		
$02AA	$084D			MOVF	FARG_IntToStr+2, 0
$02AB	$0084			MOVWF	FSR
$02AC	$3020			MOVLW	32
$02AD	$0080			MOVWF	INDF
$02AE	$0A84			INCF	FSR, 1
$02AF	$0080			MOVWF	INDF
$02B0	$0A84			INCF	FSR, 1
$02B1	$0080			MOVWF	INDF
$02B2	$0A84			INCF	FSR, 1
$02B3	$0080			MOVWF	INDF
$02B4	$0A84			INCF	FSR, 1
$02B5	$0080			MOVWF	INDF
$02B6	$0A84			INCF	FSR, 1
$02B7	$0080			MOVWF	INDF
$02B8	$0A84			INCF	FSR, 1
$02B9	$0180			CLRF	INDF
;conv.ppas,122 :: 		
$02BA	$0384			DECF	FSR, 1
;conv.ppas,123 :: 		
$02BB	$	conv_L_77:
$02BB	$084E			MOVF	_inttostr_local_len, 0
$02BC	$3C00			SUBLW	0
$02BD	$1803			BTFSC	STATUS, C
$02BE	$2ADD			GOTO	conv_L_78
;conv.ppas,125 :: 		
$02BF	$300A			MOVLW	10
$02C0	$00F4			MOVWF	STACK_4
$02C1	$01F5			CLRF	STACK_4+1
$02C2	$084B			MOVF	FARG_IntToStr, 0
$02C3	$00F0			MOVWF	STACK_0
$02C4	$084C			MOVF	FARG_IntToStr+1, 0
$02C5	$00F1			MOVWF	STACK_0+1
$02C6	$2322			CALL	_div_16x16_s
$02C7	$0878			MOVF	STACK_8, 0
$02C8	$00F0			MOVWF	STACK_0
$02C9	$0879			MOVF	STACK_9, 0
$02CA	$00F1			MOVWF	STACK_1
$02CB	$3030			MOVLW	48
$02CC	$0770			ADDWF	STACK_0, 0
$02CD	$0080			MOVWF	INDF
;conv.ppas,126 :: 		
;conv.ppas,127 :: 		
$02CE	$0384			DECF	FSR, 1
;conv.ppas,128 :: 		
$02CF	$300A			MOVLW	10
$02D0	$00F4			MOVWF	STACK_4
$02D1	$01F5			CLRF	STACK_4+1
$02D2	$084B			MOVF	FARG_IntToStr, 0
$02D3	$00F0			MOVWF	STACK_0
$02D4	$084C			MOVF	FARG_IntToStr+1, 0
$02D5	$00F1			MOVWF	STACK_0+1
$02D6	$2322			CALL	_div_16x16_s
$02D7	$0870			MOVF	STACK_0, 0
$02D8	$00CB			MOVWF	FARG_IntToStr
$02D9	$0871			MOVF	STACK_0+1, 0
$02DA	$00CC			MOVWF	FARG_IntToStr+1
;conv.ppas,129 :: 		
$02DB	$03CE			DECF	_inttostr_local_len, 1
;conv.ppas,130 :: 		
$02DC	$2ABB			GOTO	conv_L_77
$02DD	$	conv_L_78:
;conv.ppas,131 :: 		
$02DD	$084F			MOVF	_inttostr_local_negative, 0
$02DE	$1903			BTFSC	STATUS, Z
$02DF	$2AE2			GOTO	conv_L_82
$02E0	$	conv_L_81:
;conv.ppas,133 :: 		
$02E0	$302D			MOVLW	45
$02E1	$0080			MOVWF	INDF
;conv.ppas,134 :: 		
$02E2	$	conv_L_82:
$02E2	$	conv_L_83:
$02E2	$	conv_L_55:
;conv.ppas,135 :: 		
$02E2	$0008			RETURN
$03F2	$	_usart_write_text:
;USART_b75.ppas,121 :: 		
;USART_b75.ppas,122 :: 		
$03F2	$1303			BCF	STATUS, RP1
$03F3	$1283			BCF	STATUS, RP0
$03F4	$01CC			CLRF	_usart_write_text_local_i, 1
;USART_b75.ppas,123 :: 		
$03F5	$084B			MOVF	FARG_Usart_Write_Text, 0
$03F6	$0084			MOVWF	FSR
$03F7	$0800			MOVF	INDF, 0
$03F8	$00CD			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,124 :: 		
$03F9	$	USART_b75_L_47:
$03F9	$084D			MOVF	_usart_write_text_local_data, 0
$03FA	$3A00			XORLW	0
$03FB	$1903			BTFSC	STATUS, Z
$03FC	$2C07			GOTO	USART_b75_L_48
;USART_b75.ppas,126 :: 		
$03FD	$084D			MOVF	_usart_write_text_local_data, 0
$03FE	$00D0			MOVWF	FARG_USART_Write
$03FF	$241D			CALL	_usart_write
;USART_b75.ppas,127 :: 		
$0400	$0ACC			INCF	_usart_write_text_local_i, 1
;USART_b75.ppas,128 :: 		
$0401	$084C			MOVF	_usart_write_text_local_i, 0
$0402	$074B			ADDWF	FARG_Usart_Write_Text, 0
$0403	$0084			MOVWF	FSR
$0404	$0800			MOVF	INDF, 0
$0405	$00CD			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,129 :: 		
$0406	$2BF9			GOTO	USART_b75_L_47
$0407	$	USART_b75_L_48:
$0407	$	USART_b75_L_45:
;USART_b75.ppas,130 :: 		
$0407	$0008			RETURN
$02E3	$	_envia:
;Pic1.pbas,10 :: 		sub procedure envia
;Pic1.pbas,11 :: 		if priorit = 1 then
$02E3	$3000			MOVLW	0
$02E4	$1303			BCF	STATUS, RP1
$02E5	$1283			BCF	STATUS, RP0
$02E6	$0621			XORWF	_priorit+1, 0
$02E7	$1D03			BTFSS	STATUS, Z
$02E8	$2AEB			GOTO	L_envia_0
$02E9	$3001			MOVLW	1
$02EA	$0620			XORWF	_priorit, 0
$02EB	$	L_envia_0:
$02EB	$1D03			BTFSS	STATUS, Z
$02EC	$2B03			GOTO	Pic1_L_2
$02ED	$	Pic1_L_1:
;Pic1.pbas,12 :: 		intToStr(incN, txt)
$02ED	$0822			MOVF	_incn, 0
$02EE	$00CB			MOVWF	FARG_IntToStr
$02EF	$0823			MOVF	_incn+1, 0
$02F0	$00CC			MOVWF	FARG_IntToStr+1
$02F1	$3024			MOVLW	_txt
$02F2	$00CD			MOVWF	FARG_IntToStr+2
$02F3	$2240			CALL	_inttostr
;Pic1.pbas,13 :: 		Usart_Write_Text("1")
$02F4	$3031			MOVLW	49
$02F5	$00C7			MOVWF	?envia_Local_Text+0
$02F6	$01C8			CLRF	?envia_Local_Text+1
$02F7	$3047			MOVLW	?envia_Local_Text
$02F8	$00CB			MOVWF	FARG_Usart_Write_Text
$02F9	$23F2			CALL	_usart_write_text
;Pic1.pbas,14 :: 		Usart_Write_Text(txt)
$02FA	$3024			MOVLW	_txt
$02FB	$00CB			MOVWF	FARG_Usart_Write_Text
$02FC	$23F2			CALL	_usart_write_text
;Pic1.pbas,15 :: 		Usart_Write_Text("/")
$02FD	$302F			MOVLW	47
$02FE	$00C7			MOVWF	?envia_Local_Text+0
$02FF	$01C8			CLRF	?envia_Local_Text+1
$0300	$3047			MOVLW	?envia_Local_Text
$0301	$00CB			MOVWF	FARG_Usart_Write_Text
$0302	$23F2			CALL	_usart_write_text
$0303	$	Pic1_L_2:
;Pic1.pbas,16 :: 		end if
$0303	$	Pic1_L_3:
;Pic1.pbas,17 :: 		if priorit = 2 then
$0303	$3000			MOVLW	0
$0304	$0621			XORWF	_priorit+1, 0
$0305	$1D03			BTFSS	STATUS, Z
$0306	$2B09			GOTO	L_envia_1
$0307	$3002			MOVLW	2
$0308	$0620			XORWF	_priorit, 0
$0309	$	L_envia_1:
$0309	$1D03			BTFSS	STATUS, Z
$030A	$2B21			GOTO	Pic1_L_5
$030B	$	Pic1_L_4:
;Pic1.pbas,18 :: 		intToStr(incP, txt)
$030B	$082B			MOVF	_incp, 0
$030C	$00CB			MOVWF	FARG_IntToStr
$030D	$082C			MOVF	_incp+1, 0
$030E	$00CC			MOVWF	FARG_IntToStr+1
$030F	$3024			MOVLW	_txt
$0310	$00CD			MOVWF	FARG_IntToStr+2
$0311	$2240			CALL	_inttostr
;Pic1.pbas,19 :: 		Usart_Write_Text("2")
$0312	$3032			MOVLW	50
$0313	$00C7			MOVWF	?envia_Local_Text+0
$0314	$01C8			CLRF	?envia_Local_Text+1
$0315	$3047			MOVLW	?envia_Local_Text
$0316	$00CB			MOVWF	FARG_Usart_Write_Text
$0317	$23F2			CALL	_usart_write_text
;Pic1.pbas,20 :: 		Usart_Write_Text(txt)
$0318	$3024			MOVLW	_txt
$0319	$00CB			MOVWF	FARG_Usart_Write_Text
$031A	$23F2			CALL	_usart_write_text
;Pic1.pbas,21 :: 		Usart_Write_Text("/")
$031B	$302F			MOVLW	47
$031C	$00C7			MOVWF	?envia_Local_Text+0
$031D	$01C8			CLRF	?envia_Local_Text+1
$031E	$3047			MOVLW	?envia_Local_Text
$031F	$00CB			MOVWF	FARG_Usart_Write_Text
$0320	$23F2			CALL	_usart_write_text
$0321	$	Pic1_L_5:
;Pic1.pbas,22 :: 		end if
$0321	$	Pic1_L_6:
$0321	$	Pic1_L_0:
$0321	$0008			RETURN
$0408	$	_usart_init:
;USART_b75.ppas,22 :: 		
;USART_b75.ppas,24 :: 		
$0408	$	USART_b75_L_1:
$0408	$1303			BCF	STATUS, RP1
$0409	$1683			BSF	STATUS, RP0
$040A	$1698			BSF	TXSTA, 5
$040B	$	USART_b75_L_2:
;USART_b75.ppas,25 :: 		
$040B	$3090			MOVLW	144
$040C	$1283			BCF	STATUS, RP0
$040D	$0098			MOVWF	RCSTA
;USART_b75.ppas,31 :: 		
$040E	$	USART_b75_L_3:
$040E	$1683			BSF	STATUS, RP0
$040F	$1686			BSF	TRISB, 5
$0410	$	USART_b75_L_4:
;USART_b75.ppas,32 :: 		
$0410	$	USART_b75_L_5:
$0410	$1786			BSF	TRISB, 7
$0411	$	USART_b75_L_6:
;USART_b75.ppas,35 :: 		
$0411	$	USART_b75_L_8:
$0411	$1283			BCF	STATUS, RP0
$0412	$080C			MOVF	PIR1, 0
$0413	$00F1			MOVWF	STACK_1
$0414	$3000			MOVLW	0
$0415	$1AF1			BTFSC	STACK_1, 5
$0416	$3001			MOVLW	1
$0417	$00F1			MOVWF	STACK_1
$0418	$0871			MOVF	STACK_1, 0
$0419	$3A01			XORLW	1
$041A	$1903			BTFSC	STATUS, Z
$041B	$2C11			GOTO	USART_b75_L_8
;USART_b75.ppas,36 :: 		
$041C	$	USART_b75_L_9:
$041C	$	USART_b75_L_0:
;USART_b75.ppas,37 :: 		
$041C	$0008			RETURN
$037C	$	_mul_16x16_s:
$037C	$1303			BCF	STATUS, RP1
$037D	$1283			BCF	STATUS, RP0
;math.ppas,203 :: 		
;math.ppas,205 :: 		
$037E	$01FB			CLRF	STACK_11
;math.ppas,206 :: 		
$037F	$01FA			CLRF	STACK_10
;math.ppas,207 :: 		
$0380	$01F9			CLRF	STACK_9
;math.ppas,208 :: 		
$0381	$3080			MOVLW	128
;math.ppas,210 :: 		
$0382	$00F8			MOVWF	STACK_8
;math.ppas,212 :: 		
$0383	$01FD			CLRF	STACK_13
;math.ppas,213 :: 		
$0384	$1FF1			BTFSS	STACK_1, 7
;math.ppas,214 :: 		
$0385	$2B8C			GOTO	$+7
;math.ppas,215 :: 		
$0386	$09F1			COMF	STACK_1, F
;math.ppas,216 :: 		
$0387	$09F0			COMF	STACK_0, F
;math.ppas,217 :: 		
$0388	$0AF0			INCF	STACK_0, F
;math.ppas,218 :: 		
$0389	$1903			BTFSC	STATUS, Z
;math.ppas,219 :: 		
$038A	$0AF1			INCF	STACK_1, F
;math.ppas,221 :: 		
$038B	$0AFD			INCF	STACK_13, F
;math.ppas,222 :: 		
$038C	$1FF5			BTFSS	STACK_5, 7
;math.ppas,223 :: 		
$038D	$2B94			GOTO	$+7
;math.ppas,224 :: 		
$038E	$09F5			COMF	STACK_5, F
;math.ppas,225 :: 		
$038F	$09F4			COMF	STACK_4, F
;math.ppas,226 :: 		
$0390	$0AF4			INCF	STACK_4, F
;math.ppas,227 :: 		
$0391	$1903			BTFSC	STATUS, Z
;math.ppas,228 :: 		
$0392	$0AF5			INCF	STACK_5, F
;math.ppas,230 :: 		
$0393	$0AFD			INCF	STACK_13, F
;math.ppas,231 :: 		
$0394	$0CF1			RRF	STACK_1, F
;math.ppas,233 :: 		
$0395	$0CF0			RRF	STACK_0, F
;math.ppas,234 :: 		
$0396	$1C03			BTFSS	STATUS, C
;math.ppas,235 :: 		
$0397	$2BA1			GOTO	$+10
;math.ppas,236 :: 		
$0398	$0874			MOVF	STACK_4, W
;math.ppas,238 :: 		
$0399	$07F9			ADDWF	STACK_9, F
;math.ppas,239 :: 		
$039A	$0875			MOVF	STACK_5, W
;math.ppas,240 :: 		
$039B	$1803			BTFSC	STATUS, C
;math.ppas,241 :: 		
$039C	$0F75			INCFSZ	STACK_5, W
;math.ppas,242 :: 		
$039D	$07FA			ADDWF	STACK_10, F
;math.ppas,243 :: 		
$039E	$1803			BTFSC	STATUS, C
;math.ppas,244 :: 		
$039F	$0AFB			INCF	STACK_11, F
;math.ppas,246 :: 		
$03A0	$1003			BCF	STATUS, C
;math.ppas,247 :: 		
$03A1	$1FF0			BTFSS	STACK_0, 7
;math.ppas,248 :: 		
$03A2	$2BA9			GOTO	$+7
;math.ppas,249 :: 		
$03A3	$0874			MOVF	STACK_4, W
;math.ppas,250 :: 		
$03A4	$07FA			ADDWF	STACK_10, F
;math.ppas,251 :: 		
$03A5	$1803			BTFSC	STATUS, C
;math.ppas,252 :: 		
$03A6	$0AFB			INCF	STACK_11, F
;math.ppas,253 :: 		
$03A7	$0875			MOVF	STACK_5, W
;math.ppas,255 :: 		
$03A8	$07FB			ADDWF	STACK_11, F
;math.ppas,256 :: 		
$03A9	$0CFB			RRF	STACK_11, F
;math.ppas,257 :: 		
$03AA	$0CFA			RRF	STACK_10, F
;math.ppas,258 :: 		
$03AB	$0CF9			RRF	STACK_9, F
;math.ppas,260 :: 		
$03AC	$0CF8			RRF	STACK_8, F
;math.ppas,261 :: 		
$03AD	$1C03			BTFSS	STATUS, C
;math.ppas,262 :: 		
$03AE	$2B94			GOTO	$-26
;math.ppas,263 :: 		
$03AF	$1C7D			BTFSS	STACK_13, 0
;math.ppas,265 :: 		
$03B0	$2BBC			GOTO	$+12
;math.ppas,266 :: 		
$03B1	$09FB			COMF	STACK_11, F
;math.ppas,267 :: 		
$03B2	$09FA			COMF	STACK_10, F
;math.ppas,268 :: 		
$03B3	$09F9			COMF	STACK_9, F
;math.ppas,270 :: 		
$03B4	$09F8			COMF	STACK_8, F
;math.ppas,271 :: 		
$03B5	$0AF8			INCF	STACK_8, F
;math.ppas,272 :: 		
$03B6	$1903			BTFSC	STATUS, Z
;math.ppas,273 :: 		
$03B7	$0AF9			INCF	STACK_9, F
;math.ppas,274 :: 		
$03B8	$1903			BTFSC	STATUS, Z
;math.ppas,275 :: 		
$03B9	$0AFA			INCF	STACK_10, F
;math.ppas,276 :: 		
$03BA	$1903			BTFSC	STATUS, Z
;math.ppas,278 :: 		
$03BB	$0AFB			INCF	STACK_11, F
;math.ppas,279 :: 		
$03BC	$087B			MOVF	STACK_11, W
;math.ppas,280 :: 		
$03BD	$00F3			MOVWF	STACK_3
;math.ppas,281 :: 		
$03BE	$087A			MOVF	STACK_10, W
;math.ppas,282 :: 		
$03BF	$00F2			MOVWF	STACK_2
;math.ppas,283 :: 		
$03C0	$0879			MOVF	STACK_9, W
;math.ppas,284 :: 		
$03C1	$00F1			MOVWF	STACK_1
;math.ppas,285 :: 		
$03C2	$0878			MOVF	STACK_8, W
;math.ppas,286 :: 		
$03C3	$00F0			MOVWF	STACK_0
;math.ppas,287 :: 		
$03C4	$	math_L_5:
;math.ppas,288 :: 		
$03C4	$0008			RETURN
$0004	$	_main:
;Pic1.pbas,25 :: 		main:
$0004	$	_main_main:
;Pic1.pbas,26 :: 		TRISA=%11111111
$0004	$30FF			MOVLW	255
$0005	$1303			BCF	STATUS, RP1
$0006	$1683			BSF	STATUS, RP0
$0007	$0085			MOVWF	TRISA
;Pic1.pbas,27 :: 		TRISB=%01101111
$0008	$306F			MOVLW	111
$0009	$0086			MOVWF	TRISB
;Pic1.pbas,28 :: 		TRISC=%00000000
$000A	$0187			CLRF	TRISC, 1
;Pic1.pbas,29 :: 		INTCON=%00000000
$000B	$018B			CLRF	INTCON, 1
;Pic1.pbas,30 :: 		ANSEL=%00000000
$000C	$1703			BSF	STATUS, RP1
$000D	$1283			BCF	STATUS, RP0
$000E	$019E			CLRF	ANSEL, 1
;Pic1.pbas,31 :: 		ANSELH=%00000000
$000F	$019F			CLRF	ANSELH, 1
;Pic1.pbas,32 :: 		PORTC=0
$0010	$1303			BCF	STATUS, RP1
$0011	$0187			CLRF	PORTC, 1
;Pic1.pbas,33 :: 		Usart_Init(9600)
$0012	$3019			MOVLW	25
$0013	$1683			BSF	STATUS, RP0
$0014	$0099			MOVWF	SPBRG
$0015	$1518			BSF	TXSTA, BRGH
$0016	$2408			CALL	_usart_init
;Pic1.pbas,35 :: 		incP=0
$0017	$01AB			CLRF	_incp
$0018	$01AC			CLRF	_incp+1
;Pic1.pbas,36 :: 		incN=0
$0019	$01A2			CLRF	_incn
$001A	$01A3			CLRF	_incn+1
;Pic1.pbas,37 :: 		b0=false
$001B	$01AD			CLRF	_b0, 1
;Pic1.pbas,38 :: 		b1=false
$001C	$01AE			CLRF	_b1, 1
;Pic1.pbas,39 :: 		b2=false
$001D	$01AF			CLRF	_b2, 1
;Pic1.pbas,40 :: 		b3=false
$001E	$01B0			CLRF	_b3, 1
;Pic1.pbas,41 :: 		b4=false
$001F	$01B1			CLRF	_b4, 1
;Pic1.pbas,42 :: 		b5=false
$0020	$01B2			CLRF	_b5, 1
;Pic1.pbas,43 :: 		priorit = 1
$0021	$3001			MOVLW	1
$0022	$00A0			MOVWF	_priorit
$0023	$01A1			CLRF	_priorit+1
;Pic1.pbas,45 :: 		executa:
$0024	$	_main_executa:
;Pic1.pbas,47 :: 		if testbit(portA,0) = 1 then
$0024	$3001			MOVLW	1
$0025	$0505			ANDWF	PORTA, 0
$0026	$00F2			MOVWF	STACK_2
$0027	$0872			MOVF	STACK_2, 0
$0028	$3A01			XORLW	1
$0029	$1D03			BTFSS	STATUS, Z
$002A	$2840			GOTO	Pic1_L_9
$002B	$	Pic1_L_8:
;Pic1.pbas,48 :: 		if b0 = false then
$002B	$082D			MOVF	_b0, 0
$002C	$3A00			XORLW	0
$002D	$1D03			BTFSS	STATUS, Z
$002E	$2840			GOTO	Pic1_L_12
$002F	$	Pic1_L_11:
;Pic1.pbas,49 :: 		b0 = true
$002F	$30FF			MOVLW	255
$0030	$00AD			MOVWF	_b0
;Pic1.pbas,50 :: 		if priorit = 1 then
$0031	$3000			MOVLW	0
$0032	$0621			XORWF	_priorit+1, 0
$0033	$1D03			BTFSS	STATUS, Z
$0034	$2837			GOTO	L_main_2
$0035	$3001			MOVLW	1
$0036	$0620			XORWF	_priorit, 0
$0037	$	L_main_2:
$0037	$1D03			BTFSS	STATUS, Z
$0038	$283D			GOTO	Pic1_L_15
$0039	$	Pic1_L_14:
;Pic1.pbas,51 :: 		incN = incN + 1
$0039	$0AA2			INCF	_incn, 1
$003A	$1903			BTFSC	STATUS, Z
$003B	$0AA3			INCF	_incn+1, 1
$003C	$2840			GOTO	Pic1_L_16
;Pic1.pbas,52 :: 		else
$003D	$	Pic1_L_15:
;Pic1.pbas,53 :: 		incP = incP + 1
$003D	$0AAB			INCF	_incp, 1
$003E	$1903			BTFSC	STATUS, Z
$003F	$0AAC			INCF	_incp+1, 1
;Pic1.pbas,54 :: 		end if
$0040	$	Pic1_L_16:
$0040	$	Pic1_L_12:
;Pic1.pbas,55 :: 		end if
$0040	$	Pic1_L_13:
$0040	$	Pic1_L_9:
;Pic1.pbas,56 :: 		end if
$0040	$	Pic1_L_10:
;Pic1.pbas,57 :: 		if testbit(portA,0) = 0 then
$0040	$3001			MOVLW	1
$0041	$0505			ANDWF	PORTA, 0
$0042	$00F2			MOVWF	STACK_2
$0043	$0872			MOVF	STACK_2, 0
$0044	$3A00			XORLW	0
$0045	$1D03			BTFSS	STATUS, Z
$0046	$284C			GOTO	Pic1_L_18
$0047	$	Pic1_L_17:
;Pic1.pbas,58 :: 		if b0 = true then
$0047	$082D			MOVF	_b0, 0
$0048	$3AFF			XORLW	255
$0049	$1D03			BTFSS	STATUS, Z
$004A	$284C			GOTO	Pic1_L_21
$004B	$	Pic1_L_20:
;Pic1.pbas,59 :: 		b0 = false
$004B	$01AD			CLRF	_b0, 1
$004C	$	Pic1_L_21:
;Pic1.pbas,60 :: 		end if
$004C	$	Pic1_L_22:
$004C	$	Pic1_L_18:
;Pic1.pbas,61 :: 		end if
$004C	$	Pic1_L_19:
;Pic1.pbas,64 :: 		if testbit(portA,1) = 1 then
$004C	$3000			MOVLW	0
$004D	$1885			BTFSC	PORTA, 1
$004E	$3001			MOVLW	1
$004F	$00F2			MOVWF	STACK_2
$0050	$0872			MOVF	STACK_2, 0
$0051	$3A01			XORLW	1
$0052	$1D03			BTFSS	STATUS, Z
$0053	$286B			GOTO	Pic1_L_24
$0054	$	Pic1_L_23:
;Pic1.pbas,65 :: 		if b1 = false then
$0054	$082E			MOVF	_b1, 0
$0055	$3A00			XORLW	0
$0056	$1D03			BTFSS	STATUS, Z
$0057	$286B			GOTO	Pic1_L_27
$0058	$	Pic1_L_26:
;Pic1.pbas,66 :: 		b1 = true
$0058	$30FF			MOVLW	255
$0059	$00AE			MOVWF	_b1
;Pic1.pbas,67 :: 		if priorit = 1 then
$005A	$3000			MOVLW	0
$005B	$0621			XORWF	_priorit+1, 0
$005C	$1D03			BTFSS	STATUS, Z
$005D	$2860			GOTO	L_main_3
$005E	$3001			MOVLW	1
$005F	$0620			XORWF	_priorit, 0
$0060	$	L_main_3:
$0060	$1D03			BTFSS	STATUS, Z
$0061	$2867			GOTO	Pic1_L_30
$0062	$	Pic1_L_29:
;Pic1.pbas,68 :: 		incN = incN - 1
$0062	$3001			MOVLW	1
$0063	$02A2			SUBWF	_incn, 1
$0064	$1C03			BTFSS	STATUS, C
$0065	$03A3			DECF	_incn+1, 1
$0066	$286B			GOTO	Pic1_L_31
;Pic1.pbas,69 :: 		else
$0067	$	Pic1_L_30:
;Pic1.pbas,70 :: 		incP = incP - 1
$0067	$3001			MOVLW	1
$0068	$02AB			SUBWF	_incp, 1
$0069	$1C03			BTFSS	STATUS, C
$006A	$03AC			DECF	_incp+1, 1
;Pic1.pbas,71 :: 		end if
$006B	$	Pic1_L_31:
$006B	$	Pic1_L_27:
;Pic1.pbas,72 :: 		end if
$006B	$	Pic1_L_28:
$006B	$	Pic1_L_24:
;Pic1.pbas,73 :: 		end if
$006B	$	Pic1_L_25:
;Pic1.pbas,74 :: 		if testbit(portA,1) = 0 then
$006B	$3000			MOVLW	0
$006C	$1885			BTFSC	PORTA, 1
$006D	$3001			MOVLW	1
$006E	$00F2			MOVWF	STACK_2
$006F	$0872			MOVF	STACK_2, 0
$0070	$3A00			XORLW	0
$0071	$1D03			BTFSS	STATUS, Z
$0072	$2878			GOTO	Pic1_L_33
$0073	$	Pic1_L_32:
;Pic1.pbas,75 :: 		if b1 = true then
$0073	$082E			MOVF	_b1, 0
$0074	$3AFF			XORLW	255
$0075	$1D03			BTFSS	STATUS, Z
$0076	$2878			GOTO	Pic1_L_36
$0077	$	Pic1_L_35:
;Pic1.pbas,76 :: 		b1 = false
$0077	$01AE			CLRF	_b1, 1
$0078	$	Pic1_L_36:
;Pic1.pbas,77 :: 		end if
$0078	$	Pic1_L_37:
$0078	$	Pic1_L_33:
;Pic1.pbas,78 :: 		end if
$0078	$	Pic1_L_34:
;Pic1.pbas,81 :: 		if testbit(portA,2) = 1 then
$0078	$3000			MOVLW	0
$0079	$1905			BTFSC	PORTA, 2
$007A	$3001			MOVLW	1
$007B	$00F2			MOVWF	STACK_2
$007C	$0872			MOVF	STACK_2, 0
$007D	$3A01			XORLW	1
$007E	$1D03			BTFSS	STATUS, Z
$007F	$288A			GOTO	Pic1_L_39
$0080	$	Pic1_L_38:
;Pic1.pbas,82 :: 		if b2 = false then
$0080	$082F			MOVF	_b2, 0
$0081	$3A00			XORLW	0
$0082	$1D03			BTFSS	STATUS, Z
$0083	$288A			GOTO	Pic1_L_42
$0084	$	Pic1_L_41:
;Pic1.pbas,83 :: 		b2 = true
$0084	$30FF			MOVLW	255
$0085	$00AF			MOVWF	_b2
;Pic1.pbas,84 :: 		incN = 0
$0086	$01A2			CLRF	_incn
$0087	$01A3			CLRF	_incn+1
;Pic1.pbas,85 :: 		incP = 0
$0088	$01AB			CLRF	_incp
$0089	$01AC			CLRF	_incp+1
$008A	$	Pic1_L_42:
;Pic1.pbas,86 :: 		end if
$008A	$	Pic1_L_43:
$008A	$	Pic1_L_39:
;Pic1.pbas,87 :: 		end if
$008A	$	Pic1_L_40:
;Pic1.pbas,88 :: 		if testbit(portA,2) = 0 then
$008A	$3000			MOVLW	0
$008B	$1905			BTFSC	PORTA, 2
$008C	$3001			MOVLW	1
$008D	$00F2			MOVWF	STACK_2
$008E	$0872			MOVF	STACK_2, 0
$008F	$3A00			XORLW	0
$0090	$1D03			BTFSS	STATUS, Z
$0091	$2897			GOTO	Pic1_L_45
$0092	$	Pic1_L_44:
;Pic1.pbas,89 :: 		if b2 = true then
$0092	$082F			MOVF	_b2, 0
$0093	$3AFF			XORLW	255
$0094	$1D03			BTFSS	STATUS, Z
$0095	$2897			GOTO	Pic1_L_48
$0096	$	Pic1_L_47:
;Pic1.pbas,90 :: 		b2 = false
$0096	$01AF			CLRF	_b2, 1
$0097	$	Pic1_L_48:
;Pic1.pbas,91 :: 		end if
$0097	$	Pic1_L_49:
$0097	$	Pic1_L_45:
;Pic1.pbas,92 :: 		end if
$0097	$	Pic1_L_46:
;Pic1.pbas,95 :: 		if testbit(portA,3) = 1 then
$0097	$3000			MOVLW	0
$0098	$1985			BTFSC	PORTA, 3
$0099	$3001			MOVLW	1
$009A	$00F2			MOVWF	STACK_2
$009B	$0872			MOVF	STACK_2, 0
$009C	$3A01			XORLW	1
$009D	$1D03			BTFSS	STATUS, Z
$009E	$28B4			GOTO	Pic1_L_51
$009F	$	Pic1_L_50:
;Pic1.pbas,96 :: 		if b3 = false then
$009F	$0830			MOVF	_b3, 0
$00A0	$3A00			XORLW	0
$00A1	$1D03			BTFSS	STATUS, Z
$00A2	$28B4			GOTO	Pic1_L_54
$00A3	$	Pic1_L_53:
;Pic1.pbas,97 :: 		b3 = true
$00A3	$30FF			MOVLW	255
$00A4	$00B0			MOVWF	_b3
;Pic1.pbas,98 :: 		if priorit = 1 then
$00A5	$3000			MOVLW	0
$00A6	$0621			XORWF	_priorit+1, 0
$00A7	$1D03			BTFSS	STATUS, Z
$00A8	$28AB			GOTO	L_main_4
$00A9	$3001			MOVLW	1
$00AA	$0620			XORWF	_priorit, 0
$00AB	$	L_main_4:
$00AB	$1D03			BTFSS	STATUS, Z
$00AC	$28B1			GOTO	Pic1_L_57
$00AD	$	Pic1_L_56:
;Pic1.pbas,99 :: 		priorit = 2
$00AD	$3002			MOVLW	2
$00AE	$00A0			MOVWF	_priorit
$00AF	$01A1			CLRF	_priorit+1
$00B0	$28B4			GOTO	Pic1_L_58
;Pic1.pbas,100 :: 		else
$00B1	$	Pic1_L_57:
;Pic1.pbas,101 :: 		priorit = 1
$00B1	$3001			MOVLW	1
$00B2	$00A0			MOVWF	_priorit
$00B3	$01A1			CLRF	_priorit+1
;Pic1.pbas,102 :: 		end if
$00B4	$	Pic1_L_58:
$00B4	$	Pic1_L_54:
;Pic1.pbas,103 :: 		end if
$00B4	$	Pic1_L_55:
$00B4	$	Pic1_L_51:
;Pic1.pbas,104 :: 		end if
$00B4	$	Pic1_L_52:
;Pic1.pbas,105 :: 		if testbit(portA,3) = 0 then
$00B4	$3000			MOVLW	0
$00B5	$1985			BTFSC	PORTA, 3
$00B6	$3001			MOVLW	1
$00B7	$00F2			MOVWF	STACK_2
$00B8	$0872			MOVF	STACK_2, 0
$00B9	$3A00			XORLW	0
$00BA	$1D03			BTFSS	STATUS, Z
$00BB	$28C1			GOTO	Pic1_L_60
$00BC	$	Pic1_L_59:
;Pic1.pbas,106 :: 		if b3 = true then
$00BC	$0830			MOVF	_b3, 0
$00BD	$3AFF			XORLW	255
$00BE	$1D03			BTFSS	STATUS, Z
$00BF	$28C1			GOTO	Pic1_L_63
$00C0	$	Pic1_L_62:
;Pic1.pbas,107 :: 		b3 = false
$00C0	$01B0			CLRF	_b3, 1
$00C1	$	Pic1_L_63:
;Pic1.pbas,108 :: 		end if
$00C1	$	Pic1_L_64:
$00C1	$	Pic1_L_60:
;Pic1.pbas,109 :: 		end if
$00C1	$	Pic1_L_61:
;Pic1.pbas,112 :: 		if testbit(portA,4) = 1 then
$00C1	$3000			MOVLW	0
$00C2	$1A05			BTFSC	PORTA, 4
$00C3	$3001			MOVLW	1
$00C4	$00F2			MOVWF	STACK_2
$00C5	$0872			MOVF	STACK_2, 0
$00C6	$3A01			XORLW	1
$00C7	$1D03			BTFSS	STATUS, Z
$00C8	$28DA			GOTO	Pic1_L_66
$00C9	$	Pic1_L_65:
;Pic1.pbas,113 :: 		if b4 = false then
$00C9	$0831			MOVF	_b4, 0
$00CA	$3A00			XORLW	0
$00CB	$1D03			BTFSS	STATUS, Z
$00CC	$28DA			GOTO	Pic1_L_69
$00CD	$	Pic1_L_68:
;Pic1.pbas,114 :: 		b4 = true
$00CD	$30FF			MOVLW	255
$00CE	$00B1			MOVWF	_b4
;Pic1.pbas,115 :: 		if portB.4 = 0 then
$00CF	$3000			MOVLW	0
$00D0	$1A06			BTFSC	PORTB, 4
$00D1	$3001			MOVLW	1
$00D2	$00F2			MOVWF	STACK_2
$00D3	$0872			MOVF	STACK_2, 0
$00D4	$3A00			XORLW	0
$00D5	$1D03			BTFSS	STATUS, Z
$00D6	$28D9			GOTO	Pic1_L_72
$00D7	$	Pic1_L_71:
;Pic1.pbas,116 :: 		portB.4 = 1
$00D7	$	Pic1_L_74:
$00D7	$1606			BSF	PORTB, 4
$00D8	$	Pic1_L_75:
$00D8	$28DA			GOTO	Pic1_L_73
;Pic1.pbas,117 :: 		else
$00D9	$	Pic1_L_72:
;Pic1.pbas,118 :: 		portB.4 = 0
$00D9	$1206			BCF	PORTB, 4
$00DA	$	Pic1_L_77:
;Pic1.pbas,119 :: 		end if
$00DA	$	Pic1_L_73:
$00DA	$	Pic1_L_69:
;Pic1.pbas,120 :: 		end if
$00DA	$	Pic1_L_70:
$00DA	$	Pic1_L_66:
;Pic1.pbas,121 :: 		end if
$00DA	$	Pic1_L_67:
;Pic1.pbas,122 :: 		if testbit(portA,4) = 0 then
$00DA	$3000			MOVLW	0
$00DB	$1A05			BTFSC	PORTA, 4
$00DC	$3001			MOVLW	1
$00DD	$00F2			MOVWF	STACK_2
$00DE	$0872			MOVF	STACK_2, 0
$00DF	$3A00			XORLW	0
$00E0	$1D03			BTFSS	STATUS, Z
$00E1	$28E7			GOTO	Pic1_L_79
$00E2	$	Pic1_L_78:
;Pic1.pbas,123 :: 		if b4 = true then
$00E2	$0831			MOVF	_b4, 0
$00E3	$3AFF			XORLW	255
$00E4	$1D03			BTFSS	STATUS, Z
$00E5	$28E7			GOTO	Pic1_L_82
$00E6	$	Pic1_L_81:
;Pic1.pbas,124 :: 		b4 = false
$00E6	$01B1			CLRF	_b4, 1
$00E7	$	Pic1_L_82:
;Pic1.pbas,125 :: 		end if
$00E7	$	Pic1_L_83:
$00E7	$	Pic1_L_79:
;Pic1.pbas,126 :: 		end if
$00E7	$	Pic1_L_80:
;Pic1.pbas,129 :: 		if testbit(portA,5) = 1 then
$00E7	$3000			MOVLW	0
$00E8	$1A85			BTFSC	PORTA, 5
$00E9	$3001			MOVLW	1
$00EA	$00F2			MOVWF	STACK_2
$00EB	$0872			MOVF	STACK_2, 0
$00EC	$3A01			XORLW	1
$00ED	$1D03			BTFSS	STATUS, Z
$00EE	$28F9			GOTO	Pic1_L_85
$00EF	$	Pic1_L_84:
;Pic1.pbas,130 :: 		if b5 = false then
$00EF	$0832			MOVF	_b5, 0
$00F0	$3A00			XORLW	0
$00F1	$1D03			BTFSS	STATUS, Z
$00F2	$28F9			GOTO	Pic1_L_88
$00F3	$	Pic1_L_87:
;Pic1.pbas,131 :: 		b5 = true
$00F3	$30FF			MOVLW	255
$00F4	$00B2			MOVWF	_b5
;Pic1.pbas,132 :: 		envia
$00F5	$22E3			CALL	_envia
;Pic1.pbas,133 :: 		i = i + 1
$00F6	$0AB3			INCF	_i, 1
$00F7	$1903			BTFSC	STATUS, Z
$00F8	$0AB4			INCF	_i+1, 1
$00F9	$	Pic1_L_88:
;Pic1.pbas,134 :: 		end if
$00F9	$	Pic1_L_89:
$00F9	$	Pic1_L_85:
;Pic1.pbas,135 :: 		end if
$00F9	$	Pic1_L_86:
;Pic1.pbas,136 :: 		if testbit(portA,5) = 0 then
$00F9	$3000			MOVLW	0
$00FA	$1A85			BTFSC	PORTA, 5
$00FB	$3001			MOVLW	1
$00FC	$00F2			MOVWF	STACK_2
$00FD	$0872			MOVF	STACK_2, 0
$00FE	$3A00			XORLW	0
$00FF	$1D03			BTFSS	STATUS, Z
$0100	$2902			GOTO	Pic1_L_91
$0101	$	Pic1_L_90:
;Pic1.pbas,137 :: 		b5 = false
$0101	$01B2			CLRF	_b5, 1
$0102	$	Pic1_L_91:
;Pic1.pbas,138 :: 		end if
$0102	$	Pic1_L_92:
;Pic1.pbas,140 :: 		if incN > 999 then
$0102	$3080			MOVLW	128
$0103	$3A03			XORLW	3
$0104	$00F0			MOVWF	STACK_0
$0105	$3080			MOVLW	128
$0106	$0623			XORWF	_incn+1, 0
$0107	$0270			SUBWF	STACK_0, 0
$0108	$1D03			BTFSS	STATUS, Z
$0109	$290C			GOTO	L_main_5
$010A	$0822			MOVF	_incn, 0
$010B	$3CE7			SUBLW	231
$010C	$	L_main_5:
$010C	$1803			BTFSC	STATUS, C
$010D	$2912			GOTO	Pic1_L_94
$010E	$	Pic1_L_93:
;Pic1.pbas,141 :: 		incN = 999
$010E	$30E7			MOVLW	231
$010F	$00A2			MOVWF	_incn
$0110	$3003			MOVLW	3
$0111	$00A3			MOVWF	_incn+1
$0112	$	Pic1_L_94:
;Pic1.pbas,142 :: 		end if
$0112	$	Pic1_L_95:
;Pic1.pbas,143 :: 		if incN < 0 then
$0112	$3080			MOVLW	128
$0113	$0623			XORWF	_incn+1, 0
$0114	$00F0			MOVWF	STACK_0
$0115	$3080			MOVLW	128
$0116	$0270			SUBWF	STACK_0, 0
$0117	$1D03			BTFSS	STATUS, Z
$0118	$291B			GOTO	L_main_6
$0119	$3000			MOVLW	0
$011A	$0222			SUBWF	_incn, 0
$011B	$	L_main_6:
$011B	$1803			BTFSC	STATUS, C
$011C	$291F			GOTO	Pic1_L_97
$011D	$	Pic1_L_96:
;Pic1.pbas,144 :: 		incN = 0
$011D	$01A2			CLRF	_incn
$011E	$01A3			CLRF	_incn+1
$011F	$	Pic1_L_97:
;Pic1.pbas,145 :: 		end if
$011F	$	Pic1_L_98:
;Pic1.pbas,147 :: 		if incP > 999 then
$011F	$3080			MOVLW	128
$0120	$3A03			XORLW	3
$0121	$00F0			MOVWF	STACK_0
$0122	$3080			MOVLW	128
$0123	$062C			XORWF	_incp+1, 0
$0124	$0270			SUBWF	STACK_0, 0
$0125	$1D03			BTFSS	STATUS, Z
$0126	$2929			GOTO	L_main_7
$0127	$082B			MOVF	_incp, 0
$0128	$3CE7			SUBLW	231
$0129	$	L_main_7:
$0129	$1803			BTFSC	STATUS, C
$012A	$292F			GOTO	Pic1_L_100
$012B	$	Pic1_L_99:
;Pic1.pbas,148 :: 		incP = 999
$012B	$30E7			MOVLW	231
$012C	$00AB			MOVWF	_incp
$012D	$3003			MOVLW	3
$012E	$00AC			MOVWF	_incp+1
$012F	$	Pic1_L_100:
;Pic1.pbas,149 :: 		end if
$012F	$	Pic1_L_101:
;Pic1.pbas,150 :: 		if incP < 0 then
$012F	$3080			MOVLW	128
$0130	$062C			XORWF	_incp+1, 0
$0131	$00F0			MOVWF	STACK_0
$0132	$3080			MOVLW	128
$0133	$0270			SUBWF	STACK_0, 0
$0134	$1D03			BTFSS	STATUS, Z
$0135	$2938			GOTO	L_main_8
$0136	$3000			MOVLW	0
$0137	$022B			SUBWF	_incp, 0
$0138	$	L_main_8:
$0138	$1803			BTFSC	STATUS, C
$0139	$293C			GOTO	Pic1_L_103
$013A	$	Pic1_L_102:
;Pic1.pbas,151 :: 		incP = 0
$013A	$01AB			CLRF	_incp
$013B	$01AC			CLRF	_incp+1
$013C	$	Pic1_L_103:
;Pic1.pbas,152 :: 		end if
$013C	$	Pic1_L_104:
;Pic1.pbas,155 :: 		if priorit = 1 then
$013C	$3000			MOVLW	0
$013D	$0621			XORWF	_priorit+1, 0
$013E	$1D03			BTFSS	STATUS, Z
$013F	$2942			GOTO	L_main_9
$0140	$3001			MOVLW	1
$0141	$0620			XORWF	_priorit, 0
$0142	$	L_main_9:
$0142	$1D03			BTFSS	STATUS, Z
$0143	$2949			GOTO	Pic1_L_106
$0144	$	Pic1_L_105:
;Pic1.pbas,156 :: 		valor = incN
$0144	$0822			MOVF	_incn, 0
$0145	$00B5			MOVWF	_valor
$0146	$0823			MOVF	_incn+1, 0
$0147	$00B6			MOVWF	_valor+1
$0148	$294D			GOTO	Pic1_L_107
;Pic1.pbas,157 :: 		else
$0149	$	Pic1_L_106:
;Pic1.pbas,158 :: 		valor = incP
$0149	$082B			MOVF	_incp, 0
$014A	$00B5			MOVWF	_valor
$014B	$082C			MOVF	_incp+1, 0
$014C	$00B6			MOVWF	_valor+1
;Pic1.pbas,159 :: 		end if
$014D	$	Pic1_L_107:
;Pic1.pbas,161 :: 		mil = valor div 1000
$014D	$30E8			MOVLW	232
$014E	$00F4			MOVWF	STACK_4
$014F	$3003			MOVLW	3
$0150	$00F5			MOVWF	STACK_4+1
$0151	$0835			MOVF	_valor, 0
$0152	$00F0			MOVWF	STACK_0
$0153	$0836			MOVF	_valor+1, 0
$0154	$00F1			MOVWF	STACK_0+1
$0155	$2322			CALL	_div_16x16_s
$0156	$0870			MOVF	STACK_0, 0
$0157	$00C5			MOVWF	FLOC_main+6
$0158	$0871			MOVF	STACK_0+1, 0
$0159	$00C6			MOVWF	FLOC_main+7
$015A	$0845			MOVF	FLOC_main+6, 0
$015B	$00B7			MOVWF	_mil
$015C	$0846			MOVF	FLOC_main+7, 0
$015D	$00B8			MOVWF	_mil+1
;Pic1.pbas,162 :: 		cen = valor div 100 - (mil * 10)
$015E	$3064			MOVLW	100
$015F	$00F4			MOVWF	STACK_4
$0160	$01F5			CLRF	STACK_4+1
$0161	$0835			MOVF	_valor, 0
$0162	$00F0			MOVWF	STACK_0
$0163	$0836			MOVF	_valor+1, 0
$0164	$00F1			MOVWF	STACK_0+1
$0165	$2322			CALL	_div_16x16_s
$0166	$0870			MOVF	STACK_0, 0
$0167	$00BF			MOVWF	FLOC_main+0
$0168	$0871			MOVF	STACK_0+1, 0
$0169	$00C0			MOVWF	FLOC_main+1
$016A	$0845			MOVF	FLOC_main+6, 0
$016B	$00F0			MOVWF	STACK_0
$016C	$0846			MOVF	FLOC_main+7, 0
$016D	$00F1			MOVWF	STACK_0+1
$016E	$300A			MOVLW	10
$016F	$00F4			MOVWF	STACK_4
$0170	$01F5			CLRF	STACK_4+1
$0171	$237C			CALL	_mul_16x16_s
$0172	$0870			MOVF	STACK_0, 0
$0173	$023F			SUBWF	FLOC_main+0, 0
$0174	$00C3			MOVWF	FLOC_main+4
$0175	$0871			MOVF	STACK_0+1, 0
$0176	$1C03			BTFSS	STATUS, C
$0177	$3F01			ADDLW	1
$0178	$0240			SUBWF	FLOC_main+1, 0
$0179	$00C4			MOVWF	FLOC_main+5
$017A	$0843			MOVF	FLOC_main+4, 0
$017B	$00B9			MOVWF	_cen
$017C	$0844			MOVF	FLOC_main+5, 0
$017D	$00BA			MOVWF	_cen+1
;Pic1.pbas,163 :: 		dez = valor div 10 - (cen * 10) - (mil * 100)
$017E	$300A			MOVLW	10
$017F	$00F4			MOVWF	STACK_4
$0180	$01F5			CLRF	STACK_4+1
$0181	$0835			MOVF	_valor, 0
$0182	$00F0			MOVWF	STACK_0
$0183	$0836			MOVF	_valor+1, 0
$0184	$00F1			MOVWF	STACK_0+1
$0185	$2322			CALL	_div_16x16_s
$0186	$0870			MOVF	STACK_0, 0
$0187	$00BF			MOVWF	FLOC_main+0
$0188	$0871			MOVF	STACK_0+1, 0
$0189	$00C0			MOVWF	FLOC_main+1
$018A	$0843			MOVF	FLOC_main+4, 0
$018B	$00F0			MOVWF	STACK_0
$018C	$0844			MOVF	FLOC_main+5, 0
$018D	$00F1			MOVWF	STACK_0+1
$018E	$300A			MOVLW	10
$018F	$00F4			MOVWF	STACK_4
$0190	$01F5			CLRF	STACK_4+1
$0191	$237C			CALL	_mul_16x16_s
$0192	$0870			MOVF	STACK_0, 0
$0193	$02BF			SUBWF	FLOC_main+0, 1
$0194	$1C03			BTFSS	STATUS, C
$0195	$03C0			DECF	FLOC_main+1, 1
$0196	$0871			MOVF	STACK_0+1, 0
$0197	$02C0			SUBWF	FLOC_main+1, 1
$0198	$0845			MOVF	FLOC_main+6, 0
$0199	$00F0			MOVWF	STACK_0
$019A	$0846			MOVF	FLOC_main+7, 0
$019B	$00F1			MOVWF	STACK_0+1
$019C	$3064			MOVLW	100
$019D	$00F4			MOVWF	STACK_4
$019E	$01F5			CLRF	STACK_4+1
$019F	$237C			CALL	_mul_16x16_s
$01A0	$0870			MOVF	STACK_0, 0
$01A1	$023F			SUBWF	FLOC_main+0, 0
$01A2	$00C1			MOVWF	FLOC_main+2
$01A3	$0871			MOVF	STACK_0+1, 0
$01A4	$1C03			BTFSS	STATUS, C
$01A5	$3F01			ADDLW	1
$01A6	$0240			SUBWF	FLOC_main+1, 0
$01A7	$00C2			MOVWF	FLOC_main+3
$01A8	$0841			MOVF	FLOC_main+2, 0
$01A9	$00BB			MOVWF	_dez
$01AA	$0842			MOVF	FLOC_main+3, 0
$01AB	$00BC			MOVWF	_dez+1
;Pic1.pbas,164 :: 		uni = valor - (dez * 10) - (cen * 100) - (mil * 1000)
$01AC	$0841			MOVF	FLOC_main+2, 0
$01AD	$00F0			MOVWF	STACK_0
$01AE	$0842			MOVF	FLOC_main+3, 0
$01AF	$00F1			MOVWF	STACK_0+1
$01B0	$300A			MOVLW	10
$01B1	$00F4			MOVWF	STACK_4
$01B2	$01F5			CLRF	STACK_4+1
$01B3	$237C			CALL	_mul_16x16_s
$01B4	$0870			MOVF	STACK_0, 0
$01B5	$0235			SUBWF	_valor, 0
$01B6	$00BF			MOVWF	FLOC_main+0
$01B7	$0871			MOVF	STACK_0+1, 0
$01B8	$1C03			BTFSS	STATUS, C
$01B9	$3F01			ADDLW	1
$01BA	$0236			SUBWF	_valor+1, 0
$01BB	$00C0			MOVWF	FLOC_main+1
$01BC	$0843			MOVF	FLOC_main+4, 0
$01BD	$00F0			MOVWF	STACK_0
$01BE	$0844			MOVF	FLOC_main+5, 0
$01BF	$00F1			MOVWF	STACK_0+1
$01C0	$3064			MOVLW	100
$01C1	$00F4			MOVWF	STACK_4
$01C2	$01F5			CLRF	STACK_4+1
$01C3	$237C			CALL	_mul_16x16_s
$01C4	$0870			MOVF	STACK_0, 0
$01C5	$02BF			SUBWF	FLOC_main+0, 1
$01C6	$1C03			BTFSS	STATUS, C
$01C7	$03C0			DECF	FLOC_main+1, 1
$01C8	$0871			MOVF	STACK_0+1, 0
$01C9	$02C0			SUBWF	FLOC_main+1, 1
$01CA	$0845			MOVF	FLOC_main+6, 0
$01CB	$00F0			MOVWF	STACK_0
$01CC	$0846			MOVF	FLOC_main+7, 0
$01CD	$00F1			MOVWF	STACK_0+1
$01CE	$30E8			MOVLW	232
$01CF	$00F4			MOVWF	STACK_4
$01D0	$3003			MOVLW	3
$01D1	$00F5			MOVWF	STACK_4+1
$01D2	$237C			CALL	_mul_16x16_s
$01D3	$0870			MOVF	STACK_0, 0
$01D4	$023F			SUBWF	FLOC_main+0, 0
$01D5	$00F0			MOVWF	STACK_0
$01D6	$0871			MOVF	STACK_0+1, 0
$01D7	$1C03			BTFSS	STATUS, C
$01D8	$3F01			ADDLW	1
$01D9	$0240			SUBWF	FLOC_main+1, 0
$01DA	$00F1			MOVWF	STACK_0+1
$01DB	$0870			MOVF	STACK_0, 0
$01DC	$00BD			MOVWF	_uni
$01DD	$0871			MOVF	STACK_0+1, 0
$01DE	$00BE			MOVWF	_uni+1
;Pic1.pbas,166 :: 		PORTC = uni + 16
$01DF	$3010			MOVLW	16
$01E0	$07F0			ADDWF	STACK_0, 1
$01E1	$1803			BTFSC	STATUS, C
$01E2	$0AF1			INCF	STACK_0+1, 1
$01E3	$0870			MOVF	STACK_0, 0
$01E4	$0087			MOVWF	PORTC
;Pic1.pbas,167 :: 		delay_ms(3)
$01E5	$3004			MOVLW	4
$01E6	$00FB			MOVWF	STACK_11
$01E7	$30FF			MOVLW	255
$01E8	$00FA			MOVWF	STACK_10
$01E9	$0BFB			DECFSZ	STACK_11, F
$01EA	$29EC			GOTO	$+2
$01EB	$29EF			GOTO	$+4
$01EC	$0BFA			DECFSZ	STACK_10, F
$01ED	$29EC			GOTO	$-1
$01EE	$29E9			GOTO	$-5
$01EF	$30E2			MOVLW	226
$01F0	$00FA			MOVWF	STACK_10
$01F1	$0BFA			DECFSZ	STACK_10, F
$01F2	$29F1			GOTO	$-1
;Pic1.pbas,169 :: 		PORTC = dez + 32
$01F3	$3020			MOVLW	32
$01F4	$0741			ADDWF	FLOC_main+2, 0
$01F5	$00F0			MOVWF	STACK_0
$01F6	$0842			MOVF	FLOC_main+3, 0
$01F7	$1803			BTFSC	STATUS, C
$01F8	$3F01			ADDLW	1
$01F9	$00F1			MOVWF	STACK_0+1
$01FA	$3000			MOVLW	0
$01FB	$07F1			ADDWF	STACK_0+1, 1
$01FC	$0870			MOVF	STACK_0, 0
$01FD	$0087			MOVWF	PORTC
;Pic1.pbas,170 :: 		delay_ms(3)
$01FE	$3004			MOVLW	4
$01FF	$00FB			MOVWF	STACK_11
$0200	$30FF			MOVLW	255
$0201	$00FA			MOVWF	STACK_10
$0202	$0BFB			DECFSZ	STACK_11, F
$0203	$2A05			GOTO	$+2
$0204	$2A08			GOTO	$+4
$0205	$0BFA			DECFSZ	STACK_10, F
$0206	$2A05			GOTO	$-1
$0207	$2A02			GOTO	$-5
$0208	$30E2			MOVLW	226
$0209	$00FA			MOVWF	STACK_10
$020A	$0BFA			DECFSZ	STACK_10, F
$020B	$2A0A			GOTO	$-1
;Pic1.pbas,172 :: 		PORTC = cen + 64
$020C	$3040			MOVLW	64
$020D	$0743			ADDWF	FLOC_main+4, 0
$020E	$00F0			MOVWF	STACK_0
$020F	$0844			MOVF	FLOC_main+5, 0
$0210	$1803			BTFSC	STATUS, C
$0211	$3F01			ADDLW	1
$0212	$00F1			MOVWF	STACK_0+1
$0213	$3000			MOVLW	0
$0214	$07F1			ADDWF	STACK_0+1, 1
$0215	$0870			MOVF	STACK_0, 0
$0216	$0087			MOVWF	PORTC
;Pic1.pbas,173 :: 		delay_ms(3)
$0217	$3004			MOVLW	4
$0218	$00FB			MOVWF	STACK_11
$0219	$30FF			MOVLW	255
$021A	$00FA			MOVWF	STACK_10
$021B	$0BFB			DECFSZ	STACK_11, F
$021C	$2A1E			GOTO	$+2
$021D	$2A21			GOTO	$+4
$021E	$0BFA			DECFSZ	STACK_10, F
$021F	$2A1E			GOTO	$-1
$0220	$2A1B			GOTO	$-5
$0221	$30E2			MOVLW	226
$0222	$00FA			MOVWF	STACK_10
$0223	$0BFA			DECFSZ	STACK_10, F
$0224	$2A23			GOTO	$-1
;Pic1.pbas,175 :: 		PORTC = mil + 128
$0225	$3080			MOVLW	128
$0226	$0745			ADDWF	FLOC_main+6, 0
$0227	$00F0			MOVWF	STACK_0
$0228	$0846			MOVF	FLOC_main+7, 0
$0229	$1803			BTFSC	STATUS, C
$022A	$3F01			ADDLW	1
$022B	$00F1			MOVWF	STACK_0+1
$022C	$3000			MOVLW	0
$022D	$07F1			ADDWF	STACK_0+1, 1
$022E	$0870			MOVF	STACK_0, 0
$022F	$0087			MOVWF	PORTC
;Pic1.pbas,176 :: 		delay_ms(3)
$0230	$3004			MOVLW	4
$0231	$00FB			MOVWF	STACK_11
$0232	$30FF			MOVLW	255
$0233	$00FA			MOVWF	STACK_10
$0234	$0BFB			DECFSZ	STACK_11, F
$0235	$2A37			GOTO	$+2
$0236	$2A3A			GOTO	$+4
$0237	$0BFA			DECFSZ	STACK_10, F
$0238	$2A37			GOTO	$-1
$0239	$2A34			GOTO	$-5
$023A	$30E2			MOVLW	226
$023B	$00FA			MOVWF	STACK_10
$023C	$0BFA			DECFSZ	STACK_10, F
$023D	$2A3C			GOTO	$-1
;Pic1.pbas,178 :: 		goto executa
$023E	$2824			GOTO	_main_executa
$023F	$2A3F			GOTO	$
