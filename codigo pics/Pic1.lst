;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 15/05/2020 16:24:30
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0463	$	_div_16x16_s_l:
$0463	$1303			BCF	STATUS, RP1
$0464	$1283			BCF	STATUS, RP0
;math.ppas,291 :: 		
;math.ppas,293 :: 		
$0465	$0D71			RLF	STACK_1, W
;math.ppas,294 :: 		
$0466	$0DF8			RLF	STACK_8, F
;math.ppas,295 :: 		
$0467	$0DF9			RLF	STACK_9, F
;math.ppas,296 :: 		
$0468	$0874			MOVF	STACK_4, W
;math.ppas,297 :: 		
$0469	$02F8			SUBWF	STACK_8, F
;math.ppas,298 :: 		
$046A	$0875			MOVF	STACK_5, W
;math.ppas,299 :: 		
$046B	$1C03			BTFSS	STATUS, C
;math.ppas,300 :: 		
$046C	$0F75			INCFSZ	STACK_5, W
;math.ppas,301 :: 		
$046D	$02F9			SUBWF	STACK_9, F
;math.ppas,302 :: 		
$046E	$0DF0			RLF	STACK_0, F
;math.ppas,304 :: 		
$046F	$0DF1			RLF	STACK_1, F
;math.ppas,305 :: 		
$0470	$300F			MOVLW	15
;math.ppas,307 :: 		
$0471	$00FC			MOVWF	STACK_12
;math.ppas,308 :: 		
$0472	$0D71			RLF	STACK_1, W
;math.ppas,309 :: 		
$0473	$0DF8			RLF	STACK_8, F
;math.ppas,310 :: 		
$0474	$0DF9			RLF	STACK_9, F
;math.ppas,312 :: 		
$0475	$0874			MOVF	STACK_4, W
;math.ppas,313 :: 		
$0476	$1C70			BTFSS	STACK_0, 0
;math.ppas,314 :: 		
$0477	$2C7E			GOTO	$+7
;math.ppas,315 :: 		
$0478	$02F8			SUBWF	STACK_8, F
;math.ppas,316 :: 		
$0479	$0875			MOVF	STACK_5, W
;math.ppas,317 :: 		
$047A	$1C03			BTFSS	STATUS, C
;math.ppas,318 :: 		
$047B	$0F75			INCFSZ	STACK_5, W
;math.ppas,319 :: 		
$047C	$02F9			SUBWF	STACK_9, F
;math.ppas,321 :: 		
$047D	$2C83			GOTO	$+6
;math.ppas,322 :: 		
$047E	$07F8			ADDWF	STACK_8, F
;math.ppas,323 :: 		
$047F	$0875			MOVF	STACK_5, W
;math.ppas,324 :: 		
$0480	$1803			BTFSC	STATUS, C
;math.ppas,325 :: 		
$0481	$0F75			INCFSZ	STACK_5, W
;math.ppas,327 :: 		
$0482	$07F9			ADDWF	STACK_9, F
;math.ppas,328 :: 		
$0483	$0DF0			RLF	STACK_0, F
;math.ppas,330 :: 		
$0484	$0DF1			RLF	STACK_1, F
;math.ppas,331 :: 		
$0485	$0BFC			DECFSZ	STACK_12, F
;math.ppas,333 :: 		
$0486	$2C72			GOTO	$-20
;math.ppas,334 :: 		
$0487	$1870			BTFSC	STACK_0, 0
;math.ppas,335 :: 		
$0488	$2C8F			GOTO	$+7
;math.ppas,336 :: 		
$0489	$0874			MOVF	STACK_4, W
;math.ppas,337 :: 		
$048A	$07F8			ADDWF	STACK_8, F
;math.ppas,338 :: 		
$048B	$0875			MOVF	STACK_5, W
;math.ppas,339 :: 		
$048C	$1803			BTFSC	STATUS, C
;math.ppas,340 :: 		
$048D	$0F75			INCFSZ	STACK_5, W
;math.ppas,341 :: 		
$048E	$07F9			ADDWF	STACK_9, F
;math.ppas,342 :: 		
$048F	$	math_L_6:
;math.ppas,343 :: 		
$048F	$0008			RETURN
$038F	$	_div_16x16_s:
$038F	$1303			BCF	STATUS, RP1
$0390	$1283			BCF	STATUS, RP0
;math.ppas,346 :: 		
;math.ppas,348 :: 		
$0391	$01FD			CLRF	STACK_13
;math.ppas,349 :: 		
$0392	$01F9			CLRF	STACK_9
;math.ppas,350 :: 		
$0393	$01F8			CLRF	STACK_8
;math.ppas,351 :: 		
$0394	$0871			MOVF	STACK_1, W
;math.ppas,352 :: 		
$0395	$0470			IORWF	STACK_0, W
;math.ppas,353 :: 		
$0396	$1903			BTFSC	STATUS, Z
;math.ppas,355 :: 		
$0397	$3400			RETLW	0
;math.ppas,356 :: 		
$0398	$0871			MOVF	STACK_1, W
;math.ppas,357 :: 		
$0399	$0675			XORWF	STACK_5, W
;math.ppas,358 :: 		
$039A	$00FA			MOVWF	STACK_10
;math.ppas,359 :: 		
$039B	$1BFA			BTFSC	STACK_10, 7
;math.ppas,361 :: 		
$039C	$09FD			COMF	STACK_13, F
;math.ppas,363 :: 		
$039D	$01FB			CLRF	STACK_11
;math.ppas,364 :: 		
$039E	$1FF5			BTFSS	STACK_5, 7
;math.ppas,366 :: 		
$039F	$2BA5			GOTO	$+6
;math.ppas,367 :: 		
$03A0	$09F4			COMF	STACK_4, F
;math.ppas,368 :: 		
$03A1	$09F5			COMF	STACK_5, F
;math.ppas,369 :: 		
$03A2	$0AF4			INCF	STACK_4, F
;math.ppas,370 :: 		
$03A3	$1903			BTFSC	STATUS, Z
;math.ppas,372 :: 		
$03A4	$0AF5			INCF	STACK_5, F
;math.ppas,373 :: 		
$03A5	$1FF1			BTFSS	STACK_1, 7
;math.ppas,375 :: 		
$03A6	$2BAC			GOTO	$+6
;math.ppas,376 :: 		
$03A7	$09F0			COMF	STACK_0, F
;math.ppas,377 :: 		
$03A8	$09F1			COMF	STACK_1, F
;math.ppas,378 :: 		
$03A9	$0AF0			INCF	STACK_0, F
;math.ppas,379 :: 		
$03AA	$1903			BTFSC	STATUS, Z
;math.ppas,381 :: 		
$03AB	$0AF1			INCF	STACK_1, F
;math.ppas,382 :: 		
$03AC	$0871			MOVF	STACK_1, W
;math.ppas,383 :: 		
$03AD	$0475			IORWF	STACK_5, W
;math.ppas,384 :: 		
$03AE	$00FA			MOVWF	STACK_10
;math.ppas,385 :: 		
$03AF	$1BFA			BTFSC	STACK_10, 7
;math.ppas,386 :: 		
$03B0	$2BC1			GOTO	$+17
;math.ppas,388 :: 		
$03B1	$2463			CALL	_div_16x16_s_l
;math.ppas,390 :: 		
$03B2	$187B			BTFSC	STACK_11, 0
;math.ppas,392 :: 		
$03B3	$2BD4			GOTO	$+33
;math.ppas,393 :: 		
$03B4	$1FFD			BTFSS	STACK_13, 7
;math.ppas,395 :: 		
$03B5	$3400			RETLW	0
;math.ppas,396 :: 		
$03B6	$09F0			COMF	STACK_0, F
;math.ppas,397 :: 		
$03B7	$09F1			COMF	STACK_1, F
;math.ppas,398 :: 		
$03B8	$0AF0			INCF	STACK_0, F
;math.ppas,399 :: 		
$03B9	$1903			BTFSC	STATUS, Z
;math.ppas,401 :: 		
$03BA	$0AF1			INCF	STACK_1, F
;math.ppas,402 :: 		
$03BB	$09F8			COMF	STACK_8, F
;math.ppas,403 :: 		
$03BC	$09F9			COMF	STACK_9, F
;math.ppas,404 :: 		
$03BD	$0AF8			INCF	STACK_8, F
;math.ppas,405 :: 		
$03BE	$1903			BTFSC	STATUS, Z
;math.ppas,407 :: 		
$03BF	$0AF9			INCF	STACK_9, F
;math.ppas,409 :: 		
$03C0	$3400			RETLW	0
;math.ppas,410 :: 		
$03C1	$1FF5			BTFSS	STACK_5, 7
;math.ppas,411 :: 		
$03C2	$2BD0			GOTO	$+14
;math.ppas,412 :: 		
$03C3	$1BF1			BTFSC	STACK_1, 7
;math.ppas,413 :: 		
$03C4	$2BCC			GOTO	$+8
;math.ppas,414 :: 		
$03C5	$0871			MOVF	STACK_1, W
;math.ppas,415 :: 		
$03C6	$00F9			MOVWF	STACK_9
;math.ppas,416 :: 		
$03C7	$0870			MOVF	STACK_0, W
;math.ppas,417 :: 		
$03C8	$00F8			MOVWF	STACK_8
;math.ppas,418 :: 		
$03C9	$01F1			CLRF	STACK_1
;math.ppas,419 :: 		
$03CA	$01F0			CLRF	STACK_0
;math.ppas,420 :: 		
$03CB	$2BB4			GOTO	$-23
;math.ppas,421 :: 		
$03CC	$01F1			CLRF	STACK_1
;math.ppas,422 :: 		
$03CD	$01F0			CLRF	STACK_0
;math.ppas,423 :: 		
$03CE	$0AF0			INCF	STACK_0, F
;math.ppas,425 :: 		
$03CF	$3400			RETLW	0
;math.ppas,426 :: 		
$03D0	$09F1			COMF	STACK_1, F
;math.ppas,427 :: 		
$03D1	$09F0			COMF	STACK_0, F
;math.ppas,428 :: 		
$03D2	$0AFB			INCF	STACK_11, F
;math.ppas,430 :: 		
$03D3	$2BB1			GOTO	$-34
;math.ppas,431 :: 		
$03D4	$0AF8			INCF	STACK_8, F
;math.ppas,432 :: 		
$03D5	$1903			BTFSC	STATUS, Z
;math.ppas,433 :: 		
$03D6	$0AF9			INCF	STACK_9, F
;math.ppas,434 :: 		
$03D7	$0874			MOVF	STACK_4, W
;math.ppas,435 :: 		
$03D8	$0278			SUBWF	STACK_8, W
;math.ppas,436 :: 		
$03D9	$1D03			BTFSS	STATUS, Z
;math.ppas,437 :: 		
$03DA	$2BB4			GOTO	$-38
;math.ppas,438 :: 		
$03DB	$0875			MOVF	STACK_5, W
;math.ppas,439 :: 		
$03DC	$0279			SUBWF	STACK_9, W
;math.ppas,440 :: 		
$03DD	$1D03			BTFSS	STATUS, Z
;math.ppas,441 :: 		
$03DE	$2BB4			GOTO	$-42
;math.ppas,442 :: 		
$03DF	$01F9			CLRF	STACK_9
;math.ppas,443 :: 		
$03E0	$01F8			CLRF	STACK_8
;math.ppas,444 :: 		
$03E1	$0AF0			INCF	STACK_0, F
;math.ppas,445 :: 		
$03E2	$1903			BTFSC	STATUS, Z
;math.ppas,446 :: 		
$03E3	$0AF1			INCF	STACK_1, F
;math.ppas,447 :: 		
$03E4	$1FF1			BTFSS	STACK_1, 7
;math.ppas,448 :: 		
$03E5	$2BB4			GOTO	$-49
;math.ppas,449 :: 		
$03E6	$0000			NOP
;math.ppas,450 :: 		
$03E7	$34FF			RETLW	255
;math.ppas,451 :: 		
$03E8	$	math_L_7:
;math.ppas,452 :: 		
$03E8	$0008			RETURN
$04D9	$	_usart_write:
;USART_b75.ppas,40 :: 		
;USART_b75.ppas,42 :: 		
$04D9	$	USART_b75_L_14:
$04D9	$1303			BCF	STATUS, RP1
$04DA	$1683			BSF	STATUS, RP0
$04DB	$0818			MOVF	TXSTA, 0
$04DC	$00F1			MOVWF	STACK_1
$04DD	$3000			MOVLW	0
$04DE	$18F1			BTFSC	STACK_1, 1
$04DF	$3001			MOVLW	1
$04E0	$00F1			MOVWF	STACK_1
$04E1	$0871			MOVF	STACK_1, 0
$04E2	$3A00			XORLW	0
$04E3	$1D03			BTFSS	STATUS, Z
$04E4	$2CE7			GOTO	USART_b75_L_15
;USART_b75.ppas,43 :: 		
$04E5	$0000			NOP
$04E6	$2CD9			GOTO	USART_b75_L_14
$04E7	$	USART_b75_L_15:
;USART_b75.ppas,44 :: 		
$04E7	$1283			BCF	STATUS, RP0
$04E8	$0855			MOVF	FARG_USART_Write, 0
$04E9	$0099			MOVWF	TXREG
$04EA	$	USART_b75_L_12:
;USART_b75.ppas,45 :: 		
$04EA	$0008			RETURN
$0508	$	_res032:
$0508	$1303			BCF	STATUS, RP1
$0509	$1283			BCF	STATUS, RP0
;math_double.ppas,56 :: 		
;math_double.ppas,61 :: 		
$050A	$01F2			CLRF	STACK_2
;math_double.ppas,62 :: 		
$050B	$01F1			CLRF	STACK_1
;math_double.ppas,63 :: 		
$050C	$01F0			CLRF	STACK_0
;math_double.ppas,64 :: 		
$050D	$01F8			CLRF	STACK_8
;math_double.ppas,65 :: 		
$050E	$01F3			CLRF	STACK_3
;math_double.ppas,66 :: 		
$050F	$3000			MOVLW	0
;math_double.ppas,67 :: 		
$0510	$	math_double_L_3:
;math_double.ppas,68 :: 		
$0510	$0008			RETURN
$04FA	$	_setfun32:
$04FA	$1303			BCF	STATUS, RP1
$04FB	$1283			BCF	STATUS, RP0
;math_double.ppas,71 :: 		
;math_double.ppas,78 :: 		
$04FC	$157B			BSF	STACK_11, 2
;math_double.ppas,79 :: 		
$04FD	$1FFB			BTFSS	STACK_11, 7
;math_double.ppas,80 :: 		
$04FE	$2D06			GOTO	SETFUN32EEE
;math_double.ppas,81 :: 		
$04FF	$3001			MOVLW	0X01
;math_double.ppas,82 :: 		
$0500	$00F3			MOVWF	STACK_3
;math_double.ppas,83 :: 		
$0501	$01F2			CLRF	STACK_2
;math_double.ppas,84 :: 		
$0502	$01F1			CLRF	STACK_1
;math_double.ppas,85 :: 		
$0503	$01F0			CLRF	STACK_0
;math_double.ppas,86 :: 		
$0504	$0DFA			RLF	STACK_10, F
;math_double.ppas,87 :: 		
$0505	$0CF2			RRF	STACK_2, F
;math_double.ppas,88 :: 		
$0506	$	SETFUN32EEE:
;math_double.ppas,89 :: 		
$0506	$30FF			MOVLW	0XFF
;math_double.ppas,90 :: 		
$0507	$	math_double_L_4:
;math_double.ppas,91 :: 		
$0507	$0008			RETURN
$0511	$	_fixsign32:
$0511	$1303			BCF	STATUS, RP1
$0512	$1283			BCF	STATUS, RP0
;math_double.ppas,45 :: 		
;math_double.ppas,49 :: 		
$0513	$1FFA			BTFSS	STACK_10, 7
;math_double.ppas,50 :: 		
$0514	$13F2			BCF	STACK_2, 7
;math_double.ppas,51 :: 		
$0515	$3000			MOVLW	0
;math_double.ppas,52 :: 		
$0516	$	math_double_L_2:
;math_double.ppas,53 :: 		
$0516	$0008			RETURN
$0250	$	_inttostr:
;conv.ppas,100 :: 		
;conv.ppas,101 :: 		
$0250	$1303			BCF	STATUS, RP1
$0251	$1283			BCF	STATUS, RP0
$0252	$0851			MOVF	FARG_IntToStr+1, 0
$0253	$3A80			XORLW	128
$0254	$1D03			BTFSS	STATUS, Z
$0255	$2A58			GOTO	L_IntToStr_4
$0256	$3000			MOVLW	0
$0257	$0650			XORWF	FARG_IntToStr, 0
$0258	$	L_IntToStr_4:
$0258	$1D03			BTFSS	STATUS, Z
$0259	$2A70			GOTO	conv_L_57
$025A	$	conv_L_56:
;conv.ppas,103 :: 		
$025A	$0852			MOVF	FARG_IntToStr+2, 0
$025B	$0084			MOVWF	FSR
$025C	$302D			MOVLW	45
$025D	$0080			MOVWF	INDF
$025E	$0A84			INCF	FSR, 1
$025F	$3033			MOVLW	51
$0260	$0080			MOVWF	INDF
$0261	$0A84			INCF	FSR, 1
$0262	$3032			MOVLW	50
$0263	$0080			MOVWF	INDF
$0264	$0A84			INCF	FSR, 1
$0265	$3037			MOVLW	55
$0266	$0080			MOVWF	INDF
$0267	$0A84			INCF	FSR, 1
$0268	$3036			MOVLW	54
$0269	$0080			MOVWF	INDF
$026A	$0A84			INCF	FSR, 1
$026B	$3038			MOVLW	56
$026C	$0080			MOVWF	INDF
$026D	$0A84			INCF	FSR, 1
$026E	$0180			CLRF	INDF
;conv.ppas,104 :: 		
$026F	$2AF2			GOTO	conv_L_55
;conv.ppas,105 :: 		
$0270	$	conv_L_57:
$0270	$	conv_L_58:
;conv.ppas,106 :: 		
$0270	$01D4			CLRF	_inttostr_local_negative, 1
;conv.ppas,107 :: 		
$0271	$3080			MOVLW	128
$0272	$0651			XORWF	FARG_IntToStr+1, 0
$0273	$00F0			MOVWF	STACK_0
$0274	$3080			MOVLW	128
$0275	$0270			SUBWF	STACK_0, 0
$0276	$1D03			BTFSS	STATUS, Z
$0277	$2A7A			GOTO	L_IntToStr_5
$0278	$3000			MOVLW	0
$0279	$0250			SUBWF	FARG_IntToStr, 0
$027A	$	L_IntToStr_5:
$027A	$1803			BTFSC	STATUS, C
$027B	$2A86			GOTO	conv_L_61
$027C	$	conv_L_60:
;conv.ppas,109 :: 		
$027C	$30FF			MOVLW	255
$027D	$00D4			MOVWF	_inttostr_local_negative
;conv.ppas,110 :: 		
$027E	$0850			MOVF	FARG_IntToStr, 0
$027F	$3C00			SUBLW	0
$0280	$00D0			MOVWF	FARG_IntToStr
$0281	$0851			MOVF	FARG_IntToStr+1, 0
$0282	$1C03			BTFSS	STATUS, C
$0283	$3F01			ADDLW	1
$0284	$01D1			CLRF	FARG_IntToStr+1
$0285	$02D1			SUBWF	FARG_IntToStr+1, 1
;conv.ppas,111 :: 		
$0286	$	conv_L_61:
$0286	$	conv_L_62:
;conv.ppas,112 :: 		
$0286	$3001			MOVLW	1
$0287	$00D3			MOVWF	_inttostr_local_len
;conv.ppas,113 :: 		
$0288	$3080			MOVLW	128
$0289	$00F0			MOVWF	STACK_0
$028A	$3080			MOVLW	128
$028B	$0651			XORWF	FARG_IntToStr+1, 0
$028C	$0270			SUBWF	STACK_0, 0
$028D	$1D03			BTFSS	STATUS, Z
$028E	$2A91			GOTO	L_IntToStr_6
$028F	$0850			MOVF	FARG_IntToStr, 0
$0290	$3C09			SUBLW	9
$0291	$	L_IntToStr_6:
$0291	$1803			BTFSC	STATUS, C
$0292	$2A94			GOTO	conv_L_64
$0293	$	conv_L_63:
;conv.ppas,114 :: 		
$0293	$0AD3			INCF	_inttostr_local_len, 1
$0294	$	conv_L_64:
$0294	$	conv_L_65:
;conv.ppas,115 :: 		
$0294	$3080			MOVLW	128
$0295	$00F0			MOVWF	STACK_0
$0296	$3080			MOVLW	128
$0297	$0651			XORWF	FARG_IntToStr+1, 0
$0298	$0270			SUBWF	STACK_0, 0
$0299	$1D03			BTFSS	STATUS, Z
$029A	$2A9D			GOTO	L_IntToStr_7
$029B	$0850			MOVF	FARG_IntToStr, 0
$029C	$3C63			SUBLW	99
$029D	$	L_IntToStr_7:
$029D	$1803			BTFSC	STATUS, C
$029E	$2AA0			GOTO	conv_L_67
$029F	$	conv_L_66:
;conv.ppas,116 :: 		
$029F	$0AD3			INCF	_inttostr_local_len, 1
$02A0	$	conv_L_67:
$02A0	$	conv_L_68:
;conv.ppas,117 :: 		
$02A0	$3080			MOVLW	128
$02A1	$3A03			XORLW	3
$02A2	$00F0			MOVWF	STACK_0
$02A3	$3080			MOVLW	128
$02A4	$0651			XORWF	FARG_IntToStr+1, 0
$02A5	$0270			SUBWF	STACK_0, 0
$02A6	$1D03			BTFSS	STATUS, Z
$02A7	$2AAA			GOTO	L_IntToStr_8
$02A8	$0850			MOVF	FARG_IntToStr, 0
$02A9	$3CE7			SUBLW	231
$02AA	$	L_IntToStr_8:
$02AA	$1803			BTFSC	STATUS, C
$02AB	$2AAD			GOTO	conv_L_70
$02AC	$	conv_L_69:
;conv.ppas,118 :: 		
$02AC	$0AD3			INCF	_inttostr_local_len, 1
$02AD	$	conv_L_70:
$02AD	$	conv_L_71:
;conv.ppas,119 :: 		
$02AD	$3080			MOVLW	128
$02AE	$3A27			XORLW	39
$02AF	$00F0			MOVWF	STACK_0
$02B0	$3080			MOVLW	128
$02B1	$0651			XORWF	FARG_IntToStr+1, 0
$02B2	$0270			SUBWF	STACK_0, 0
$02B3	$1D03			BTFSS	STATUS, Z
$02B4	$2AB7			GOTO	L_IntToStr_9
$02B5	$0850			MOVF	FARG_IntToStr, 0
$02B6	$3C0F			SUBLW	15
$02B7	$	L_IntToStr_9:
$02B7	$1803			BTFSC	STATUS, C
$02B8	$2ABA			GOTO	conv_L_73
$02B9	$	conv_L_72:
;conv.ppas,120 :: 		
$02B9	$0AD3			INCF	_inttostr_local_len, 1
$02BA	$	conv_L_73:
$02BA	$	conv_L_74:
;conv.ppas,121 :: 		
$02BA	$0852			MOVF	FARG_IntToStr+2, 0
$02BB	$0084			MOVWF	FSR
$02BC	$3020			MOVLW	32
$02BD	$0080			MOVWF	INDF
$02BE	$0A84			INCF	FSR, 1
$02BF	$0080			MOVWF	INDF
$02C0	$0A84			INCF	FSR, 1
$02C1	$0080			MOVWF	INDF
$02C2	$0A84			INCF	FSR, 1
$02C3	$0080			MOVWF	INDF
$02C4	$0A84			INCF	FSR, 1
$02C5	$0080			MOVWF	INDF
$02C6	$0A84			INCF	FSR, 1
$02C7	$0080			MOVWF	INDF
$02C8	$0A84			INCF	FSR, 1
$02C9	$0180			CLRF	INDF
;conv.ppas,122 :: 		
$02CA	$0384			DECF	FSR, 1
;conv.ppas,123 :: 		
$02CB	$	conv_L_77:
$02CB	$0853			MOVF	_inttostr_local_len, 0
$02CC	$3C00			SUBLW	0
$02CD	$1803			BTFSC	STATUS, C
$02CE	$2AED			GOTO	conv_L_78
;conv.ppas,125 :: 		
$02CF	$300A			MOVLW	10
$02D0	$00F4			MOVWF	STACK_4
$02D1	$01F5			CLRF	STACK_4+1
$02D2	$0850			MOVF	FARG_IntToStr, 0
$02D3	$00F0			MOVWF	STACK_0
$02D4	$0851			MOVF	FARG_IntToStr+1, 0
$02D5	$00F1			MOVWF	STACK_0+1
$02D6	$238F			CALL	_div_16x16_s
$02D7	$0878			MOVF	STACK_8, 0
$02D8	$00F0			MOVWF	STACK_0
$02D9	$0879			MOVF	STACK_9, 0
$02DA	$00F1			MOVWF	STACK_1
$02DB	$3030			MOVLW	48
$02DC	$0770			ADDWF	STACK_0, 0
$02DD	$0080			MOVWF	INDF
;conv.ppas,126 :: 		
;conv.ppas,127 :: 		
$02DE	$0384			DECF	FSR, 1
;conv.ppas,128 :: 		
$02DF	$300A			MOVLW	10
$02E0	$00F4			MOVWF	STACK_4
$02E1	$01F5			CLRF	STACK_4+1
$02E2	$0850			MOVF	FARG_IntToStr, 0
$02E3	$00F0			MOVWF	STACK_0
$02E4	$0851			MOVF	FARG_IntToStr+1, 0
$02E5	$00F1			MOVWF	STACK_0+1
$02E6	$238F			CALL	_div_16x16_s
$02E7	$0870			MOVF	STACK_0, 0
$02E8	$00D0			MOVWF	FARG_IntToStr
$02E9	$0871			MOVF	STACK_0+1, 0
$02EA	$00D1			MOVWF	FARG_IntToStr+1
;conv.ppas,129 :: 		
$02EB	$03D3			DECF	_inttostr_local_len, 1
;conv.ppas,130 :: 		
$02EC	$2ACB			GOTO	conv_L_77
$02ED	$	conv_L_78:
;conv.ppas,131 :: 		
$02ED	$0854			MOVF	_inttostr_local_negative, 0
$02EE	$1903			BTFSC	STATUS, Z
$02EF	$2AF2			GOTO	conv_L_82
$02F0	$	conv_L_81:
;conv.ppas,133 :: 		
$02F0	$302D			MOVLW	45
$02F1	$0080			MOVWF	INDF
;conv.ppas,134 :: 		
$02F2	$	conv_L_82:
$02F2	$	conv_L_83:
$02F2	$	conv_L_55:
;conv.ppas,135 :: 		
$02F2	$0008			RETURN
$04AE	$	_usart_write_text:
;USART_b75.ppas,121 :: 		
;USART_b75.ppas,122 :: 		
$04AE	$1303			BCF	STATUS, RP1
$04AF	$1283			BCF	STATUS, RP0
$04B0	$01D1			CLRF	_usart_write_text_local_i, 1
;USART_b75.ppas,123 :: 		
$04B1	$0850			MOVF	FARG_Usart_Write_Text, 0
$04B2	$0084			MOVWF	FSR
$04B3	$0800			MOVF	INDF, 0
$04B4	$00D2			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,124 :: 		
$04B5	$	USART_b75_L_47:
$04B5	$0852			MOVF	_usart_write_text_local_data, 0
$04B6	$3A00			XORLW	0
$04B7	$1903			BTFSC	STATUS, Z
$04B8	$2CC3			GOTO	USART_b75_L_48
;USART_b75.ppas,126 :: 		
$04B9	$0852			MOVF	_usart_write_text_local_data, 0
$04BA	$00D5			MOVWF	FARG_USART_Write
$04BB	$24D9			CALL	_usart_write
;USART_b75.ppas,127 :: 		
$04BC	$0AD1			INCF	_usart_write_text_local_i, 1
;USART_b75.ppas,128 :: 		
$04BD	$0851			MOVF	_usart_write_text_local_i, 0
$04BE	$0750			ADDWF	FARG_Usart_Write_Text, 0
$04BF	$0084			MOVWF	FSR
$04C0	$0800			MOVF	INDF, 0
$04C1	$00D2			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,129 :: 		
$04C2	$2CB5			GOTO	USART_b75_L_47
$04C3	$	USART_b75_L_48:
$04C3	$	USART_b75_L_45:
;USART_b75.ppas,130 :: 		
$04C3	$0008			RETURN
$0432	$	_nrm3232:
$0432	$1303			BCF	STATUS, RP1
$0433	$1283			BCF	STATUS, RP0
;math_double.ppas,100 :: 		
;math_double.ppas,108 :: 		
$0434	$01A0			CLRF	MATH_DOUBLE___MATH_TEMPBD
;math_double.ppas,109 :: 		
$0435	$0872			MOVF	STACK_2, W
;math_double.ppas,110 :: 		
$0436	$1D03			BTFSS	STATUS, Z
;math_double.ppas,111 :: 		
$0437	$2C49			GOTO	NORM3232
;math_double.ppas,112 :: 		
$0438	$0871			MOVF	STACK_1, W
;math_double.ppas,113 :: 		
$0439	$00F2			MOVWF	STACK_2
;math_double.ppas,114 :: 		
$043A	$0870			MOVF	STACK_0, W
;math_double.ppas,115 :: 		
$043B	$00F1			MOVWF	STACK_1
;math_double.ppas,116 :: 		
$043C	$01F0			CLRF	STACK_0
;math_double.ppas,118 :: 		
$043D	$15A0			BSF	MATH_DOUBLE___MATH_TEMPBD, 3
;math_double.ppas,119 :: 		
$043E	$0872			MOVF	STACK_2, W
;math_double.ppas,120 :: 		
$043F	$1D03			BTFSS	STATUS, Z
;math_double.ppas,121 :: 		
$0440	$2C49			GOTO	NORM3232
;math_double.ppas,122 :: 		
$0441	$0871			MOVF	STACK_1, W
;math_double.ppas,123 :: 		
$0442	$00F2			MOVWF	STACK_2
;math_double.ppas,124 :: 		
$0443	$01F1			CLRF	STACK_1
;math_double.ppas,125 :: 		
$0444	$11A0			BCF	MATH_DOUBLE___MATH_TEMPBD, 3
;math_double.ppas,127 :: 		
$0445	$1620			BSF	MATH_DOUBLE___MATH_TEMPBD, 4
;math_double.ppas,128 :: 		
$0446	$0872			MOVF	STACK_2, W
;math_double.ppas,129 :: 		
$0447	$1903			BTFSC	STATUS, Z
;math_double.ppas,130 :: 		
$0448	$2C57			GOTO	JPNRES032
;math_double.ppas,131 :: 		
$0449	$	NORM3232:
;math_double.ppas,132 :: 		
$0449	$0820			MOVF	MATH_DOUBLE___MATH_TEMPBD, W
;math_double.ppas,133 :: 		
$044A	$02F3			SUBWF	STACK_3, F
;math_double.ppas,134 :: 		
$044B	$1D03			BTFSS	STATUS, Z
;math_double.ppas,135 :: 		
$044C	$1C03			BTFSS	STATUS, C
;math_double.ppas,136 :: 		
$044D	$2C5B			GOTO	JPNSETFUN32
;math_double.ppas,137 :: 		
$044E	$1003			BCF	STATUS, C
;math_double.ppas,138 :: 		
$044F	$	NORM3232A:
;math_double.ppas,139 :: 		
$044F	$1BF2			BTFSC	STACK_2, 7
;math_double.ppas,140 :: 		
$0450	$2C5F			GOTO	JMPNFIXSIGN32
;math_double.ppas,141 :: 		
$0451	$0DF0			RLF	STACK_0, F
;math_double.ppas,142 :: 		
$0452	$0DF1			RLF	STACK_1, F
;math_double.ppas,143 :: 		
$0453	$0DF2			RLF	STACK_2, F
;math_double.ppas,144 :: 		
$0454	$0BF3			DECFSZ	STACK_3, F
;math_double.ppas,145 :: 		
$0455	$2C4F			GOTO	NORM3232A
;math_double.ppas,146 :: 		
$0456	$2C5B			GOTO	JPNSETFUN32
;math_double.ppas,147 :: 		
$0457	$	JPNRES032:
;math_double.ppas,148 :: 		
$0457	$3001			MOVLW	0X01
;math_double.ppas,149 :: 		
$0458	$00FC			MOVWF	STACK_12
;math_double.ppas,151 :: 		
$0459	$2508			CALL	_res032
;math_double.ppas,153 :: 		
$045A	$2C62			GOTO	NORM32EEE
;math_double.ppas,154 :: 		
$045B	$	JPNSETFUN32:
;math_double.ppas,155 :: 		
$045B	$3002			MOVLW	0X02
;math_double.ppas,156 :: 		
$045C	$00FC			MOVWF	STACK_12
;math_double.ppas,158 :: 		
$045D	$24FA			CALL	_setfun32
;math_double.ppas,160 :: 		
$045E	$2C62			GOTO	NORM32EEE
;math_double.ppas,161 :: 		
$045F	$	JMPNFIXSIGN32:
;math_double.ppas,162 :: 		
$045F	$3004			MOVLW	0X04
;math_double.ppas,163 :: 		
$0460	$00FC			MOVWF	STACK_12
;math_double.ppas,165 :: 		
$0461	$2511			CALL	_fixsign32
;math_double.ppas,167 :: 		
$0462	$	NORM32EEE:
;math_double.ppas,168 :: 		
$0462	$	math_double_L_5:
;math_double.ppas,169 :: 		
$0462	$0008			RETURN
$04EB	$	_setiov3224:
$04EB	$1303			BCF	STATUS, RP1
$04EC	$1283			BCF	STATUS, RP0
;math_double.ppas,888 :: 		
;math_double.ppas,894 :: 		
$04ED	$147B			BSF	STACK_11, 0
;math_double.ppas,895 :: 		
$04EE	$1FFB			BTFSS	STACK_11, 7
;math_double.ppas,897 :: 		
$04EF	$2CF8			GOTO	SETIOV3224EEE
;math_double.ppas,898 :: 		
$04F0	$01F2			CLRF	STACK_2
;math_double.ppas,899 :: 		
$04F1	$1FFA			BTFSS	STACK_10, 7
;math_double.ppas,900 :: 		
$04F2	$30FF			MOVLW	0XFF
;math_double.ppas,901 :: 		
$04F3	$00F2			MOVWF	STACK_2
;math_double.ppas,902 :: 		
$04F4	$00F1			MOVWF	STACK_1
;math_double.ppas,903 :: 		
$04F5	$00F0			MOVWF	STACK_0
;math_double.ppas,904 :: 		
$04F6	$0DFA			RLF	STACK_10, F
;math_double.ppas,905 :: 		
$04F7	$0CF2			RRF	STACK_2, F
;math_double.ppas,906 :: 		
$04F8	$	SETIOV3224EEE:
;math_double.ppas,907 :: 		
$04F8	$30FF			MOVLW	0XFF
;math_double.ppas,908 :: 		
$04F9	$	math_double_L_11:
;math_double.ppas,909 :: 		
$04F9	$0008			RETURN
$0350	$	_envia:
;Pic1.pbas,11 :: 		sub procedure envia
;Pic1.pbas,12 :: 		if priorit = 1 then
$0350	$3000			MOVLW	0
$0351	$1303			BCF	STATUS, RP1
$0352	$1283			BCF	STATUS, RP0
$0353	$0622			XORWF	_priorit+1, 0
$0354	$1D03			BTFSS	STATUS, Z
$0355	$2B58			GOTO	L_envia_0
$0356	$3001			MOVLW	1
$0357	$0621			XORWF	_priorit, 0
$0358	$	L_envia_0:
$0358	$1D03			BTFSS	STATUS, Z
$0359	$2B70			GOTO	Pic1_L_2
$035A	$	Pic1_L_1:
;Pic1.pbas,13 :: 		intToStr(incN, txt)
$035A	$0823			MOVF	_incn, 0
$035B	$00D0			MOVWF	FARG_IntToStr
$035C	$0824			MOVF	_incn+1, 0
$035D	$00D1			MOVWF	FARG_IntToStr+1
$035E	$3025			MOVLW	_txt
$035F	$00D2			MOVWF	FARG_IntToStr+2
$0360	$2250			CALL	_inttostr
;Pic1.pbas,14 :: 		Usart_Write_Text("1")
$0361	$3031			MOVLW	49
$0362	$00CC			MOVWF	?envia_Local_Text+0
$0363	$01CD			CLRF	?envia_Local_Text+1
$0364	$304C			MOVLW	?envia_Local_Text
$0365	$00D0			MOVWF	FARG_Usart_Write_Text
$0366	$24AE			CALL	_usart_write_text
;Pic1.pbas,15 :: 		Usart_Write_Text(txt)
$0367	$3025			MOVLW	_txt
$0368	$00D0			MOVWF	FARG_Usart_Write_Text
$0369	$24AE			CALL	_usart_write_text
;Pic1.pbas,16 :: 		Usart_Write_Text("/")
$036A	$302F			MOVLW	47
$036B	$00CC			MOVWF	?envia_Local_Text+0
$036C	$01CD			CLRF	?envia_Local_Text+1
$036D	$304C			MOVLW	?envia_Local_Text
$036E	$00D0			MOVWF	FARG_Usart_Write_Text
$036F	$24AE			CALL	_usart_write_text
$0370	$	Pic1_L_2:
;Pic1.pbas,17 :: 		end if
$0370	$	Pic1_L_3:
;Pic1.pbas,18 :: 		if priorit = 2 then
$0370	$3000			MOVLW	0
$0371	$0622			XORWF	_priorit+1, 0
$0372	$1D03			BTFSS	STATUS, Z
$0373	$2B76			GOTO	L_envia_1
$0374	$3002			MOVLW	2
$0375	$0621			XORWF	_priorit, 0
$0376	$	L_envia_1:
$0376	$1D03			BTFSS	STATUS, Z
$0377	$2B8E			GOTO	Pic1_L_5
$0378	$	Pic1_L_4:
;Pic1.pbas,19 :: 		intToStr(incP, txt)
$0378	$082C			MOVF	_incp, 0
$0379	$00D0			MOVWF	FARG_IntToStr
$037A	$082D			MOVF	_incp+1, 0
$037B	$00D1			MOVWF	FARG_IntToStr+1
$037C	$3025			MOVLW	_txt
$037D	$00D2			MOVWF	FARG_IntToStr+2
$037E	$2250			CALL	_inttostr
;Pic1.pbas,20 :: 		Usart_Write_Text("2")
$037F	$3032			MOVLW	50
$0380	$00CC			MOVWF	?envia_Local_Text+0
$0381	$01CD			CLRF	?envia_Local_Text+1
$0382	$304C			MOVLW	?envia_Local_Text
$0383	$00D0			MOVWF	FARG_Usart_Write_Text
$0384	$24AE			CALL	_usart_write_text
;Pic1.pbas,21 :: 		Usart_Write_Text(txt)
$0385	$3025			MOVLW	_txt
$0386	$00D0			MOVWF	FARG_Usart_Write_Text
$0387	$24AE			CALL	_usart_write_text
;Pic1.pbas,22 :: 		Usart_Write_Text("/")
$0388	$302F			MOVLW	47
$0389	$00CC			MOVWF	?envia_Local_Text+0
$038A	$01CD			CLRF	?envia_Local_Text+1
$038B	$304C			MOVLW	?envia_Local_Text
$038C	$00D0			MOVWF	FARG_Usart_Write_Text
$038D	$24AE			CALL	_usart_write_text
$038E	$	Pic1_L_5:
;Pic1.pbas,23 :: 		end if
$038E	$	Pic1_L_6:
$038E	$	Pic1_L_0:
$038E	$0008			RETURN
$04C4	$	_usart_init:
;USART_b75.ppas,22 :: 		
;USART_b75.ppas,24 :: 		
$04C4	$	USART_b75_L_1:
$04C4	$1303			BCF	STATUS, RP1
$04C5	$1683			BSF	STATUS, RP0
$04C6	$1698			BSF	TXSTA, 5
$04C7	$	USART_b75_L_2:
;USART_b75.ppas,25 :: 		
$04C7	$3090			MOVLW	144
$04C8	$1283			BCF	STATUS, RP0
$04C9	$0098			MOVWF	RCSTA
;USART_b75.ppas,31 :: 		
$04CA	$	USART_b75_L_3:
$04CA	$1683			BSF	STATUS, RP0
$04CB	$1686			BSF	TRISB, 5
$04CC	$	USART_b75_L_4:
;USART_b75.ppas,32 :: 		
$04CC	$	USART_b75_L_5:
$04CC	$1786			BSF	TRISB, 7
$04CD	$	USART_b75_L_6:
;USART_b75.ppas,35 :: 		
$04CD	$	USART_b75_L_8:
$04CD	$1283			BCF	STATUS, RP0
$04CE	$080C			MOVF	PIR1, 0
$04CF	$00F1			MOVWF	STACK_1
$04D0	$3000			MOVLW	0
$04D1	$1AF1			BTFSC	STACK_1, 5
$04D2	$3001			MOVLW	1
$04D3	$00F1			MOVWF	STACK_1
$04D4	$0871			MOVF	STACK_1, 0
$04D5	$3A01			XORLW	1
$04D6	$1903			BTFSC	STATUS, Z
$04D7	$2CCD			GOTO	USART_b75_L_8
;USART_b75.ppas,36 :: 		
$04D8	$	USART_b75_L_9:
$04D8	$	USART_b75_L_0:
;USART_b75.ppas,37 :: 		
$04D8	$0008			RETURN
$0490	$	_int2double:
$0490	$1303			BCF	STATUS, RP1
$0491	$1283			BCF	STATUS, RP0
;math_double.ppas,1681 :: 		
;math_double.ppas,1687 :: 		
$0492	$0870			MOVF	STACK_0, W
;math_double.ppas,1688 :: 		
$0493	$00F8			MOVWF	STACK_8
;math_double.ppas,1689 :: 		
$0494	$0871			MOVF	STACK_1, W
;math_double.ppas,1690 :: 		
$0495	$00F0			MOVWF	STACK_0
;math_double.ppas,1691 :: 		
$0496	$01F1			CLRF	STACK_1
;math_double.ppas,1692 :: 		
$0497	$01F2			CLRF	STACK_2
;math_double.ppas,1694 :: 		
$0498	$01F3			CLRF	STACK_3
;math_double.ppas,1695 :: 		
$0499	$	FLO1632:
;math_double.ppas,1696 :: 		
$0499	$01FB			CLRF	STACK_11
;math_double.ppas,1698 :: 		
$049A	$01FC			CLRF	STACK_12
;math_double.ppas,1699 :: 		
$049B	$3096			MOVLW	150
;math_double.ppas,1700 :: 		
$049C	$00F3			MOVWF	STACK_3
;math_double.ppas,1701 :: 		
$049D	$01FA			CLRF	STACK_10
;math_double.ppas,1702 :: 		
$049E	$1FF0			BTFSS	STACK_0, 7
;math_double.ppas,1704 :: 		
$049F	$2CA6			GOTO	FLO1632EEE
;math_double.ppas,1705 :: 		
$04A0	$09F8			COMF	STACK_8, F
;math_double.ppas,1707 :: 		
$04A1	$09F0			COMF	STACK_0, F
;math_double.ppas,1708 :: 		
$04A2	$0AF8			INCF	STACK_8, F
;math_double.ppas,1709 :: 		
$04A3	$1903			BTFSC	STATUS, Z
;math_double.ppas,1711 :: 		
$04A4	$0AF0			INCF	STACK_0, F
;math_double.ppas,1712 :: 		
$04A5	$17FA			BSF	STACK_10, 7
;math_double.ppas,1713 :: 		
$04A6	$	FLO1632EEE:
;math_double.ppas,1714 :: 		
$04A6	$0870			MOVF	STACK_0, W
;math_double.ppas,1715 :: 		
$04A7	$00F1			MOVWF	STACK_1
;math_double.ppas,1716 :: 		
$04A8	$0878			MOVF	STACK_8, W
;math_double.ppas,1717 :: 		
$04A9	$00F0			MOVWF	STACK_0
;math_double.ppas,1718 :: 		
$04AA	$01F8			CLRF	STACK_8
;math_double.ppas,1719 :: 		
$04AB	$01F2			CLRF	STACK_2
;math_double.ppas,1721 :: 		
$04AC	$2432			CALL	_nrm3232
$04AD	$	math_double_L_18:
;math_double.ppas,1722 :: 		
$04AD	$0008			RETURN
$02F3	$	_double2int:
$02F3	$1303			BCF	STATUS, RP1
$02F4	$1283			BCF	STATUS, RP0
;math_double.ppas,1272 :: 		
;math_double.ppas,1280 :: 		
$02F5	$	INT3216:
;math_double.ppas,1281 :: 		
$02F5	$01FB			CLRF	STACK_11
;math_double.ppas,1282 :: 		
$02F6	$0873			MOVF	STACK_3, W
;math_double.ppas,1283 :: 		
$02F7	$1903			BTFSC	STATUS, Z
;math_double.ppas,1285 :: 		
$02F8	$2B30			GOTO	IRES016
;math_double.ppas,1286 :: 		
$02F9	$0872			MOVF	STACK_2, W
;math_double.ppas,1287 :: 		
$02FA	$00FA			MOVWF	STACK_10
;math_double.ppas,1289 :: 		
$02FB	$17F2			BSF	STACK_2, 7
;math_double.ppas,1290 :: 		
$02FC	$308E			MOVLW	142
;math_double.ppas,1291 :: 		
$02FD	$02F3			SUBWF	STACK_3, F
;math_double.ppas,1292 :: 		
$02FE	$1FF3			BTFSS	STACK_3, 7
;math_double.ppas,1293 :: 		
$02FF	$2B33			GOTO	SETIOV16
;math_double.ppas,1294 :: 		
$0300	$09F3			COMF	STACK_3, F
;math_double.ppas,1296 :: 		
$0301	$0AF3			INCF	STACK_3, F
;math_double.ppas,1297 :: 		
$0302	$3008			MOVLW	8
;math_double.ppas,1298 :: 		
$0303	$0273			SUBWF	STACK_3, W
;math_double.ppas,1299 :: 		
$0304	$1C03			BTFSS	STATUS, C
;math_double.ppas,1300 :: 		
$0305	$2B16			GOTO	TSHIFT3216
;math_double.ppas,1301 :: 		
$0306	$00F3			MOVWF	STACK_3
;math_double.ppas,1302 :: 		
$0307	$0DF1			RLF	STACK_1, F
;math_double.ppas,1303 :: 		
$0308	$0872			MOVF	STACK_2, W
;math_double.ppas,1304 :: 		
$0309	$00F1			MOVWF	STACK_1
;math_double.ppas,1306 :: 		
$030A	$01F2			CLRF	STACK_2
;math_double.ppas,1307 :: 		
$030B	$3008			MOVLW	8
;math_double.ppas,1308 :: 		
$030C	$0273			SUBWF	STACK_3, W
;math_double.ppas,1309 :: 		
$030D	$1C03			BTFSS	STATUS, C
;math_double.ppas,1310 :: 		
$030E	$2B16			GOTO	TSHIFT3216
;math_double.ppas,1311 :: 		
$030F	$00F3			MOVWF	STACK_3
;math_double.ppas,1312 :: 		
$0310	$0DF1			RLF	STACK_1, F
;math_double.ppas,1314 :: 		
$0311	$01F1			CLRF	STACK_1
;math_double.ppas,1315 :: 		
$0312	$0873			MOVF	STACK_3, W
;math_double.ppas,1316 :: 		
$0313	$1D03			BTFSS	STATUS, Z
;math_double.ppas,1317 :: 		
$0314	$1003			BCF	STATUS, C
;math_double.ppas,1318 :: 		
$0315	$2B1E			GOTO	SHIFT3216OK
;math_double.ppas,1319 :: 		
$0316	$	TSHIFT3216:
;math_double.ppas,1320 :: 		
$0316	$0873			MOVF	STACK_3, W
;math_double.ppas,1321 :: 		
$0317	$1903			BTFSC	STATUS, Z
;math_double.ppas,1322 :: 		
$0318	$2B1E			GOTO	SHIFT3216OK
;math_double.ppas,1323 :: 		
$0319	$	SHIFT3216:
;math_double.ppas,1324 :: 		
$0319	$1003			BCF	STATUS, C
;math_double.ppas,1325 :: 		
$031A	$0CF2			RRF	STACK_2, F
;math_double.ppas,1326 :: 		
$031B	$0CF1			RRF	STACK_1, F
;math_double.ppas,1327 :: 		
$031C	$0BF3			DECFSZ	STACK_3, F
;math_double.ppas,1328 :: 		
$031D	$2B19			GOTO	SHIFT3216
;math_double.ppas,1329 :: 		
$031E	$	SHIFT3216OK:
;math_double.ppas,1330 :: 		
$031E	$1B7B			BTFSC	STACK_11, 6
;math_double.ppas,1331 :: 		
$031F	$1C71			BTFSS	STACK_1, 0
;math_double.ppas,1332 :: 		
$0320	$2B28			GOTO	INT3216OK
;math_double.ppas,1333 :: 		
$0321	$1C03			BTFSS	STATUS, C
;math_double.ppas,1334 :: 		
$0322	$2B28			GOTO	INT3216OK
;math_double.ppas,1335 :: 		
$0323	$0AF1			INCF	STACK_1, F
;math_double.ppas,1336 :: 		
$0324	$1903			BTFSC	STATUS, Z
;math_double.ppas,1337 :: 		
$0325	$0AF2			INCF	STACK_2, F
;math_double.ppas,1338 :: 		
$0326	$1BF2			BTFSC	STACK_2, 7
;math_double.ppas,1339 :: 		
$0327	$2B3F			GOTO	JPJSETIOV3224
;math_double.ppas,1340 :: 		
$0328	$	INT3216OK:
;math_double.ppas,1341 :: 		
$0328	$1FFA			BTFSS	STACK_10, 7
;math_double.ppas,1343 :: 		
$0329	$2B42			GOTO	INT3216EOK
;math_double.ppas,1344 :: 		
$032A	$09F2			COMF	STACK_2, F
;math_double.ppas,1345 :: 		
$032B	$09F1			COMF	STACK_1, F
;math_double.ppas,1346 :: 		
$032C	$0AF1			INCF	STACK_1, F
;math_double.ppas,1347 :: 		
$032D	$1903			BTFSC	STATUS, Z
;math_double.ppas,1348 :: 		
$032E	$0AF2			INCF	STACK_2, F
;math_double.ppas,1350 :: 		
$032F	$2B42			GOTO	INT3216EOK
;math_double.ppas,1351 :: 		
$0330	$	IRES016:
;math_double.ppas,1352 :: 		
$0330	$01F2			CLRF	STACK_2
;math_double.ppas,1353 :: 		
$0331	$01F1			CLRF	STACK_1
;math_double.ppas,1354 :: 		
$0332	$2B42			GOTO	INT3216EOK
;math_double.ppas,1355 :: 		
$0333	$	SETIOV16:
;math_double.ppas,1356 :: 		
$0333	$147B			BSF	STACK_11, 0
;math_double.ppas,1357 :: 		
$0334	$1FFB			BTFSS	STACK_11, 7
;math_double.ppas,1359 :: 		
$0335	$2B45			GOTO	INT3216EER
;math_double.ppas,1360 :: 		
$0336	$01F2			CLRF	STACK_2
;math_double.ppas,1361 :: 		
$0337	$1FFA			BTFSS	STACK_10, 7
;math_double.ppas,1362 :: 		
$0338	$2B45			GOTO	INT3216EER
;math_double.ppas,1363 :: 		
$0339	$30FF			MOVLW	0XFF
;math_double.ppas,1364 :: 		
$033A	$00F2			MOVWF	STACK_2
;math_double.ppas,1365 :: 		
$033B	$00F1			MOVWF	STACK_1
;math_double.ppas,1366 :: 		
$033C	$0DFA			RLF	STACK_10, F
;math_double.ppas,1367 :: 		
$033D	$0CF2			RRF	STACK_2, F
;math_double.ppas,1369 :: 		
$033E	$2B45			GOTO	INT3216EER
;math_double.ppas,1370 :: 		
$033F	$	JPJSETIOV3224:
;math_double.ppas,1371 :: 		
$033F	$3001			MOVLW	0X01
;math_double.ppas,1372 :: 		
$0340	$00FC			MOVWF	STACK_12
;math_double.ppas,1373 :: 		
$0341	$2B47			GOTO	INT3216EEE
;math_double.ppas,1374 :: 		
$0342	$	INT3216EOK:
;math_double.ppas,1375 :: 		
$0342	$3000			MOVLW	0X00
;math_double.ppas,1376 :: 		
$0343	$00FC			MOVWF	STACK_12
;math_double.ppas,1377 :: 		
$0344	$2B47			GOTO	INT3216EEE
;math_double.ppas,1378 :: 		
$0345	$	INT3216EER:
;math_double.ppas,1379 :: 		
$0345	$30FF			MOVLW	0XFF
;math_double.ppas,1380 :: 		
$0346	$00FC			MOVWF	STACK_12
;math_double.ppas,1383 :: 		
$0347	$	INT3216EEE:
;math_double.ppas,1385 :: 		
$0347	$08FC			MOVF	STACK_12, F
;math_double.ppas,1386 :: 		
$0348	$1903			BTFSC	STATUS, Z
;math_double.ppas,1387 :: 		
$0349	$2B4B			GOTO	L_DOUBLE2INT_0
;math_double.ppas,1389 :: 		
$034A	$24EB			CALL	_setiov3224
;math_double.ppas,1391 :: 		
$034B	$	L_DOUBLE2INT_0:
;math_double.ppas,1392 :: 		
$034B	$0871			MOVF	STACK_1, W
;math_double.ppas,1393 :: 		
$034C	$00F0			MOVWF	STACK_0
;math_double.ppas,1394 :: 		
$034D	$0872			MOVF	STACK_2, W
;math_double.ppas,1395 :: 		
$034E	$00F1			MOVWF	STACK_1
;math_double.ppas,1396 :: 		
$034F	$	math_double_L_14:
;math_double.ppas,1398 :: 		
$034F	$0008			RETURN
$03E9	$	_mul_16x16_s:
$03E9	$1303			BCF	STATUS, RP1
$03EA	$1283			BCF	STATUS, RP0
;math.ppas,203 :: 		
;math.ppas,205 :: 		
$03EB	$01FB			CLRF	STACK_11
;math.ppas,206 :: 		
$03EC	$01FA			CLRF	STACK_10
;math.ppas,207 :: 		
$03ED	$01F9			CLRF	STACK_9
;math.ppas,208 :: 		
$03EE	$3080			MOVLW	128
;math.ppas,210 :: 		
$03EF	$00F8			MOVWF	STACK_8
;math.ppas,212 :: 		
$03F0	$01FD			CLRF	STACK_13
;math.ppas,213 :: 		
$03F1	$1FF1			BTFSS	STACK_1, 7
;math.ppas,214 :: 		
$03F2	$2BF9			GOTO	$+7
;math.ppas,215 :: 		
$03F3	$09F1			COMF	STACK_1, F
;math.ppas,216 :: 		
$03F4	$09F0			COMF	STACK_0, F
;math.ppas,217 :: 		
$03F5	$0AF0			INCF	STACK_0, F
;math.ppas,218 :: 		
$03F6	$1903			BTFSC	STATUS, Z
;math.ppas,219 :: 		
$03F7	$0AF1			INCF	STACK_1, F
;math.ppas,221 :: 		
$03F8	$0AFD			INCF	STACK_13, F
;math.ppas,222 :: 		
$03F9	$1FF5			BTFSS	STACK_5, 7
;math.ppas,223 :: 		
$03FA	$2C01			GOTO	$+7
;math.ppas,224 :: 		
$03FB	$09F5			COMF	STACK_5, F
;math.ppas,225 :: 		
$03FC	$09F4			COMF	STACK_4, F
;math.ppas,226 :: 		
$03FD	$0AF4			INCF	STACK_4, F
;math.ppas,227 :: 		
$03FE	$1903			BTFSC	STATUS, Z
;math.ppas,228 :: 		
$03FF	$0AF5			INCF	STACK_5, F
;math.ppas,230 :: 		
$0400	$0AFD			INCF	STACK_13, F
;math.ppas,231 :: 		
$0401	$0CF1			RRF	STACK_1, F
;math.ppas,233 :: 		
$0402	$0CF0			RRF	STACK_0, F
;math.ppas,234 :: 		
$0403	$1C03			BTFSS	STATUS, C
;math.ppas,235 :: 		
$0404	$2C0E			GOTO	$+10
;math.ppas,236 :: 		
$0405	$0874			MOVF	STACK_4, W
;math.ppas,238 :: 		
$0406	$07F9			ADDWF	STACK_9, F
;math.ppas,239 :: 		
$0407	$0875			MOVF	STACK_5, W
;math.ppas,240 :: 		
$0408	$1803			BTFSC	STATUS, C
;math.ppas,241 :: 		
$0409	$0F75			INCFSZ	STACK_5, W
;math.ppas,242 :: 		
$040A	$07FA			ADDWF	STACK_10, F
;math.ppas,243 :: 		
$040B	$1803			BTFSC	STATUS, C
;math.ppas,244 :: 		
$040C	$0AFB			INCF	STACK_11, F
;math.ppas,246 :: 		
$040D	$1003			BCF	STATUS, C
;math.ppas,247 :: 		
$040E	$1FF0			BTFSS	STACK_0, 7
;math.ppas,248 :: 		
$040F	$2C16			GOTO	$+7
;math.ppas,249 :: 		
$0410	$0874			MOVF	STACK_4, W
;math.ppas,250 :: 		
$0411	$07FA			ADDWF	STACK_10, F
;math.ppas,251 :: 		
$0412	$1803			BTFSC	STATUS, C
;math.ppas,252 :: 		
$0413	$0AFB			INCF	STACK_11, F
;math.ppas,253 :: 		
$0414	$0875			MOVF	STACK_5, W
;math.ppas,255 :: 		
$0415	$07FB			ADDWF	STACK_11, F
;math.ppas,256 :: 		
$0416	$0CFB			RRF	STACK_11, F
;math.ppas,257 :: 		
$0417	$0CFA			RRF	STACK_10, F
;math.ppas,258 :: 		
$0418	$0CF9			RRF	STACK_9, F
;math.ppas,260 :: 		
$0419	$0CF8			RRF	STACK_8, F
;math.ppas,261 :: 		
$041A	$1C03			BTFSS	STATUS, C
;math.ppas,262 :: 		
$041B	$2C01			GOTO	$-26
;math.ppas,263 :: 		
$041C	$1C7D			BTFSS	STACK_13, 0
;math.ppas,265 :: 		
$041D	$2C29			GOTO	$+12
;math.ppas,266 :: 		
$041E	$09FB			COMF	STACK_11, F
;math.ppas,267 :: 		
$041F	$09FA			COMF	STACK_10, F
;math.ppas,268 :: 		
$0420	$09F9			COMF	STACK_9, F
;math.ppas,270 :: 		
$0421	$09F8			COMF	STACK_8, F
;math.ppas,271 :: 		
$0422	$0AF8			INCF	STACK_8, F
;math.ppas,272 :: 		
$0423	$1903			BTFSC	STATUS, Z
;math.ppas,273 :: 		
$0424	$0AF9			INCF	STACK_9, F
;math.ppas,274 :: 		
$0425	$1903			BTFSC	STATUS, Z
;math.ppas,275 :: 		
$0426	$0AFA			INCF	STACK_10, F
;math.ppas,276 :: 		
$0427	$1903			BTFSC	STATUS, Z
;math.ppas,278 :: 		
$0428	$0AFB			INCF	STACK_11, F
;math.ppas,279 :: 		
$0429	$087B			MOVF	STACK_11, W
;math.ppas,280 :: 		
$042A	$00F3			MOVWF	STACK_3
;math.ppas,281 :: 		
$042B	$087A			MOVF	STACK_10, W
;math.ppas,282 :: 		
$042C	$00F2			MOVWF	STACK_2
;math.ppas,283 :: 		
$042D	$0879			MOVF	STACK_9, W
;math.ppas,284 :: 		
$042E	$00F1			MOVWF	STACK_1
;math.ppas,285 :: 		
$042F	$0878			MOVF	STACK_8, W
;math.ppas,286 :: 		
$0430	$00F0			MOVWF	STACK_0
;math.ppas,287 :: 		
$0431	$	math_L_5:
;math.ppas,288 :: 		
$0431	$0008			RETURN
$0004	$	_main:
;Pic1.pbas,26 :: 		main:
$0004	$	_main_main:
;Pic1.pbas,27 :: 		TRISA=%11111111
$0004	$30FF			MOVLW	255
$0005	$1303			BCF	STATUS, RP1
$0006	$1683			BSF	STATUS, RP0
$0007	$0085			MOVWF	TRISA
;Pic1.pbas,28 :: 		TRISB=%01101111
$0008	$306F			MOVLW	111
$0009	$0086			MOVWF	TRISB
;Pic1.pbas,29 :: 		TRISC=%00000000
$000A	$0187			CLRF	TRISC, 1
;Pic1.pbas,30 :: 		INTCON=%00000000
$000B	$018B			CLRF	INTCON, 1
;Pic1.pbas,31 :: 		ANSEL=%00000000
$000C	$1703			BSF	STATUS, RP1
$000D	$1283			BCF	STATUS, RP0
$000E	$019E			CLRF	ANSEL, 1
;Pic1.pbas,32 :: 		ANSELH=%00000000
$000F	$019F			CLRF	ANSELH, 1
;Pic1.pbas,33 :: 		PORTC=0
$0010	$1303			BCF	STATUS, RP1
$0011	$0187			CLRF	PORTC, 1
;Pic1.pbas,34 :: 		Usart_Init(9600)
$0012	$3019			MOVLW	25
$0013	$1683			BSF	STATUS, RP0
$0014	$0099			MOVWF	SPBRG
$0015	$1518			BSF	TXSTA, BRGH
$0016	$24C4			CALL	_usart_init
;Pic1.pbas,36 :: 		incP=0
$0017	$01AC			CLRF	_incp
$0018	$01AD			CLRF	_incp+1
;Pic1.pbas,37 :: 		incN=0
$0019	$01A3			CLRF	_incn
$001A	$01A4			CLRF	_incn+1
;Pic1.pbas,38 :: 		b0=false
$001B	$01AE			CLRF	_b0, 1
;Pic1.pbas,39 :: 		b1=false
$001C	$01AF			CLRF	_b1, 1
;Pic1.pbas,40 :: 		b2=false
$001D	$01B0			CLRF	_b2, 1
;Pic1.pbas,41 :: 		b3=false
$001E	$01B1			CLRF	_b3, 1
;Pic1.pbas,42 :: 		b4=false
$001F	$01B2			CLRF	_b4, 1
;Pic1.pbas,43 :: 		b5=false
$0020	$01B3			CLRF	_b5, 1
;Pic1.pbas,44 :: 		priorit = 1
$0021	$3001			MOVLW	1
$0022	$00A1			MOVWF	_priorit
$0023	$01A2			CLRF	_priorit+1
;Pic1.pbas,46 :: 		i = 1
$0024	$3001			MOVLW	1
$0025	$00B4			MOVWF	_i
$0026	$01B5			CLRF	_i+1
;Pic1.pbas,48 :: 		executa:
$0027	$	_main_executa:
;Pic1.pbas,50 :: 		if (testbit(portA,0) = 1) then
$0027	$3001			MOVLW	1
$0028	$0505			ANDWF	PORTA, 0
$0029	$00F4			MOVWF	STACK_4
$002A	$0874			MOVF	STACK_4, 0
$002B	$3A01			XORLW	1
$002C	$1D03			BTFSS	STATUS, Z
$002D	$2843			GOTO	Pic1_L_9
$002E	$	Pic1_L_8:
;Pic1.pbas,51 :: 		if b0 = false then
$002E	$082E			MOVF	_b0, 0
$002F	$3A00			XORLW	0
$0030	$1D03			BTFSS	STATUS, Z
$0031	$2843			GOTO	Pic1_L_12
$0032	$	Pic1_L_11:
;Pic1.pbas,52 :: 		b0 = true
$0032	$30FF			MOVLW	255
$0033	$00AE			MOVWF	_b0
;Pic1.pbas,53 :: 		if priorit = 1 then
$0034	$3000			MOVLW	0
$0035	$0622			XORWF	_priorit+1, 0
$0036	$1D03			BTFSS	STATUS, Z
$0037	$283A			GOTO	L_main_2
$0038	$3001			MOVLW	1
$0039	$0621			XORWF	_priorit, 0
$003A	$	L_main_2:
$003A	$1D03			BTFSS	STATUS, Z
$003B	$2840			GOTO	Pic1_L_15
$003C	$	Pic1_L_14:
;Pic1.pbas,54 :: 		incN = incN + 1
$003C	$0AA3			INCF	_incn, 1
$003D	$1903			BTFSC	STATUS, Z
$003E	$0AA4			INCF	_incn+1, 1
$003F	$2843			GOTO	Pic1_L_16
;Pic1.pbas,55 :: 		else
$0040	$	Pic1_L_15:
;Pic1.pbas,56 :: 		incP = incP + 1
$0040	$0AAC			INCF	_incp, 1
$0041	$1903			BTFSC	STATUS, Z
$0042	$0AAD			INCF	_incp+1, 1
;Pic1.pbas,57 :: 		end if
$0043	$	Pic1_L_16:
$0043	$	Pic1_L_12:
;Pic1.pbas,58 :: 		end if
$0043	$	Pic1_L_13:
$0043	$	Pic1_L_9:
;Pic1.pbas,59 :: 		end if
$0043	$	Pic1_L_10:
;Pic1.pbas,60 :: 		if testbit(portA,0) = 0 then
$0043	$3001			MOVLW	1
$0044	$0505			ANDWF	PORTA, 0
$0045	$00F4			MOVWF	STACK_4
$0046	$0874			MOVF	STACK_4, 0
$0047	$3A00			XORLW	0
$0048	$1D03			BTFSS	STATUS, Z
$0049	$284F			GOTO	Pic1_L_18
$004A	$	Pic1_L_17:
;Pic1.pbas,61 :: 		if b0 = true then
$004A	$082E			MOVF	_b0, 0
$004B	$3AFF			XORLW	255
$004C	$1D03			BTFSS	STATUS, Z
$004D	$284F			GOTO	Pic1_L_21
$004E	$	Pic1_L_20:
;Pic1.pbas,62 :: 		b0 = false
$004E	$01AE			CLRF	_b0, 1
$004F	$	Pic1_L_21:
;Pic1.pbas,63 :: 		end if
$004F	$	Pic1_L_22:
$004F	$	Pic1_L_18:
;Pic1.pbas,64 :: 		end if
$004F	$	Pic1_L_19:
;Pic1.pbas,67 :: 		if testbit(portA,1) = 1 then
$004F	$3000			MOVLW	0
$0050	$1885			BTFSC	PORTA, 1
$0051	$3001			MOVLW	1
$0052	$00F4			MOVWF	STACK_4
$0053	$0874			MOVF	STACK_4, 0
$0054	$3A01			XORLW	1
$0055	$1D03			BTFSS	STATUS, Z
$0056	$286E			GOTO	Pic1_L_24
$0057	$	Pic1_L_23:
;Pic1.pbas,68 :: 		if b1 = false then
$0057	$082F			MOVF	_b1, 0
$0058	$3A00			XORLW	0
$0059	$1D03			BTFSS	STATUS, Z
$005A	$286E			GOTO	Pic1_L_27
$005B	$	Pic1_L_26:
;Pic1.pbas,69 :: 		b1 = true
$005B	$30FF			MOVLW	255
$005C	$00AF			MOVWF	_b1
;Pic1.pbas,70 :: 		if priorit = 1 then
$005D	$3000			MOVLW	0
$005E	$0622			XORWF	_priorit+1, 0
$005F	$1D03			BTFSS	STATUS, Z
$0060	$2863			GOTO	L_main_3
$0061	$3001			MOVLW	1
$0062	$0621			XORWF	_priorit, 0
$0063	$	L_main_3:
$0063	$1D03			BTFSS	STATUS, Z
$0064	$286A			GOTO	Pic1_L_30
$0065	$	Pic1_L_29:
;Pic1.pbas,71 :: 		incN = incN - 1
$0065	$3001			MOVLW	1
$0066	$02A3			SUBWF	_incn, 1
$0067	$1C03			BTFSS	STATUS, C
$0068	$03A4			DECF	_incn+1, 1
$0069	$286E			GOTO	Pic1_L_31
;Pic1.pbas,72 :: 		else
$006A	$	Pic1_L_30:
;Pic1.pbas,73 :: 		incP = incP - 1
$006A	$3001			MOVLW	1
$006B	$02AC			SUBWF	_incp, 1
$006C	$1C03			BTFSS	STATUS, C
$006D	$03AD			DECF	_incp+1, 1
;Pic1.pbas,74 :: 		end if
$006E	$	Pic1_L_31:
$006E	$	Pic1_L_27:
;Pic1.pbas,75 :: 		end if
$006E	$	Pic1_L_28:
$006E	$	Pic1_L_24:
;Pic1.pbas,76 :: 		end if
$006E	$	Pic1_L_25:
;Pic1.pbas,77 :: 		if testbit(portA,1) = 0 then
$006E	$3000			MOVLW	0
$006F	$1885			BTFSC	PORTA, 1
$0070	$3001			MOVLW	1
$0071	$00F4			MOVWF	STACK_4
$0072	$0874			MOVF	STACK_4, 0
$0073	$3A00			XORLW	0
$0074	$1D03			BTFSS	STATUS, Z
$0075	$287B			GOTO	Pic1_L_33
$0076	$	Pic1_L_32:
;Pic1.pbas,78 :: 		if b1 = true then
$0076	$082F			MOVF	_b1, 0
$0077	$3AFF			XORLW	255
$0078	$1D03			BTFSS	STATUS, Z
$0079	$287B			GOTO	Pic1_L_36
$007A	$	Pic1_L_35:
;Pic1.pbas,79 :: 		b1 = false
$007A	$01AF			CLRF	_b1, 1
$007B	$	Pic1_L_36:
;Pic1.pbas,80 :: 		end if
$007B	$	Pic1_L_37:
$007B	$	Pic1_L_33:
;Pic1.pbas,81 :: 		end if
$007B	$	Pic1_L_34:
;Pic1.pbas,84 :: 		if testbit(portA,2) = 1 then
$007B	$3000			MOVLW	0
$007C	$1905			BTFSC	PORTA, 2
$007D	$3001			MOVLW	1
$007E	$00F4			MOVWF	STACK_4
$007F	$0874			MOVF	STACK_4, 0
$0080	$3A01			XORLW	1
$0081	$1D03			BTFSS	STATUS, Z
$0082	$288D			GOTO	Pic1_L_39
$0083	$	Pic1_L_38:
;Pic1.pbas,85 :: 		if b2 = false then
$0083	$0830			MOVF	_b2, 0
$0084	$3A00			XORLW	0
$0085	$1D03			BTFSS	STATUS, Z
$0086	$288D			GOTO	Pic1_L_42
$0087	$	Pic1_L_41:
;Pic1.pbas,86 :: 		b2 = true
$0087	$30FF			MOVLW	255
$0088	$00B0			MOVWF	_b2
;Pic1.pbas,87 :: 		incN = 0
$0089	$01A3			CLRF	_incn
$008A	$01A4			CLRF	_incn+1
;Pic1.pbas,88 :: 		incP = 0
$008B	$01AC			CLRF	_incp
$008C	$01AD			CLRF	_incp+1
$008D	$	Pic1_L_42:
;Pic1.pbas,89 :: 		end if
$008D	$	Pic1_L_43:
$008D	$	Pic1_L_39:
;Pic1.pbas,90 :: 		end if
$008D	$	Pic1_L_40:
;Pic1.pbas,91 :: 		if testbit(portA,2) = 0 then
$008D	$3000			MOVLW	0
$008E	$1905			BTFSC	PORTA, 2
$008F	$3001			MOVLW	1
$0090	$00F4			MOVWF	STACK_4
$0091	$0874			MOVF	STACK_4, 0
$0092	$3A00			XORLW	0
$0093	$1D03			BTFSS	STATUS, Z
$0094	$289A			GOTO	Pic1_L_45
$0095	$	Pic1_L_44:
;Pic1.pbas,92 :: 		if b2 = true then
$0095	$0830			MOVF	_b2, 0
$0096	$3AFF			XORLW	255
$0097	$1D03			BTFSS	STATUS, Z
$0098	$289A			GOTO	Pic1_L_48
$0099	$	Pic1_L_47:
;Pic1.pbas,93 :: 		b2 = false
$0099	$01B0			CLRF	_b2, 1
$009A	$	Pic1_L_48:
;Pic1.pbas,94 :: 		end if
$009A	$	Pic1_L_49:
$009A	$	Pic1_L_45:
;Pic1.pbas,95 :: 		end if
$009A	$	Pic1_L_46:
;Pic1.pbas,98 :: 		if testbit(portA,3) = 1 then
$009A	$3000			MOVLW	0
$009B	$1985			BTFSC	PORTA, 3
$009C	$3001			MOVLW	1
$009D	$00F4			MOVWF	STACK_4
$009E	$0874			MOVF	STACK_4, 0
$009F	$3A01			XORLW	1
$00A0	$1D03			BTFSS	STATUS, Z
$00A1	$28B7			GOTO	Pic1_L_51
$00A2	$	Pic1_L_50:
;Pic1.pbas,99 :: 		if b3 = false then
$00A2	$0831			MOVF	_b3, 0
$00A3	$3A00			XORLW	0
$00A4	$1D03			BTFSS	STATUS, Z
$00A5	$28B7			GOTO	Pic1_L_54
$00A6	$	Pic1_L_53:
;Pic1.pbas,100 :: 		b3 = true
$00A6	$30FF			MOVLW	255
$00A7	$00B1			MOVWF	_b3
;Pic1.pbas,101 :: 		if priorit = 1 then
$00A8	$3000			MOVLW	0
$00A9	$0622			XORWF	_priorit+1, 0
$00AA	$1D03			BTFSS	STATUS, Z
$00AB	$28AE			GOTO	L_main_4
$00AC	$3001			MOVLW	1
$00AD	$0621			XORWF	_priorit, 0
$00AE	$	L_main_4:
$00AE	$1D03			BTFSS	STATUS, Z
$00AF	$28B4			GOTO	Pic1_L_57
$00B0	$	Pic1_L_56:
;Pic1.pbas,102 :: 		priorit = 2
$00B0	$3002			MOVLW	2
$00B1	$00A1			MOVWF	_priorit
$00B2	$01A2			CLRF	_priorit+1
$00B3	$28B7			GOTO	Pic1_L_58
;Pic1.pbas,103 :: 		else
$00B4	$	Pic1_L_57:
;Pic1.pbas,104 :: 		priorit = 1
$00B4	$3001			MOVLW	1
$00B5	$00A1			MOVWF	_priorit
$00B6	$01A2			CLRF	_priorit+1
;Pic1.pbas,105 :: 		end if
$00B7	$	Pic1_L_58:
$00B7	$	Pic1_L_54:
;Pic1.pbas,106 :: 		end if
$00B7	$	Pic1_L_55:
$00B7	$	Pic1_L_51:
;Pic1.pbas,107 :: 		end if
$00B7	$	Pic1_L_52:
;Pic1.pbas,108 :: 		if testbit(portA,3) = 0 then
$00B7	$3000			MOVLW	0
$00B8	$1985			BTFSC	PORTA, 3
$00B9	$3001			MOVLW	1
$00BA	$00F4			MOVWF	STACK_4
$00BB	$0874			MOVF	STACK_4, 0
$00BC	$3A00			XORLW	0
$00BD	$1D03			BTFSS	STATUS, Z
$00BE	$28C4			GOTO	Pic1_L_60
$00BF	$	Pic1_L_59:
;Pic1.pbas,109 :: 		if b3 = true then
$00BF	$0831			MOVF	_b3, 0
$00C0	$3AFF			XORLW	255
$00C1	$1D03			BTFSS	STATUS, Z
$00C2	$28C4			GOTO	Pic1_L_63
$00C3	$	Pic1_L_62:
;Pic1.pbas,110 :: 		b3 = false
$00C3	$01B1			CLRF	_b3, 1
$00C4	$	Pic1_L_63:
;Pic1.pbas,111 :: 		end if
$00C4	$	Pic1_L_64:
$00C4	$	Pic1_L_60:
;Pic1.pbas,112 :: 		end if
$00C4	$	Pic1_L_61:
;Pic1.pbas,115 :: 		if testbit(portA,5) = 1 then
$00C4	$3000			MOVLW	0
$00C5	$1A85			BTFSC	PORTA, 5
$00C6	$3001			MOVLW	1
$00C7	$00F4			MOVWF	STACK_4
$00C8	$0874			MOVF	STACK_4, 0
$00C9	$3A01			XORLW	1
$00CA	$1D03			BTFSS	STATUS, Z
$00CB	$28D6			GOTO	Pic1_L_66
$00CC	$	Pic1_L_65:
;Pic1.pbas,116 :: 		if b5 = false then
$00CC	$0833			MOVF	_b5, 0
$00CD	$3A00			XORLW	0
$00CE	$1D03			BTFSS	STATUS, Z
$00CF	$28D6			GOTO	Pic1_L_69
$00D0	$	Pic1_L_68:
;Pic1.pbas,117 :: 		b5 = true
$00D0	$30FF			MOVLW	255
$00D1	$00B3			MOVWF	_b5
;Pic1.pbas,118 :: 		envia
$00D2	$2350			CALL	_envia
;Pic1.pbas,119 :: 		i = i + 1
$00D3	$0AB4			INCF	_i, 1
$00D4	$1903			BTFSC	STATUS, Z
$00D5	$0AB5			INCF	_i+1, 1
$00D6	$	Pic1_L_69:
;Pic1.pbas,120 :: 		end if
$00D6	$	Pic1_L_70:
$00D6	$	Pic1_L_66:
;Pic1.pbas,121 :: 		end if
$00D6	$	Pic1_L_67:
;Pic1.pbas,122 :: 		if testbit(portA,5) = 0 then
$00D6	$3000			MOVLW	0
$00D7	$1A85			BTFSC	PORTA, 5
$00D8	$3001			MOVLW	1
$00D9	$00F4			MOVWF	STACK_4
$00DA	$0874			MOVF	STACK_4, 0
$00DB	$3A00			XORLW	0
$00DC	$1D03			BTFSS	STATUS, Z
$00DD	$28DF			GOTO	Pic1_L_72
$00DE	$	Pic1_L_71:
;Pic1.pbas,123 :: 		b5 = false
$00DE	$01B3			CLRF	_b5, 1
$00DF	$	Pic1_L_72:
;Pic1.pbas,124 :: 		end if
$00DF	$	Pic1_L_73:
;Pic1.pbas,126 :: 		if incN > 999 then
$00DF	$3080			MOVLW	128
$00E0	$3A03			XORLW	3
$00E1	$00F0			MOVWF	STACK_0
$00E2	$3080			MOVLW	128
$00E3	$0624			XORWF	_incn+1, 0
$00E4	$0270			SUBWF	STACK_0, 0
$00E5	$1D03			BTFSS	STATUS, Z
$00E6	$28E9			GOTO	L_main_5
$00E7	$0823			MOVF	_incn, 0
$00E8	$3CE7			SUBLW	231
$00E9	$	L_main_5:
$00E9	$1803			BTFSC	STATUS, C
$00EA	$28EF			GOTO	Pic1_L_75
$00EB	$	Pic1_L_74:
;Pic1.pbas,127 :: 		incN = 999
$00EB	$30E7			MOVLW	231
$00EC	$00A3			MOVWF	_incn
$00ED	$3003			MOVLW	3
$00EE	$00A4			MOVWF	_incn+1
$00EF	$	Pic1_L_75:
;Pic1.pbas,128 :: 		end if
$00EF	$	Pic1_L_76:
;Pic1.pbas,129 :: 		if incN < 0 then
$00EF	$3080			MOVLW	128
$00F0	$0624			XORWF	_incn+1, 0
$00F1	$00F0			MOVWF	STACK_0
$00F2	$3080			MOVLW	128
$00F3	$0270			SUBWF	STACK_0, 0
$00F4	$1D03			BTFSS	STATUS, Z
$00F5	$28F8			GOTO	L_main_6
$00F6	$3000			MOVLW	0
$00F7	$0223			SUBWF	_incn, 0
$00F8	$	L_main_6:
$00F8	$1803			BTFSC	STATUS, C
$00F9	$28FC			GOTO	Pic1_L_78
$00FA	$	Pic1_L_77:
;Pic1.pbas,130 :: 		incN = 0
$00FA	$01A3			CLRF	_incn
$00FB	$01A4			CLRF	_incn+1
$00FC	$	Pic1_L_78:
;Pic1.pbas,131 :: 		end if
$00FC	$	Pic1_L_79:
;Pic1.pbas,133 :: 		if incP > 999 then
$00FC	$3080			MOVLW	128
$00FD	$3A03			XORLW	3
$00FE	$00F0			MOVWF	STACK_0
$00FF	$3080			MOVLW	128
$0100	$062D			XORWF	_incp+1, 0
$0101	$0270			SUBWF	STACK_0, 0
$0102	$1D03			BTFSS	STATUS, Z
$0103	$2906			GOTO	L_main_7
$0104	$082C			MOVF	_incp, 0
$0105	$3CE7			SUBLW	231
$0106	$	L_main_7:
$0106	$1803			BTFSC	STATUS, C
$0107	$290C			GOTO	Pic1_L_81
$0108	$	Pic1_L_80:
;Pic1.pbas,134 :: 		incP = 999
$0108	$30E7			MOVLW	231
$0109	$00AC			MOVWF	_incp
$010A	$3003			MOVLW	3
$010B	$00AD			MOVWF	_incp+1
$010C	$	Pic1_L_81:
;Pic1.pbas,135 :: 		end if
$010C	$	Pic1_L_82:
;Pic1.pbas,136 :: 		if incP < 0 then
$010C	$3080			MOVLW	128
$010D	$062D			XORWF	_incp+1, 0
$010E	$00F0			MOVWF	STACK_0
$010F	$3080			MOVLW	128
$0110	$0270			SUBWF	STACK_0, 0
$0111	$1D03			BTFSS	STATUS, Z
$0112	$2915			GOTO	L_main_8
$0113	$3000			MOVLW	0
$0114	$022C			SUBWF	_incp, 0
$0115	$	L_main_8:
$0115	$1803			BTFSC	STATUS, C
$0116	$2919			GOTO	Pic1_L_84
$0117	$	Pic1_L_83:
;Pic1.pbas,137 :: 		incP = 0
$0117	$01AC			CLRF	_incp
$0118	$01AD			CLRF	_incp+1
$0119	$	Pic1_L_84:
;Pic1.pbas,138 :: 		end if
$0119	$	Pic1_L_85:
;Pic1.pbas,142 :: 		valor = i
$0119	$0834			MOVF	_i, 0
$011A	$00F0			MOVWF	STACK_0
$011B	$0835			MOVF	_i+1, 0
$011C	$00F1			MOVWF	STACK_0+1
$011D	$2490			CALL	_int2double
$011E	$0870			MOVF	STACK_0, 0
$011F	$00B6			MOVWF	_valor
$0120	$0871			MOVF	STACK_0+1, 0
$0121	$00B7			MOVWF	_valor+1
$0122	$0872			MOVF	STACK_0+2, 0
$0123	$00B8			MOVWF	_valor+2
$0124	$0873			MOVF	STACK_0+3, 0
$0125	$00B9			MOVWF	_valor+3
;Pic1.pbas,144 :: 		mil = valor div 1000
$0126	$22F3			CALL	_double2int
$0127	$0870			MOVF	STACK_0, 0
$0128	$00CA			MOVWF	FLOC_main+8
$0129	$0871			MOVF	STACK_0+1, 0
$012A	$00CB			MOVWF	FLOC_main+9
$012B	$30E8			MOVLW	232
$012C	$00F4			MOVWF	STACK_4
$012D	$3003			MOVLW	3
$012E	$00F5			MOVWF	STACK_4+1
$012F	$084A			MOVF	FLOC_main+8, 0
$0130	$00F0			MOVWF	STACK_0
$0131	$084B			MOVF	FLOC_main+9, 0
$0132	$00F1			MOVWF	STACK_0+1
$0133	$238F			CALL	_div_16x16_s
$0134	$0870			MOVF	STACK_0, 0
$0135	$00C8			MOVWF	FLOC_main+6
$0136	$0871			MOVF	STACK_0+1, 0
$0137	$00C9			MOVWF	FLOC_main+7
$0138	$0848			MOVF	FLOC_main+6, 0
$0139	$00BA			MOVWF	_mil
$013A	$0849			MOVF	FLOC_main+7, 0
$013B	$00BB			MOVWF	_mil+1
;Pic1.pbas,145 :: 		cen = valor div 100 - (mil * 10)
$013C	$3064			MOVLW	100
$013D	$00F4			MOVWF	STACK_4
$013E	$01F5			CLRF	STACK_4+1
$013F	$084A			MOVF	FLOC_main+8, 0
$0140	$00F0			MOVWF	STACK_0
$0141	$084B			MOVF	FLOC_main+9, 0
$0142	$00F1			MOVWF	STACK_0+1
$0143	$238F			CALL	_div_16x16_s
$0144	$0870			MOVF	STACK_0, 0
$0145	$00C2			MOVWF	FLOC_main+0
$0146	$0871			MOVF	STACK_0+1, 0
$0147	$00C3			MOVWF	FLOC_main+1
$0148	$0848			MOVF	FLOC_main+6, 0
$0149	$00F0			MOVWF	STACK_0
$014A	$0849			MOVF	FLOC_main+7, 0
$014B	$00F1			MOVWF	STACK_0+1
$014C	$300A			MOVLW	10
$014D	$00F4			MOVWF	STACK_4
$014E	$01F5			CLRF	STACK_4+1
$014F	$23E9			CALL	_mul_16x16_s
$0150	$0870			MOVF	STACK_0, 0
$0151	$0242			SUBWF	FLOC_main+0, 0
$0152	$00C6			MOVWF	FLOC_main+4
$0153	$0871			MOVF	STACK_0+1, 0
$0154	$1C03			BTFSS	STATUS, C
$0155	$3F01			ADDLW	1
$0156	$0243			SUBWF	FLOC_main+1, 0
$0157	$00C7			MOVWF	FLOC_main+5
$0158	$0846			MOVF	FLOC_main+4, 0
$0159	$00BC			MOVWF	_cen
$015A	$0847			MOVF	FLOC_main+5, 0
$015B	$00BD			MOVWF	_cen+1
;Pic1.pbas,146 :: 		dez = valor div 10 - (cen * 10) - (mil * 100)
$015C	$300A			MOVLW	10
$015D	$00F4			MOVWF	STACK_4
$015E	$01F5			CLRF	STACK_4+1
$015F	$084A			MOVF	FLOC_main+8, 0
$0160	$00F0			MOVWF	STACK_0
$0161	$084B			MOVF	FLOC_main+9, 0
$0162	$00F1			MOVWF	STACK_0+1
$0163	$238F			CALL	_div_16x16_s
$0164	$0870			MOVF	STACK_0, 0
$0165	$00C2			MOVWF	FLOC_main+0
$0166	$0871			MOVF	STACK_0+1, 0
$0167	$00C3			MOVWF	FLOC_main+1
$0168	$0846			MOVF	FLOC_main+4, 0
$0169	$00F0			MOVWF	STACK_0
$016A	$0847			MOVF	FLOC_main+5, 0
$016B	$00F1			MOVWF	STACK_0+1
$016C	$300A			MOVLW	10
$016D	$00F4			MOVWF	STACK_4
$016E	$01F5			CLRF	STACK_4+1
$016F	$23E9			CALL	_mul_16x16_s
$0170	$0870			MOVF	STACK_0, 0
$0171	$02C2			SUBWF	FLOC_main+0, 1
$0172	$1C03			BTFSS	STATUS, C
$0173	$03C3			DECF	FLOC_main+1, 1
$0174	$0871			MOVF	STACK_0+1, 0
$0175	$02C3			SUBWF	FLOC_main+1, 1
$0176	$0848			MOVF	FLOC_main+6, 0
$0177	$00F0			MOVWF	STACK_0
$0178	$0849			MOVF	FLOC_main+7, 0
$0179	$00F1			MOVWF	STACK_0+1
$017A	$3064			MOVLW	100
$017B	$00F4			MOVWF	STACK_4
$017C	$01F5			CLRF	STACK_4+1
$017D	$23E9			CALL	_mul_16x16_s
$017E	$0870			MOVF	STACK_0, 0
$017F	$0242			SUBWF	FLOC_main+0, 0
$0180	$00C4			MOVWF	FLOC_main+2
$0181	$0871			MOVF	STACK_0+1, 0
$0182	$1C03			BTFSS	STATUS, C
$0183	$3F01			ADDLW	1
$0184	$0243			SUBWF	FLOC_main+1, 0
$0185	$00C5			MOVWF	FLOC_main+3
$0186	$0844			MOVF	FLOC_main+2, 0
$0187	$00BE			MOVWF	_dez
$0188	$0845			MOVF	FLOC_main+3, 0
$0189	$00BF			MOVWF	_dez+1
;Pic1.pbas,147 :: 		uni = valor - (dez * 10) - (cen * 100) - (mil * 1000)
$018A	$0844			MOVF	FLOC_main+2, 0
$018B	$00F0			MOVWF	STACK_0
$018C	$0845			MOVF	FLOC_main+3, 0
$018D	$00F1			MOVWF	STACK_0+1
$018E	$300A			MOVLW	10
$018F	$00F4			MOVWF	STACK_4
$0190	$01F5			CLRF	STACK_4+1
$0191	$23E9			CALL	_mul_16x16_s
$0192	$0870			MOVF	STACK_0, 0
$0193	$024A			SUBWF	FLOC_main+8, 0
$0194	$00C2			MOVWF	FLOC_main+0
$0195	$0871			MOVF	STACK_0+1, 0
$0196	$1C03			BTFSS	STATUS, C
$0197	$3F01			ADDLW	1
$0198	$024B			SUBWF	FLOC_main+9, 0
$0199	$00C3			MOVWF	FLOC_main+1
$019A	$0846			MOVF	FLOC_main+4, 0
$019B	$00F0			MOVWF	STACK_0
$019C	$0847			MOVF	FLOC_main+5, 0
$019D	$00F1			MOVWF	STACK_0+1
$019E	$3064			MOVLW	100
$019F	$00F4			MOVWF	STACK_4
$01A0	$01F5			CLRF	STACK_4+1
$01A1	$23E9			CALL	_mul_16x16_s
$01A2	$0870			MOVF	STACK_0, 0
$01A3	$02C2			SUBWF	FLOC_main+0, 1
$01A4	$1C03			BTFSS	STATUS, C
$01A5	$03C3			DECF	FLOC_main+1, 1
$01A6	$0871			MOVF	STACK_0+1, 0
$01A7	$02C3			SUBWF	FLOC_main+1, 1
$01A8	$0848			MOVF	FLOC_main+6, 0
$01A9	$00F0			MOVWF	STACK_0
$01AA	$0849			MOVF	FLOC_main+7, 0
$01AB	$00F1			MOVWF	STACK_0+1
$01AC	$30E8			MOVLW	232
$01AD	$00F4			MOVWF	STACK_4
$01AE	$3003			MOVLW	3
$01AF	$00F5			MOVWF	STACK_4+1
$01B0	$23E9			CALL	_mul_16x16_s
$01B1	$0870			MOVF	STACK_0, 0
$01B2	$0242			SUBWF	FLOC_main+0, 0
$01B3	$00F0			MOVWF	STACK_0
$01B4	$0871			MOVF	STACK_0+1, 0
$01B5	$1C03			BTFSS	STATUS, C
$01B6	$3F01			ADDLW	1
$01B7	$0243			SUBWF	FLOC_main+1, 0
$01B8	$00F1			MOVWF	STACK_0+1
$01B9	$0870			MOVF	STACK_0, 0
$01BA	$00C0			MOVWF	_uni
$01BB	$0871			MOVF	STACK_0+1, 0
$01BC	$00C1			MOVWF	_uni+1
;Pic1.pbas,149 :: 		PORTC = uni + 16
$01BD	$3010			MOVLW	16
$01BE	$07F0			ADDWF	STACK_0, 1
$01BF	$1803			BTFSC	STATUS, C
$01C0	$0AF1			INCF	STACK_0+1, 1
$01C1	$0870			MOVF	STACK_0, 0
$01C2	$0087			MOVWF	PORTC
;Pic1.pbas,150 :: 		delay_ms(6)
$01C3	$3008			MOVLW	8
$01C4	$00FB			MOVWF	STACK_11
$01C5	$30FF			MOVLW	255
$01C6	$00FA			MOVWF	STACK_10
$01C7	$0BFB			DECFSZ	STACK_11, F
$01C8	$29CA			GOTO	$+2
$01C9	$29CD			GOTO	$+4
$01CA	$0BFA			DECFSZ	STACK_10, F
$01CB	$29CA			GOTO	$-1
$01CC	$29C7			GOTO	$-5
$01CD	$30C4			MOVLW	196
$01CE	$00FA			MOVWF	STACK_10
$01CF	$0BFA			DECFSZ	STACK_10, F
$01D0	$29CF			GOTO	$-1
$01D1	$0000			NOP
$01D2	$0000			NOP
;Pic1.pbas,152 :: 		PORTC = dez + 32
$01D3	$3020			MOVLW	32
$01D4	$0744			ADDWF	FLOC_main+2, 0
$01D5	$00F0			MOVWF	STACK_0
$01D6	$0845			MOVF	FLOC_main+3, 0
$01D7	$1803			BTFSC	STATUS, C
$01D8	$3F01			ADDLW	1
$01D9	$00F1			MOVWF	STACK_0+1
$01DA	$3000			MOVLW	0
$01DB	$07F1			ADDWF	STACK_0+1, 1
$01DC	$0870			MOVF	STACK_0, 0
$01DD	$0087			MOVWF	PORTC
;Pic1.pbas,153 :: 		delay_ms(6)
$01DE	$3008			MOVLW	8
$01DF	$00FB			MOVWF	STACK_11
$01E0	$30FF			MOVLW	255
$01E1	$00FA			MOVWF	STACK_10
$01E2	$0BFB			DECFSZ	STACK_11, F
$01E3	$29E5			GOTO	$+2
$01E4	$29E8			GOTO	$+4
$01E5	$0BFA			DECFSZ	STACK_10, F
$01E6	$29E5			GOTO	$-1
$01E7	$29E2			GOTO	$-5
$01E8	$30C4			MOVLW	196
$01E9	$00FA			MOVWF	STACK_10
$01EA	$0BFA			DECFSZ	STACK_10, F
$01EB	$29EA			GOTO	$-1
$01EC	$0000			NOP
$01ED	$0000			NOP
;Pic1.pbas,155 :: 		PORTC = cen + 64
$01EE	$3040			MOVLW	64
$01EF	$0746			ADDWF	FLOC_main+4, 0
$01F0	$00F0			MOVWF	STACK_0
$01F1	$0847			MOVF	FLOC_main+5, 0
$01F2	$1803			BTFSC	STATUS, C
$01F3	$3F01			ADDLW	1
$01F4	$00F1			MOVWF	STACK_0+1
$01F5	$3000			MOVLW	0
$01F6	$07F1			ADDWF	STACK_0+1, 1
$01F7	$0870			MOVF	STACK_0, 0
$01F8	$0087			MOVWF	PORTC
;Pic1.pbas,156 :: 		delay_ms(6)
$01F9	$3008			MOVLW	8
$01FA	$00FB			MOVWF	STACK_11
$01FB	$30FF			MOVLW	255
$01FC	$00FA			MOVWF	STACK_10
$01FD	$0BFB			DECFSZ	STACK_11, F
$01FE	$2A00			GOTO	$+2
$01FF	$2A03			GOTO	$+4
$0200	$0BFA			DECFSZ	STACK_10, F
$0201	$2A00			GOTO	$-1
$0202	$29FD			GOTO	$-5
$0203	$30C4			MOVLW	196
$0204	$00FA			MOVWF	STACK_10
$0205	$0BFA			DECFSZ	STACK_10, F
$0206	$2A05			GOTO	$-1
$0207	$0000			NOP
$0208	$0000			NOP
;Pic1.pbas,158 :: 		PORTC = mil + 128
$0209	$3080			MOVLW	128
$020A	$0748			ADDWF	FLOC_main+6, 0
$020B	$00F0			MOVWF	STACK_0
$020C	$0849			MOVF	FLOC_main+7, 0
$020D	$1803			BTFSC	STATUS, C
$020E	$3F01			ADDLW	1
$020F	$00F1			MOVWF	STACK_0+1
$0210	$3000			MOVLW	0
$0211	$07F1			ADDWF	STACK_0+1, 1
$0212	$0870			MOVF	STACK_0, 0
$0213	$0087			MOVWF	PORTC
;Pic1.pbas,159 :: 		delay_ms(6)
$0214	$3008			MOVLW	8
$0215	$00FB			MOVWF	STACK_11
$0216	$30FF			MOVLW	255
$0217	$00FA			MOVWF	STACK_10
$0218	$0BFB			DECFSZ	STACK_11, F
$0219	$2A1B			GOTO	$+2
$021A	$2A1E			GOTO	$+4
$021B	$0BFA			DECFSZ	STACK_10, F
$021C	$2A1B			GOTO	$-1
$021D	$2A18			GOTO	$-5
$021E	$30C4			MOVLW	196
$021F	$00FA			MOVWF	STACK_10
$0220	$0BFA			DECFSZ	STACK_10, F
$0221	$2A20			GOTO	$-1
$0222	$0000			NOP
$0223	$0000			NOP
;Pic1.pbas,161 :: 		i = i + 1
$0224	$0834			MOVF	_i, 0
$0225	$3F01			ADDLW	1
$0226	$00F4			MOVWF	STACK_4
$0227	$3000			MOVLW	0
$0228	$1803			BTFSC	STATUS, C
$0229	$3F01			ADDLW	1
$022A	$0735			ADDWF	_i+1, 0
$022B	$00F5			MOVWF	STACK_4+1
$022C	$0874			MOVF	STACK_4, 0
$022D	$00B4			MOVWF	_i
$022E	$0875			MOVF	STACK_4+1, 0
$022F	$00B5			MOVWF	_i+1
;Pic1.pbas,163 :: 		if i > 20 then
$0230	$3080			MOVLW	128
$0231	$00F0			MOVWF	STACK_0
$0232	$3080			MOVLW	128
$0233	$0675			XORWF	STACK_4+1, 0
$0234	$0270			SUBWF	STACK_0, 0
$0235	$1D03			BTFSS	STATUS, Z
$0236	$2A39			GOTO	L_main_9
$0237	$0874			MOVF	STACK_4, 0
$0238	$3C14			SUBLW	20
$0239	$	L_main_9:
$0239	$1803			BTFSC	STATUS, C
$023A	$2A3D			GOTO	Pic1_L_87
$023B	$	Pic1_L_86:
;Pic1.pbas,164 :: 		portB.4 = 1
$023B	$	Pic1_L_89:
$023B	$1606			BSF	PORTB, 4
$023C	$	Pic1_L_90:
$023C	$2A3E			GOTO	Pic1_L_88
;Pic1.pbas,165 :: 		else
$023D	$	Pic1_L_87:
;Pic1.pbas,166 :: 		portB.4 = 0
$023D	$1206			BCF	PORTB, 4
$023E	$	Pic1_L_92:
;Pic1.pbas,167 :: 		end if
$023E	$	Pic1_L_88:
;Pic1.pbas,169 :: 		if i > 999 then
$023E	$3080			MOVLW	128
$023F	$3A03			XORLW	3
$0240	$00F0			MOVWF	STACK_0
$0241	$3080			MOVLW	128
$0242	$0635			XORWF	_i+1, 0
$0243	$0270			SUBWF	STACK_0, 0
$0244	$1D03			BTFSS	STATUS, Z
$0245	$2A48			GOTO	L_main_10
$0246	$0834			MOVF	_i, 0
$0247	$3CE7			SUBLW	231
$0248	$	L_main_10:
$0248	$1803			BTFSC	STATUS, C
$0249	$2A4E			GOTO	Pic1_L_94
$024A	$	Pic1_L_93:
;Pic1.pbas,170 :: 		i = 999
$024A	$30E7			MOVLW	231
$024B	$00B4			MOVWF	_i
$024C	$3003			MOVLW	3
$024D	$00B5			MOVWF	_i+1
$024E	$	Pic1_L_94:
;Pic1.pbas,171 :: 		end if
$024E	$	Pic1_L_95:
;Pic1.pbas,174 :: 		goto executa
$024E	$2827			GOTO	_main_executa
$024F	$2A4F			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$0250		IntToStr
$02F3		Double2Int
$0350		envia
$038F		Div_16x16_S
$03E9		Mul_16x16_S
$0432		NRM3232
$0463		Div_16x16_S_L
$0490		Int2Double
$04AE		Usart_Write_Text
$04C4		USART_Init
$04D9		USART_Write
$04EB		SETIOV3224
$04FA		SETFUN32
$0508		RES032
$0511		FIXSIGN32


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$0004		_main_main:
$0027		_main_executa:
$002E		Pic1_L_8:
$0032		Pic1_L_11:
$003A		L_main_2:
$003C		Pic1_L_14:
$0040		Pic1_L_15:
$0043		Pic1_L_10:
$0043		Pic1_L_12:
$0043		Pic1_L_13:
$0043		Pic1_L_16:
$0043		Pic1_L_9:
$004A		Pic1_L_17:
$004E		Pic1_L_20:
$004F		Pic1_L_18:
$004F		Pic1_L_19:
$004F		Pic1_L_21:
$004F		Pic1_L_22:
$0057		Pic1_L_23:
$005B		Pic1_L_26:
$0063		L_main_3:
$0065		Pic1_L_29:
$006A		Pic1_L_30:
$006E		Pic1_L_24:
$006E		Pic1_L_25:
$006E		Pic1_L_27:
$006E		Pic1_L_28:
$006E		Pic1_L_31:
$0076		Pic1_L_32:
$007A		Pic1_L_35:
$007B		Pic1_L_33:
$007B		Pic1_L_34:
$007B		Pic1_L_36:
$007B		Pic1_L_37:
$0083		Pic1_L_38:
$0087		Pic1_L_41:
$008D		Pic1_L_39:
$008D		Pic1_L_40:
$008D		Pic1_L_42:
$008D		Pic1_L_43:
$0095		Pic1_L_44:
$0099		Pic1_L_47:
$009A		Pic1_L_45:
$009A		Pic1_L_46:
$009A		Pic1_L_48:
$009A		Pic1_L_49:
$00A2		Pic1_L_50:
$00A6		Pic1_L_53:
$00AE		L_main_4:
$00B0		Pic1_L_56:
$00B4		Pic1_L_57:
$00B7		Pic1_L_51:
$00B7		Pic1_L_52:
$00B7		Pic1_L_54:
$00B7		Pic1_L_55:
$00B7		Pic1_L_58:
$00BF		Pic1_L_59:
$00C3		Pic1_L_62:
$00C4		Pic1_L_60:
$00C4		Pic1_L_61:
$00C4		Pic1_L_63:
$00C4		Pic1_L_64:
$00CC		Pic1_L_65:
$00D0		Pic1_L_68:
$00D6		Pic1_L_66:
$00D6		Pic1_L_67:
$00D6		Pic1_L_69:
$00D6		Pic1_L_70:
$00DE		Pic1_L_71:
$00DF		Pic1_L_72:
$00DF		Pic1_L_73:
$00E9		L_main_5:
$00EB		Pic1_L_74:
$00EF		Pic1_L_75:
$00EF		Pic1_L_76:
$00F8		L_main_6:
$00FA		Pic1_L_77:
$00FC		Pic1_L_78:
$00FC		Pic1_L_79:
$0106		L_main_7:
$0108		Pic1_L_80:
$010C		Pic1_L_81:
$010C		Pic1_L_82:
$0115		L_main_8:
$0117		Pic1_L_83:
$0119		Pic1_L_84:
$0119		Pic1_L_85:
$0239		L_main_9:
$023B		Pic1_L_86:
$023B		Pic1_L_89:
$023C		Pic1_L_90:
$023D		Pic1_L_87:
$023E		Pic1_L_88:
$023E		Pic1_L_92:
$0248		L_main_10:
$024A		Pic1_L_93:
$024E		Pic1_L_94:
$024E		Pic1_L_95:
$0250		_inttostr:
$0258		L_IntToStr_4:
$025A		conv_L_56:
$0270		conv_L_57:
$0270		conv_L_58:
$027A		L_IntToStr_5:
$027C		conv_L_60:
$0286		conv_L_61:
$0286		conv_L_62:
$0291		L_IntToStr_6:
$0293		conv_L_63:
$0294		conv_L_64:
$0294		conv_L_65:
$029D		L_IntToStr_7:
$029F		conv_L_66:
$02A0		conv_L_67:
$02A0		conv_L_68:
$02AA		L_IntToStr_8:
$02AC		conv_L_69:
$02AD		conv_L_70:
$02AD		conv_L_71:
$02B7		L_IntToStr_9:
$02B9		conv_L_72:
$02BA		conv_L_73:
$02BA		conv_L_74:
$02CB		conv_L_77:
$02ED		conv_L_78:
$02F0		conv_L_81:
$02F2		conv_L_55:
$02F2		conv_L_82:
$02F2		conv_L_83:
$02F3		_double2int:
$02F5		INT3216:
$0316		TSHIFT3216:
$0319		SHIFT3216:
$031E		SHIFT3216OK:
$0328		INT3216OK:
$0330		IRES016:
$0333		SETIOV16:
$033F		JPJSETIOV3224:
$0342		INT3216EOK:
$0345		INT3216EER:
$0347		INT3216EEE:
$034B		L_DOUBLE2INT_0:
$034F		math_double_L_14:
$0350		_envia:
$0358		L_envia_0:
$035A		Pic1_L_1:
$0370		Pic1_L_2:
$0370		Pic1_L_3:
$0376		L_envia_1:
$0378		Pic1_L_4:
$038E		Pic1_L_0:
$038E		Pic1_L_5:
$038E		Pic1_L_6:
$038F		_div_16x16_s:
$03E8		math_L_7:
$03E9		_mul_16x16_s:
$0431		math_L_5:
$0432		_nrm3232:
$0449		NORM3232:
$044F		NORM3232A:
$0457		JPNRES032:
$045B		JPNSETFUN32:
$045F		JMPNFIXSIGN32:
$0462		math_double_L_5:
$0462		NORM32EEE:
$0463		_div_16x16_s_l:
$048F		math_L_6:
$0490		_int2double:
$0499		FLO1632:
$04A6		FLO1632EEE:
$04AD		math_double_L_18:
$04AE		_usart_write_text:
$04B5		USART_b75_L_47:
$04C3		USART_b75_L_45:
$04C3		USART_b75_L_48:
$04C4		_usart_init:
$04C4		USART_b75_L_1:
$04C7		USART_b75_L_2:
$04CA		USART_b75_L_3:
$04CC		USART_b75_L_4:
$04CC		USART_b75_L_5:
$04CD		USART_b75_L_6:
$04CD		USART_b75_L_8:
$04D8		USART_b75_L_0:
$04D8		USART_b75_L_9:
$04D9		_usart_write:
$04D9		USART_b75_L_14:
$04E7		USART_b75_L_15:
$04EA		USART_b75_L_12:
$04EB		_setiov3224:
$04F8		SETIOV3224EEE:
$04F9		math_double_L_11:
$04FA		_setfun32:
$0506		SETFUN32EEE:
$0507		math_double_L_4:
$0508		_res032:
$0510		math_double_L_3:
$0511		_fixsign32:
$0516		math_double_L_2:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0006		PORTB
$0007		PORTC
$000A		PCLATH
$000B		INTCON
$000C		PIR1
$0018		RCSTA
$0019		TXREG
$001A		RCREG
$0020		math_double___math_tempbd
$0021		_priorit
$0023		_incn
$0025		_txt
$002C		_incp
$002E		_b0
$002F		_b1
$0030		_b2
$0031		_b3
$0032		_b4
$0033		_b5
$0034		_i
$0036		_valor
$003A		_mil
$003C		_cen
$003E		_dez
$0040		_uni
$0042		?T7__main
$004C		?envia_Local_Text
$004C		FARG_USART_Init
$0050		FARG_IntToStr
$0050		FARG_Usart_Write_Text
$0051		_usart_write_text_local_i
$0052		_usart_write_text_local_data
$0052		FARG_IntToStr+2
$0053		_inttostr_local_len
$0054		_inttostr_local_negative
$0055		FARG_USART_Write
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0098		TXSTA
$0099		SPBRG
$011E		ANSEL
$011F		ANSELH


