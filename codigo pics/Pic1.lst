;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 17/04/2020 23:10:12
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$00C6	$	_usart_data_ready:
;USART_b75.ppas,48 :: 		
;USART_b75.ppas,50 :: 		
$00C6	$1303			BCF	STATUS, RP1
$00C7	$1283			BCF	STATUS, RP0
$00C8	$080C			MOVF	PIR1, 0
$00C9	$00F1			MOVWF	STACK_1
$00CA	$3000			MOVLW	0
$00CB	$1AF1			BTFSC	STACK_1, 5
$00CC	$3001			MOVLW	1
$00CD	$00F1			MOVWF	STACK_1
$00CE	$0871			MOVF	STACK_1, 0
$00CF	$00AB			MOVWF	_usart_data_ready_local_result
$00D0	$	USART_b75_L_18:
;USART_b75.ppas,51 :: 		
$00D0	$082B			MOVF	_usart_data_ready_local_result, 0
$00D1	$00F0			MOVWF	STACK_0
$00D2	$0008			RETURN
$00B3	$	_usart_read:
;USART_b75.ppas,54 :: 		
;USART_b75.ppas,55 :: 		
$00B3	$1303			BCF	STATUS, RP1
$00B4	$1283			BCF	STATUS, RP0
$00B5	$081A			MOVF	RCREG, 0
$00B6	$00AB			MOVWF	_usart_read_local_result
;USART_b75.ppas,61 :: 		
$00B7	$0818			MOVF	RCSTA, 0
$00B8	$00F1			MOVWF	STACK_1
$00B9	$3000			MOVLW	0
$00BA	$18F1			BTFSC	STACK_1, 1
$00BB	$3001			MOVLW	1
$00BC	$00F1			MOVWF	STACK_1
$00BD	$0871			MOVF	STACK_1, 0
$00BE	$3A01			XORLW	1
$00BF	$1D03			BTFSS	STATUS, Z
$00C0	$28C3			GOTO	USART_b75_L_21
$00C1	$	USART_b75_L_20:
;USART_b75.ppas,63 :: 		
$00C1	$1218			BCF	RCSTA, 4
$00C2	$	USART_b75_L_24:
;USART_b75.ppas,64 :: 		
$00C2	$	USART_b75_L_25:
$00C2	$1618			BSF	RCSTA, 4
$00C3	$	USART_b75_L_26:
;USART_b75.ppas,65 :: 		
$00C3	$	USART_b75_L_21:
$00C3	$	USART_b75_L_22:
$00C3	$	USART_b75_L_19:
;USART_b75.ppas,66 :: 		
$00C3	$082B			MOVF	_usart_read_local_result, 0
$00C4	$00F0			MOVWF	STACK_0
$00C5	$0008			RETURN
$009E	$	_usart_init:
;USART_b75.ppas,22 :: 		
;USART_b75.ppas,24 :: 		
$009E	$	USART_b75_L_1:
$009E	$1303			BCF	STATUS, RP1
$009F	$1683			BSF	STATUS, RP0
$00A0	$1698			BSF	TXSTA, 5
$00A1	$	USART_b75_L_2:
;USART_b75.ppas,25 :: 		
$00A1	$3090			MOVLW	144
$00A2	$1283			BCF	STATUS, RP0
$00A3	$0098			MOVWF	RCSTA
;USART_b75.ppas,31 :: 		
$00A4	$	USART_b75_L_3:
$00A4	$1683			BSF	STATUS, RP0
$00A5	$1686			BSF	TRISB, 5
$00A6	$	USART_b75_L_4:
;USART_b75.ppas,32 :: 		
$00A6	$	USART_b75_L_5:
$00A6	$1786			BSF	TRISB, 7
$00A7	$	USART_b75_L_6:
;USART_b75.ppas,35 :: 		
$00A7	$	USART_b75_L_8:
$00A7	$1283			BCF	STATUS, RP0
$00A8	$080C			MOVF	PIR1, 0
$00A9	$00F1			MOVWF	STACK_1
$00AA	$3000			MOVLW	0
$00AB	$1AF1			BTFSC	STACK_1, 5
$00AC	$3001			MOVLW	1
$00AD	$00F1			MOVWF	STACK_1
$00AE	$0871			MOVF	STACK_1, 0
$00AF	$3A01			XORLW	1
$00B0	$1903			BTFSC	STATUS, Z
$00B1	$28A7			GOTO	USART_b75_L_8
;USART_b75.ppas,36 :: 		
$00B2	$	USART_b75_L_9:
$00B2	$	USART_b75_L_0:
;USART_b75.ppas,37 :: 		
$00B2	$0008			RETURN
$0004	$	_main:
;Pic1.pbas,19 :: 		main:
$0004	$	_main_main:
;Pic1.pbas,20 :: 		TRISA=%11111111
$0004	$30FF			MOVLW	255
$0005	$1303			BCF	STATUS, RP1
$0006	$1683			BSF	STATUS, RP0
$0007	$0085			MOVWF	TRISA
;Pic1.pbas,21 :: 		TRISB=%01111111
$0008	$307F			MOVLW	127
$0009	$0086			MOVWF	TRISB
;Pic1.pbas,22 :: 		TRISC=%00000000
$000A	$0187			CLRF	TRISC, 1
;Pic1.pbas,23 :: 		INTCON=%00000000
$000B	$018B			CLRF	INTCON, 1
;Pic1.pbas,24 :: 		ANSEL=%00000000
$000C	$1703			BSF	STATUS, RP1
$000D	$1283			BCF	STATUS, RP0
$000E	$019E			CLRF	ANSEL, 1
;Pic1.pbas,25 :: 		ANSELH=%00000000
$000F	$019F			CLRF	ANSELH, 1
;Pic1.pbas,27 :: 		Usart_Init(9600)
$0010	$3019			MOVLW	25
$0011	$1303			BCF	STATUS, RP1
$0012	$1683			BSF	STATUS, RP0
$0013	$0099			MOVWF	SPBRG
$0014	$1518			BSF	TXSTA, BRGH
$0015	$209E			CALL	_usart_init
;Pic1.pbas,28 :: 		PORTC=0
$0016	$0187			CLRF	PORTC, 1
;Pic1.pbas,29 :: 		i=0
$0017	$01A0			CLRF	_i
$0018	$01A1			CLRF	_i+1
;Pic1.pbas,30 :: 		b0=false
$0019	$01A2			CLRF	_b0, 1
;Pic1.pbas,31 :: 		b1=false
$001A	$01A3			CLRF	_b1, 1
;Pic1.pbas,32 :: 		b2=false
$001B	$01A4			CLRF	_b2, 1
;Pic1.pbas,33 :: 		b3=false
$001C	$01A5			CLRF	_b3, 1
;Pic1.pbas,34 :: 		b4=false
$001D	$01A6			CLRF	_b4, 1
;Pic1.pbas,35 :: 		b5=false
$001E	$01A7			CLRF	_b5, 1
;Pic1.pbas,36 :: 		b6=false
$001F	$01A8			CLRF	_b6, 1
;Pic1.pbas,38 :: 		executa:
$0020	$	_main_executa:
;Pic1.pbas,39 :: 		if USART_Data_Ready() > 0 then
$0020	$20C6			CALL	_usart_data_ready
$0021	$0870			MOVF	STACK_0, 0
$0022	$3C00			SUBLW	0
$0023	$1803			BTFSC	STATUS, C
$0024	$2828			GOTO	Pic1_L_4
$0025	$	Pic1_L_3:
;Pic1.pbas,40 :: 		info = USART_Read()
$0025	$20B3			CALL	_usart_read
$0026	$0870			MOVF	STACK_0, 0
$0027	$00A9			MOVWF	_info
$0028	$	Pic1_L_4:
;Pic1.pbas,42 :: 		end if
$0028	$	Pic1_L_5:
;Pic1.pbas,45 :: 		if testbit(portA,0) = 1 then
$0028	$3001			MOVLW	1
$0029	$0505			ANDWF	PORTA, 0
$002A	$00F1			MOVWF	STACK_1
$002B	$0871			MOVF	STACK_1, 0
$002C	$3A01			XORLW	1
$002D	$1D03			BTFSS	STATUS, Z
$002E	$2838			GOTO	Pic1_L_7
$002F	$	Pic1_L_6:
;Pic1.pbas,46 :: 		if b0 = false then
$002F	$0822			MOVF	_b0, 0
$0030	$3A00			XORLW	0
$0031	$1D03			BTFSS	STATUS, Z
$0032	$2838			GOTO	Pic1_L_10
$0033	$	Pic1_L_9:
;Pic1.pbas,47 :: 		b0 = true
$0033	$30FF			MOVLW	255
$0034	$00A2			MOVWF	_b0
;Pic1.pbas,48 :: 		i = i + 1
$0035	$0AA0			INCF	_i, 1
$0036	$1903			BTFSC	STATUS, Z
$0037	$0AA1			INCF	_i+1, 1
$0038	$	Pic1_L_10:
;Pic1.pbas,49 :: 		end if
$0038	$	Pic1_L_11:
$0038	$	Pic1_L_7:
;Pic1.pbas,50 :: 		end if
$0038	$	Pic1_L_8:
;Pic1.pbas,51 :: 		if testbit(portA,0) = 0 then
$0038	$3001			MOVLW	1
$0039	$0505			ANDWF	PORTA, 0
$003A	$00F1			MOVWF	STACK_1
$003B	$0871			MOVF	STACK_1, 0
$003C	$3A00			XORLW	0
$003D	$1D03			BTFSS	STATUS, Z
$003E	$2844			GOTO	Pic1_L_13
$003F	$	Pic1_L_12:
;Pic1.pbas,52 :: 		if b0 = true then
$003F	$0822			MOVF	_b0, 0
$0040	$3AFF			XORLW	255
$0041	$1D03			BTFSS	STATUS, Z
$0042	$2844			GOTO	Pic1_L_16
$0043	$	Pic1_L_15:
;Pic1.pbas,53 :: 		b0 = false
$0043	$01A2			CLRF	_b0, 1
$0044	$	Pic1_L_16:
;Pic1.pbas,54 :: 		end if
$0044	$	Pic1_L_17:
$0044	$	Pic1_L_13:
;Pic1.pbas,55 :: 		end if
$0044	$	Pic1_L_14:
;Pic1.pbas,58 :: 		if testbit(portA,1) = 1 then
$0044	$3000			MOVLW	0
$0045	$1885			BTFSC	PORTA, 1
$0046	$3001			MOVLW	1
$0047	$00F1			MOVWF	STACK_1
$0048	$0871			MOVF	STACK_1, 0
$0049	$3A01			XORLW	1
$004A	$1D03			BTFSS	STATUS, Z
$004B	$2856			GOTO	Pic1_L_19
$004C	$	Pic1_L_18:
;Pic1.pbas,59 :: 		if b1 = false then
$004C	$0823			MOVF	_b1, 0
$004D	$3A00			XORLW	0
$004E	$1D03			BTFSS	STATUS, Z
$004F	$2856			GOTO	Pic1_L_22
$0050	$	Pic1_L_21:
;Pic1.pbas,60 :: 		b1 = true
$0050	$30FF			MOVLW	255
$0051	$00A3			MOVWF	_b1
;Pic1.pbas,61 :: 		i = i - 1
$0052	$3001			MOVLW	1
$0053	$02A0			SUBWF	_i, 1
$0054	$1C03			BTFSS	STATUS, C
$0055	$03A1			DECF	_i+1, 1
$0056	$	Pic1_L_22:
;Pic1.pbas,63 :: 		end if
$0056	$	Pic1_L_23:
$0056	$	Pic1_L_19:
;Pic1.pbas,64 :: 		end if
$0056	$	Pic1_L_20:
;Pic1.pbas,65 :: 		if testbit(portA,1) = 0 then
$0056	$3000			MOVLW	0
$0057	$1885			BTFSC	PORTA, 1
$0058	$3001			MOVLW	1
$0059	$00F1			MOVWF	STACK_1
$005A	$0871			MOVF	STACK_1, 0
$005B	$3A00			XORLW	0
$005C	$1D03			BTFSS	STATUS, Z
$005D	$2863			GOTO	Pic1_L_25
$005E	$	Pic1_L_24:
;Pic1.pbas,66 :: 		if b1 = true then
$005E	$0823			MOVF	_b1, 0
$005F	$3AFF			XORLW	255
$0060	$1D03			BTFSS	STATUS, Z
$0061	$2863			GOTO	Pic1_L_28
$0062	$	Pic1_L_27:
;Pic1.pbas,67 :: 		b1 = false
$0062	$01A3			CLRF	_b1, 1
$0063	$	Pic1_L_28:
;Pic1.pbas,68 :: 		end if
$0063	$	Pic1_L_29:
$0063	$	Pic1_L_25:
;Pic1.pbas,69 :: 		end if
$0063	$	Pic1_L_26:
;Pic1.pbas,72 :: 		if testbit(portA,5) = 1 then
$0063	$3000			MOVLW	0
$0064	$1A85			BTFSC	PORTA, 5
$0065	$3001			MOVLW	1
$0066	$00F1			MOVWF	STACK_1
$0067	$0871			MOVF	STACK_1, 0
$0068	$3A01			XORLW	1
$0069	$1D03			BTFSS	STATUS, Z
$006A	$2879			GOTO	Pic1_L_31
$006B	$	Pic1_L_30:
;Pic1.pbas,73 :: 		if b5 = false then
$006B	$0827			MOVF	_b5, 0
$006C	$3A00			XORLW	0
$006D	$1D03			BTFSS	STATUS, Z
$006E	$2879			GOTO	Pic1_L_34
$006F	$	Pic1_L_33:
;Pic1.pbas,74 :: 		b5 = true
$006F	$30FF			MOVLW	255
$0070	$00A7			MOVWF	_b5
;Pic1.pbas,75 :: 		if ba5 = true then
$0071	$082A			MOVF	_ba5, 0
$0072	$3AFF			XORLW	255
$0073	$1D03			BTFSS	STATUS, Z
$0074	$2877			GOTO	Pic1_L_37
$0075	$	Pic1_L_36:
;Pic1.pbas,76 :: 		ba5 = false
$0075	$01AA			CLRF	_ba5, 1
$0076	$2879			GOTO	Pic1_L_38
;Pic1.pbas,77 :: 		else
$0077	$	Pic1_L_37:
;Pic1.pbas,78 :: 		ba5 = true
$0077	$30FF			MOVLW	255
$0078	$00AA			MOVWF	_ba5
;Pic1.pbas,79 :: 		end if
$0079	$	Pic1_L_38:
$0079	$	Pic1_L_34:
;Pic1.pbas,80 :: 		end if
$0079	$	Pic1_L_35:
$0079	$	Pic1_L_31:
;Pic1.pbas,81 :: 		end if
$0079	$	Pic1_L_32:
;Pic1.pbas,82 :: 		if testbit(portA,5) = 0 then
$0079	$3000			MOVLW	0
$007A	$1A85			BTFSC	PORTA, 5
$007B	$3001			MOVLW	1
$007C	$00F1			MOVWF	STACK_1
$007D	$0871			MOVF	STACK_1, 0
$007E	$3A00			XORLW	0
$007F	$1D03			BTFSS	STATUS, Z
$0080	$2882			GOTO	Pic1_L_40
$0081	$	Pic1_L_39:
;Pic1.pbas,83 :: 		b5 = false
$0081	$01A7			CLRF	_b5, 1
$0082	$	Pic1_L_40:
;Pic1.pbas,84 :: 		end if
$0082	$	Pic1_L_41:
;Pic1.pbas,86 :: 		if ((ba5 = true) or (ba5 = true)) then
$0082	$082A			MOVF	_ba5, 0
$0083	$3AFF			XORLW	255
$0084	$30FF			MOVLW	255
$0085	$1D03			BTFSS	STATUS, Z
$0086	$3000			MOVLW	0
$0087	$00F0			MOVWF	STACK_0
$0088	$0870			MOVF	STACK_0, 0
$0089	$04F0			IORWF	STACK_0, 1
$008A	$1903			BTFSC	STATUS, Z
$008B	$288D			GOTO	Pic1_L_43
$008C	$	Pic1_L_42:
$008C	$288D			GOTO	Pic1_L_44
;Pic1.pbas,88 :: 		else
$008D	$	Pic1_L_43:
;Pic1.pbas,90 :: 		end if
$008D	$	Pic1_L_44:
;Pic1.pbas,92 :: 		if i > 999 then
$008D	$3080			MOVLW	128
$008E	$3A03			XORLW	3
$008F	$00F0			MOVWF	STACK_0
$0090	$3080			MOVLW	128
$0091	$0621			XORWF	_i+1, 0
$0092	$0270			SUBWF	STACK_0, 0
$0093	$1D03			BTFSS	STATUS, Z
$0094	$2897			GOTO	L_main_0
$0095	$0820			MOVF	_i, 0
$0096	$3CE7			SUBLW	231
$0097	$	L_main_0:
$0097	$1803			BTFSC	STATUS, C
$0098	$289B			GOTO	Pic1_L_46
$0099	$	Pic1_L_45:
;Pic1.pbas,93 :: 		i = 0
$0099	$01A0			CLRF	_i
$009A	$01A1			CLRF	_i+1
$009B	$	Pic1_L_46:
;Pic1.pbas,94 :: 		end if
$009B	$	Pic1_L_47:
;Pic1.pbas,96 :: 		info = 0
$009B	$01A9			CLRF	_info, 1
;Pic1.pbas,98 :: 		goto executa
$009C	$2820			GOTO	_main_executa
$009D	$289D			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$009E		USART_Init
$00B3		USART_Read
$00C6		USART_Data_Ready


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$0004		_main_main:
$0020		_main_executa:
$0025		Pic1_L_3:
$0028		Pic1_L_4:
$0028		Pic1_L_5:
$002F		Pic1_L_6:
$0033		Pic1_L_9:
$0038		Pic1_L_10:
$0038		Pic1_L_11:
$0038		Pic1_L_7:
$0038		Pic1_L_8:
$003F		Pic1_L_12:
$0043		Pic1_L_15:
$0044		Pic1_L_13:
$0044		Pic1_L_14:
$0044		Pic1_L_16:
$0044		Pic1_L_17:
$004C		Pic1_L_18:
$0050		Pic1_L_21:
$0056		Pic1_L_19:
$0056		Pic1_L_20:
$0056		Pic1_L_22:
$0056		Pic1_L_23:
$005E		Pic1_L_24:
$0062		Pic1_L_27:
$0063		Pic1_L_25:
$0063		Pic1_L_26:
$0063		Pic1_L_28:
$0063		Pic1_L_29:
$006B		Pic1_L_30:
$006F		Pic1_L_33:
$0075		Pic1_L_36:
$0077		Pic1_L_37:
$0079		Pic1_L_31:
$0079		Pic1_L_32:
$0079		Pic1_L_34:
$0079		Pic1_L_35:
$0079		Pic1_L_38:
$0081		Pic1_L_39:
$0082		Pic1_L_40:
$0082		Pic1_L_41:
$008C		Pic1_L_42:
$008D		Pic1_L_43:
$008D		Pic1_L_44:
$0097		L_main_0:
$0099		Pic1_L_45:
$009B		Pic1_L_46:
$009B		Pic1_L_47:
$009E		_usart_init:
$009E		USART_b75_L_1:
$00A1		USART_b75_L_2:
$00A4		USART_b75_L_3:
$00A6		USART_b75_L_4:
$00A6		USART_b75_L_5:
$00A7		USART_b75_L_6:
$00A7		USART_b75_L_8:
$00B2		USART_b75_L_0:
$00B2		USART_b75_L_9:
$00B3		_usart_read:
$00C1		USART_b75_L_20:
$00C2		USART_b75_L_24:
$00C2		USART_b75_L_25:
$00C3		USART_b75_L_19:
$00C3		USART_b75_L_21:
$00C3		USART_b75_L_22:
$00C3		USART_b75_L_26:
$00C6		_usart_data_ready:
$00D0		USART_b75_L_18:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0007		PORTC
$000A		PCLATH
$000B		INTCON
$000C		PIR1
$0018		RCSTA
$001A		RCREG
$0020		_i
$0022		_b0
$0023		_b1
$0024		_b2
$0025		_b3
$0026		_b4
$0027		_b5
$0028		_b6
$0029		_info
$002A		_ba5
$002B		_usart_data_ready_local_result
$002B		_usart_read_local_result
$002B		FARG_USART_Init
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0098		TXSTA
$0099		SPBRG
$011E		ANSEL
$011F		ANSELH


