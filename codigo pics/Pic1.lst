;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 24/04/2020 23:00:48
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$01D6	$	_div_16x16_s_l:
$01D6	$1303			BCF	STATUS, RP1
$01D7	$1283			BCF	STATUS, RP0
;math.ppas,291 :: 		
;math.ppas,293 :: 		
$01D8	$0D71			RLF	STACK_1, W
;math.ppas,294 :: 		
$01D9	$0DF8			RLF	STACK_8, F
;math.ppas,295 :: 		
$01DA	$0DF9			RLF	STACK_9, F
;math.ppas,296 :: 		
$01DB	$0874			MOVF	STACK_4, W
;math.ppas,297 :: 		
$01DC	$02F8			SUBWF	STACK_8, F
;math.ppas,298 :: 		
$01DD	$0875			MOVF	STACK_5, W
;math.ppas,299 :: 		
$01DE	$1C03			BTFSS	STATUS, C
;math.ppas,300 :: 		
$01DF	$0F75			INCFSZ	STACK_5, W
;math.ppas,301 :: 		
$01E0	$02F9			SUBWF	STACK_9, F
;math.ppas,302 :: 		
$01E1	$0DF0			RLF	STACK_0, F
;math.ppas,304 :: 		
$01E2	$0DF1			RLF	STACK_1, F
;math.ppas,305 :: 		
$01E3	$300F			MOVLW	15
;math.ppas,307 :: 		
$01E4	$00FC			MOVWF	STACK_12
;math.ppas,308 :: 		
$01E5	$0D71			RLF	STACK_1, W
;math.ppas,309 :: 		
$01E6	$0DF8			RLF	STACK_8, F
;math.ppas,310 :: 		
$01E7	$0DF9			RLF	STACK_9, F
;math.ppas,312 :: 		
$01E8	$0874			MOVF	STACK_4, W
;math.ppas,313 :: 		
$01E9	$1C70			BTFSS	STACK_0, 0
;math.ppas,314 :: 		
$01EA	$29F1			GOTO	$+7
;math.ppas,315 :: 		
$01EB	$02F8			SUBWF	STACK_8, F
;math.ppas,316 :: 		
$01EC	$0875			MOVF	STACK_5, W
;math.ppas,317 :: 		
$01ED	$1C03			BTFSS	STATUS, C
;math.ppas,318 :: 		
$01EE	$0F75			INCFSZ	STACK_5, W
;math.ppas,319 :: 		
$01EF	$02F9			SUBWF	STACK_9, F
;math.ppas,321 :: 		
$01F0	$29F6			GOTO	$+6
;math.ppas,322 :: 		
$01F1	$07F8			ADDWF	STACK_8, F
;math.ppas,323 :: 		
$01F2	$0875			MOVF	STACK_5, W
;math.ppas,324 :: 		
$01F3	$1803			BTFSC	STATUS, C
;math.ppas,325 :: 		
$01F4	$0F75			INCFSZ	STACK_5, W
;math.ppas,327 :: 		
$01F5	$07F9			ADDWF	STACK_9, F
;math.ppas,328 :: 		
$01F6	$0DF0			RLF	STACK_0, F
;math.ppas,330 :: 		
$01F7	$0DF1			RLF	STACK_1, F
;math.ppas,331 :: 		
$01F8	$0BFC			DECFSZ	STACK_12, F
;math.ppas,333 :: 		
$01F9	$29E5			GOTO	$-20
;math.ppas,334 :: 		
$01FA	$1870			BTFSC	STACK_0, 0
;math.ppas,335 :: 		
$01FB	$2A02			GOTO	$+7
;math.ppas,336 :: 		
$01FC	$0874			MOVF	STACK_4, W
;math.ppas,337 :: 		
$01FD	$07F8			ADDWF	STACK_8, F
;math.ppas,338 :: 		
$01FE	$0875			MOVF	STACK_5, W
;math.ppas,339 :: 		
$01FF	$1803			BTFSC	STATUS, C
;math.ppas,340 :: 		
$0200	$0F75			INCFSZ	STACK_5, W
;math.ppas,341 :: 		
$0201	$07F9			ADDWF	STACK_9, F
;math.ppas,342 :: 		
$0202	$	math_L_6:
;math.ppas,343 :: 		
$0202	$0008			RETURN
$017C	$	_div_16x16_s:
$017C	$1303			BCF	STATUS, RP1
$017D	$1283			BCF	STATUS, RP0
;math.ppas,346 :: 		
;math.ppas,348 :: 		
$017E	$01FD			CLRF	STACK_13
;math.ppas,349 :: 		
$017F	$01F9			CLRF	STACK_9
;math.ppas,350 :: 		
$0180	$01F8			CLRF	STACK_8
;math.ppas,351 :: 		
$0181	$0871			MOVF	STACK_1, W
;math.ppas,352 :: 		
$0182	$0470			IORWF	STACK_0, W
;math.ppas,353 :: 		
$0183	$1903			BTFSC	STATUS, Z
;math.ppas,355 :: 		
$0184	$3400			RETLW	0
;math.ppas,356 :: 		
$0185	$0871			MOVF	STACK_1, W
;math.ppas,357 :: 		
$0186	$0675			XORWF	STACK_5, W
;math.ppas,358 :: 		
$0187	$00FA			MOVWF	STACK_10
;math.ppas,359 :: 		
$0188	$1BFA			BTFSC	STACK_10, 7
;math.ppas,361 :: 		
$0189	$09FD			COMF	STACK_13, F
;math.ppas,363 :: 		
$018A	$01FB			CLRF	STACK_11
;math.ppas,364 :: 		
$018B	$1FF5			BTFSS	STACK_5, 7
;math.ppas,366 :: 		
$018C	$2992			GOTO	$+6
;math.ppas,367 :: 		
$018D	$09F4			COMF	STACK_4, F
;math.ppas,368 :: 		
$018E	$09F5			COMF	STACK_5, F
;math.ppas,369 :: 		
$018F	$0AF4			INCF	STACK_4, F
;math.ppas,370 :: 		
$0190	$1903			BTFSC	STATUS, Z
;math.ppas,372 :: 		
$0191	$0AF5			INCF	STACK_5, F
;math.ppas,373 :: 		
$0192	$1FF1			BTFSS	STACK_1, 7
;math.ppas,375 :: 		
$0193	$2999			GOTO	$+6
;math.ppas,376 :: 		
$0194	$09F0			COMF	STACK_0, F
;math.ppas,377 :: 		
$0195	$09F1			COMF	STACK_1, F
;math.ppas,378 :: 		
$0196	$0AF0			INCF	STACK_0, F
;math.ppas,379 :: 		
$0197	$1903			BTFSC	STATUS, Z
;math.ppas,381 :: 		
$0198	$0AF1			INCF	STACK_1, F
;math.ppas,382 :: 		
$0199	$0871			MOVF	STACK_1, W
;math.ppas,383 :: 		
$019A	$0475			IORWF	STACK_5, W
;math.ppas,384 :: 		
$019B	$00FA			MOVWF	STACK_10
;math.ppas,385 :: 		
$019C	$1BFA			BTFSC	STACK_10, 7
;math.ppas,386 :: 		
$019D	$29AE			GOTO	$+17
;math.ppas,388 :: 		
$019E	$21D6			CALL	_div_16x16_s_l
;math.ppas,390 :: 		
$019F	$187B			BTFSC	STACK_11, 0
;math.ppas,392 :: 		
$01A0	$29C1			GOTO	$+33
;math.ppas,393 :: 		
$01A1	$1FFD			BTFSS	STACK_13, 7
;math.ppas,395 :: 		
$01A2	$3400			RETLW	0
;math.ppas,396 :: 		
$01A3	$09F0			COMF	STACK_0, F
;math.ppas,397 :: 		
$01A4	$09F1			COMF	STACK_1, F
;math.ppas,398 :: 		
$01A5	$0AF0			INCF	STACK_0, F
;math.ppas,399 :: 		
$01A6	$1903			BTFSC	STATUS, Z
;math.ppas,401 :: 		
$01A7	$0AF1			INCF	STACK_1, F
;math.ppas,402 :: 		
$01A8	$09F8			COMF	STACK_8, F
;math.ppas,403 :: 		
$01A9	$09F9			COMF	STACK_9, F
;math.ppas,404 :: 		
$01AA	$0AF8			INCF	STACK_8, F
;math.ppas,405 :: 		
$01AB	$1903			BTFSC	STATUS, Z
;math.ppas,407 :: 		
$01AC	$0AF9			INCF	STACK_9, F
;math.ppas,409 :: 		
$01AD	$3400			RETLW	0
;math.ppas,410 :: 		
$01AE	$1FF5			BTFSS	STACK_5, 7
;math.ppas,411 :: 		
$01AF	$29BD			GOTO	$+14
;math.ppas,412 :: 		
$01B0	$1BF1			BTFSC	STACK_1, 7
;math.ppas,413 :: 		
$01B1	$29B9			GOTO	$+8
;math.ppas,414 :: 		
$01B2	$0871			MOVF	STACK_1, W
;math.ppas,415 :: 		
$01B3	$00F9			MOVWF	STACK_9
;math.ppas,416 :: 		
$01B4	$0870			MOVF	STACK_0, W
;math.ppas,417 :: 		
$01B5	$00F8			MOVWF	STACK_8
;math.ppas,418 :: 		
$01B6	$01F1			CLRF	STACK_1
;math.ppas,419 :: 		
$01B7	$01F0			CLRF	STACK_0
;math.ppas,420 :: 		
$01B8	$29A1			GOTO	$-23
;math.ppas,421 :: 		
$01B9	$01F1			CLRF	STACK_1
;math.ppas,422 :: 		
$01BA	$01F0			CLRF	STACK_0
;math.ppas,423 :: 		
$01BB	$0AF0			INCF	STACK_0, F
;math.ppas,425 :: 		
$01BC	$3400			RETLW	0
;math.ppas,426 :: 		
$01BD	$09F1			COMF	STACK_1, F
;math.ppas,427 :: 		
$01BE	$09F0			COMF	STACK_0, F
;math.ppas,428 :: 		
$01BF	$0AFB			INCF	STACK_11, F
;math.ppas,430 :: 		
$01C0	$299E			GOTO	$-34
;math.ppas,431 :: 		
$01C1	$0AF8			INCF	STACK_8, F
;math.ppas,432 :: 		
$01C2	$1903			BTFSC	STATUS, Z
;math.ppas,433 :: 		
$01C3	$0AF9			INCF	STACK_9, F
;math.ppas,434 :: 		
$01C4	$0874			MOVF	STACK_4, W
;math.ppas,435 :: 		
$01C5	$0278			SUBWF	STACK_8, W
;math.ppas,436 :: 		
$01C6	$1D03			BTFSS	STATUS, Z
;math.ppas,437 :: 		
$01C7	$29A1			GOTO	$-38
;math.ppas,438 :: 		
$01C8	$0875			MOVF	STACK_5, W
;math.ppas,439 :: 		
$01C9	$0279			SUBWF	STACK_9, W
;math.ppas,440 :: 		
$01CA	$1D03			BTFSS	STATUS, Z
;math.ppas,441 :: 		
$01CB	$29A1			GOTO	$-42
;math.ppas,442 :: 		
$01CC	$01F9			CLRF	STACK_9
;math.ppas,443 :: 		
$01CD	$01F8			CLRF	STACK_8
;math.ppas,444 :: 		
$01CE	$0AF0			INCF	STACK_0, F
;math.ppas,445 :: 		
$01CF	$1903			BTFSC	STATUS, Z
;math.ppas,446 :: 		
$01D0	$0AF1			INCF	STACK_1, F
;math.ppas,447 :: 		
$01D1	$1FF1			BTFSS	STACK_1, 7
;math.ppas,448 :: 		
$01D2	$29A1			GOTO	$-49
;math.ppas,449 :: 		
$01D3	$0000			NOP
;math.ppas,450 :: 		
$01D4	$34FF			RETLW	255
;math.ppas,451 :: 		
$01D5	$	math_L_7:
;math.ppas,452 :: 		
$01D5	$0008			RETURN
$0241	$	_usart_write:
;USART_b75.ppas,40 :: 		
;USART_b75.ppas,42 :: 		
$0241	$	USART_b75_L_14:
$0241	$1303			BCF	STATUS, RP1
$0242	$1683			BSF	STATUS, RP0
$0243	$0818			MOVF	TXSTA, 0
$0244	$00F1			MOVWF	STACK_1
$0245	$3000			MOVLW	0
$0246	$18F1			BTFSC	STACK_1, 1
$0247	$3001			MOVLW	1
$0248	$00F1			MOVWF	STACK_1
$0249	$0871			MOVF	STACK_1, 0
$024A	$3A00			XORLW	0
$024B	$1D03			BTFSS	STATUS, Z
$024C	$2A4F			GOTO	USART_b75_L_15
;USART_b75.ppas,43 :: 		
$024D	$0000			NOP
$024E	$2A41			GOTO	USART_b75_L_14
$024F	$	USART_b75_L_15:
;USART_b75.ppas,44 :: 		
$024F	$1283			BCF	STATUS, RP0
$0250	$084B			MOVF	FARG_USART_Write, 0
$0251	$0099			MOVWF	TXREG
$0252	$	USART_b75_L_12:
;USART_b75.ppas,45 :: 		
$0252	$0008			RETURN
$0253	$	_usart_data_ready:
;USART_b75.ppas,48 :: 		
;USART_b75.ppas,50 :: 		
$0253	$1303			BCF	STATUS, RP1
$0254	$1283			BCF	STATUS, RP0
$0255	$080C			MOVF	PIR1, 0
$0256	$00F1			MOVWF	STACK_1
$0257	$3000			MOVLW	0
$0258	$1AF1			BTFSC	STACK_1, 5
$0259	$3001			MOVLW	1
$025A	$00F1			MOVWF	STACK_1
$025B	$0871			MOVF	STACK_1, 0
$025C	$00C6			MOVWF	_usart_data_ready_local_result
$025D	$	USART_b75_L_18:
;USART_b75.ppas,51 :: 		
$025D	$0846			MOVF	_usart_data_ready_local_result, 0
$025E	$00F0			MOVWF	STACK_0
$025F	$0008			RETURN
$022E	$	_usart_read:
;USART_b75.ppas,54 :: 		
;USART_b75.ppas,55 :: 		
$022E	$1303			BCF	STATUS, RP1
$022F	$1283			BCF	STATUS, RP0
$0230	$081A			MOVF	RCREG, 0
$0231	$00C6			MOVWF	_usart_read_local_result
;USART_b75.ppas,61 :: 		
$0232	$0818			MOVF	RCSTA, 0
$0233	$00F1			MOVWF	STACK_1
$0234	$3000			MOVLW	0
$0235	$18F1			BTFSC	STACK_1, 1
$0236	$3001			MOVLW	1
$0237	$00F1			MOVWF	STACK_1
$0238	$0871			MOVF	STACK_1, 0
$0239	$3A01			XORLW	1
$023A	$1D03			BTFSS	STATUS, Z
$023B	$2A3E			GOTO	USART_b75_L_21
$023C	$	USART_b75_L_20:
;USART_b75.ppas,63 :: 		
$023C	$1218			BCF	RCSTA, 4
$023D	$	USART_b75_L_24:
;USART_b75.ppas,64 :: 		
$023D	$	USART_b75_L_25:
$023D	$1618			BSF	RCSTA, 4
$023E	$	USART_b75_L_26:
;USART_b75.ppas,65 :: 		
$023E	$	USART_b75_L_21:
$023E	$	USART_b75_L_22:
$023E	$	USART_b75_L_19:
;USART_b75.ppas,66 :: 		
$023E	$0846			MOVF	_usart_read_local_result, 0
$023F	$00F0			MOVWF	STACK_0
$0240	$0008			RETURN
$00D9	$	_inttostr:
;conv.ppas,100 :: 		
;conv.ppas,101 :: 		
$00D9	$1303			BCF	STATUS, RP1
$00DA	$1283			BCF	STATUS, RP0
$00DB	$0847			MOVF	FARG_IntToStr+1, 0
$00DC	$3A80			XORLW	128
$00DD	$1D03			BTFSS	STATUS, Z
$00DE	$28E1			GOTO	L_IntToStr_4
$00DF	$3000			MOVLW	0
$00E0	$0646			XORWF	FARG_IntToStr, 0
$00E1	$	L_IntToStr_4:
$00E1	$1D03			BTFSS	STATUS, Z
$00E2	$28F9			GOTO	conv_L_57
$00E3	$	conv_L_56:
;conv.ppas,103 :: 		
$00E3	$0848			MOVF	FARG_IntToStr+2, 0
$00E4	$0084			MOVWF	FSR
$00E5	$302D			MOVLW	45
$00E6	$0080			MOVWF	INDF
$00E7	$0A84			INCF	FSR, 1
$00E8	$3033			MOVLW	51
$00E9	$0080			MOVWF	INDF
$00EA	$0A84			INCF	FSR, 1
$00EB	$3032			MOVLW	50
$00EC	$0080			MOVWF	INDF
$00ED	$0A84			INCF	FSR, 1
$00EE	$3037			MOVLW	55
$00EF	$0080			MOVWF	INDF
$00F0	$0A84			INCF	FSR, 1
$00F1	$3036			MOVLW	54
$00F2	$0080			MOVWF	INDF
$00F3	$0A84			INCF	FSR, 1
$00F4	$3038			MOVLW	56
$00F5	$0080			MOVWF	INDF
$00F6	$0A84			INCF	FSR, 1
$00F7	$0180			CLRF	INDF
;conv.ppas,104 :: 		
$00F8	$297B			GOTO	conv_L_55
;conv.ppas,105 :: 		
$00F9	$	conv_L_57:
$00F9	$	conv_L_58:
;conv.ppas,106 :: 		
$00F9	$01CA			CLRF	_inttostr_local_negative, 1
;conv.ppas,107 :: 		
$00FA	$3080			MOVLW	128
$00FB	$0647			XORWF	FARG_IntToStr+1, 0
$00FC	$00F0			MOVWF	STACK_0
$00FD	$3080			MOVLW	128
$00FE	$0270			SUBWF	STACK_0, 0
$00FF	$1D03			BTFSS	STATUS, Z
$0100	$2903			GOTO	L_IntToStr_5
$0101	$3000			MOVLW	0
$0102	$0246			SUBWF	FARG_IntToStr, 0
$0103	$	L_IntToStr_5:
$0103	$1803			BTFSC	STATUS, C
$0104	$290F			GOTO	conv_L_61
$0105	$	conv_L_60:
;conv.ppas,109 :: 		
$0105	$30FF			MOVLW	255
$0106	$00CA			MOVWF	_inttostr_local_negative
;conv.ppas,110 :: 		
$0107	$0846			MOVF	FARG_IntToStr, 0
$0108	$3C00			SUBLW	0
$0109	$00C6			MOVWF	FARG_IntToStr
$010A	$0847			MOVF	FARG_IntToStr+1, 0
$010B	$1C03			BTFSS	STATUS, C
$010C	$3F01			ADDLW	1
$010D	$01C7			CLRF	FARG_IntToStr+1
$010E	$02C7			SUBWF	FARG_IntToStr+1, 1
;conv.ppas,111 :: 		
$010F	$	conv_L_61:
$010F	$	conv_L_62:
;conv.ppas,112 :: 		
$010F	$3001			MOVLW	1
$0110	$00C9			MOVWF	_inttostr_local_len
;conv.ppas,113 :: 		
$0111	$3080			MOVLW	128
$0112	$00F0			MOVWF	STACK_0
$0113	$3080			MOVLW	128
$0114	$0647			XORWF	FARG_IntToStr+1, 0
$0115	$0270			SUBWF	STACK_0, 0
$0116	$1D03			BTFSS	STATUS, Z
$0117	$291A			GOTO	L_IntToStr_6
$0118	$0846			MOVF	FARG_IntToStr, 0
$0119	$3C09			SUBLW	9
$011A	$	L_IntToStr_6:
$011A	$1803			BTFSC	STATUS, C
$011B	$291D			GOTO	conv_L_64
$011C	$	conv_L_63:
;conv.ppas,114 :: 		
$011C	$0AC9			INCF	_inttostr_local_len, 1
$011D	$	conv_L_64:
$011D	$	conv_L_65:
;conv.ppas,115 :: 		
$011D	$3080			MOVLW	128
$011E	$00F0			MOVWF	STACK_0
$011F	$3080			MOVLW	128
$0120	$0647			XORWF	FARG_IntToStr+1, 0
$0121	$0270			SUBWF	STACK_0, 0
$0122	$1D03			BTFSS	STATUS, Z
$0123	$2926			GOTO	L_IntToStr_7
$0124	$0846			MOVF	FARG_IntToStr, 0
$0125	$3C63			SUBLW	99
$0126	$	L_IntToStr_7:
$0126	$1803			BTFSC	STATUS, C
$0127	$2929			GOTO	conv_L_67
$0128	$	conv_L_66:
;conv.ppas,116 :: 		
$0128	$0AC9			INCF	_inttostr_local_len, 1
$0129	$	conv_L_67:
$0129	$	conv_L_68:
;conv.ppas,117 :: 		
$0129	$3080			MOVLW	128
$012A	$3A03			XORLW	3
$012B	$00F0			MOVWF	STACK_0
$012C	$3080			MOVLW	128
$012D	$0647			XORWF	FARG_IntToStr+1, 0
$012E	$0270			SUBWF	STACK_0, 0
$012F	$1D03			BTFSS	STATUS, Z
$0130	$2933			GOTO	L_IntToStr_8
$0131	$0846			MOVF	FARG_IntToStr, 0
$0132	$3CE7			SUBLW	231
$0133	$	L_IntToStr_8:
$0133	$1803			BTFSC	STATUS, C
$0134	$2936			GOTO	conv_L_70
$0135	$	conv_L_69:
;conv.ppas,118 :: 		
$0135	$0AC9			INCF	_inttostr_local_len, 1
$0136	$	conv_L_70:
$0136	$	conv_L_71:
;conv.ppas,119 :: 		
$0136	$3080			MOVLW	128
$0137	$3A27			XORLW	39
$0138	$00F0			MOVWF	STACK_0
$0139	$3080			MOVLW	128
$013A	$0647			XORWF	FARG_IntToStr+1, 0
$013B	$0270			SUBWF	STACK_0, 0
$013C	$1D03			BTFSS	STATUS, Z
$013D	$2940			GOTO	L_IntToStr_9
$013E	$0846			MOVF	FARG_IntToStr, 0
$013F	$3C0F			SUBLW	15
$0140	$	L_IntToStr_9:
$0140	$1803			BTFSC	STATUS, C
$0141	$2943			GOTO	conv_L_73
$0142	$	conv_L_72:
;conv.ppas,120 :: 		
$0142	$0AC9			INCF	_inttostr_local_len, 1
$0143	$	conv_L_73:
$0143	$	conv_L_74:
;conv.ppas,121 :: 		
$0143	$0848			MOVF	FARG_IntToStr+2, 0
$0144	$0084			MOVWF	FSR
$0145	$3020			MOVLW	32
$0146	$0080			MOVWF	INDF
$0147	$0A84			INCF	FSR, 1
$0148	$0080			MOVWF	INDF
$0149	$0A84			INCF	FSR, 1
$014A	$0080			MOVWF	INDF
$014B	$0A84			INCF	FSR, 1
$014C	$0080			MOVWF	INDF
$014D	$0A84			INCF	FSR, 1
$014E	$0080			MOVWF	INDF
$014F	$0A84			INCF	FSR, 1
$0150	$0080			MOVWF	INDF
$0151	$0A84			INCF	FSR, 1
$0152	$0180			CLRF	INDF
;conv.ppas,122 :: 		
$0153	$0384			DECF	FSR, 1
;conv.ppas,123 :: 		
$0154	$	conv_L_77:
$0154	$0849			MOVF	_inttostr_local_len, 0
$0155	$3C00			SUBLW	0
$0156	$1803			BTFSC	STATUS, C
$0157	$2976			GOTO	conv_L_78
;conv.ppas,125 :: 		
$0158	$300A			MOVLW	10
$0159	$00F4			MOVWF	STACK_4
$015A	$01F5			CLRF	STACK_4+1
$015B	$0846			MOVF	FARG_IntToStr, 0
$015C	$00F0			MOVWF	STACK_0
$015D	$0847			MOVF	FARG_IntToStr+1, 0
$015E	$00F1			MOVWF	STACK_0+1
$015F	$217C			CALL	_div_16x16_s
$0160	$0878			MOVF	STACK_8, 0
$0161	$00F0			MOVWF	STACK_0
$0162	$0879			MOVF	STACK_9, 0
$0163	$00F1			MOVWF	STACK_1
$0164	$3030			MOVLW	48
$0165	$0770			ADDWF	STACK_0, 0
$0166	$0080			MOVWF	INDF
;conv.ppas,126 :: 		
;conv.ppas,127 :: 		
$0167	$0384			DECF	FSR, 1
;conv.ppas,128 :: 		
$0168	$300A			MOVLW	10
$0169	$00F4			MOVWF	STACK_4
$016A	$01F5			CLRF	STACK_4+1
$016B	$0846			MOVF	FARG_IntToStr, 0
$016C	$00F0			MOVWF	STACK_0
$016D	$0847			MOVF	FARG_IntToStr+1, 0
$016E	$00F1			MOVWF	STACK_0+1
$016F	$217C			CALL	_div_16x16_s
$0170	$0870			MOVF	STACK_0, 0
$0171	$00C6			MOVWF	FARG_IntToStr
$0172	$0871			MOVF	STACK_0+1, 0
$0173	$00C7			MOVWF	FARG_IntToStr+1
;conv.ppas,129 :: 		
$0174	$03C9			DECF	_inttostr_local_len, 1
;conv.ppas,130 :: 		
$0175	$2954			GOTO	conv_L_77
$0176	$	conv_L_78:
;conv.ppas,131 :: 		
$0176	$084A			MOVF	_inttostr_local_negative, 0
$0177	$1903			BTFSC	STATUS, Z
$0178	$297B			GOTO	conv_L_82
$0179	$	conv_L_81:
;conv.ppas,133 :: 		
$0179	$302D			MOVLW	45
$017A	$0080			MOVWF	INDF
;conv.ppas,134 :: 		
$017B	$	conv_L_82:
$017B	$	conv_L_83:
$017B	$	conv_L_55:
;conv.ppas,135 :: 		
$017B	$0008			RETURN
$0203	$	_usart_write_text:
;USART_b75.ppas,121 :: 		
;USART_b75.ppas,122 :: 		
$0203	$1303			BCF	STATUS, RP1
$0204	$1283			BCF	STATUS, RP0
$0205	$01C7			CLRF	_usart_write_text_local_i, 1
;USART_b75.ppas,123 :: 		
$0206	$0846			MOVF	FARG_Usart_Write_Text, 0
$0207	$0084			MOVWF	FSR
$0208	$0800			MOVF	INDF, 0
$0209	$00C8			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,124 :: 		
$020A	$	USART_b75_L_47:
$020A	$0848			MOVF	_usart_write_text_local_data, 0
$020B	$3A00			XORLW	0
$020C	$1903			BTFSC	STATUS, Z
$020D	$2A18			GOTO	USART_b75_L_48
;USART_b75.ppas,126 :: 		
$020E	$0848			MOVF	_usart_write_text_local_data, 0
$020F	$00CB			MOVWF	FARG_USART_Write
$0210	$2241			CALL	_usart_write
;USART_b75.ppas,127 :: 		
$0211	$0AC7			INCF	_usart_write_text_local_i, 1
;USART_b75.ppas,128 :: 		
$0212	$0847			MOVF	_usart_write_text_local_i, 0
$0213	$0746			ADDWF	FARG_Usart_Write_Text, 0
$0214	$0084			MOVWF	FSR
$0215	$0800			MOVF	INDF, 0
$0216	$00C8			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,129 :: 		
$0217	$2A0A			GOTO	USART_b75_L_47
$0218	$	USART_b75_L_48:
$0218	$	USART_b75_L_45:
;USART_b75.ppas,130 :: 		
$0218	$0008			RETURN
$0219	$	_usart_init:
;USART_b75.ppas,22 :: 		
;USART_b75.ppas,24 :: 		
$0219	$	USART_b75_L_1:
$0219	$1303			BCF	STATUS, RP1
$021A	$1683			BSF	STATUS, RP0
$021B	$1698			BSF	TXSTA, 5
$021C	$	USART_b75_L_2:
;USART_b75.ppas,25 :: 		
$021C	$3090			MOVLW	144
$021D	$1283			BCF	STATUS, RP0
$021E	$0098			MOVWF	RCSTA
;USART_b75.ppas,31 :: 		
$021F	$	USART_b75_L_3:
$021F	$1683			BSF	STATUS, RP0
$0220	$1686			BSF	TRISB, 5
$0221	$	USART_b75_L_4:
;USART_b75.ppas,32 :: 		
$0221	$	USART_b75_L_5:
$0221	$1786			BSF	TRISB, 7
$0222	$	USART_b75_L_6:
;USART_b75.ppas,35 :: 		
$0222	$	USART_b75_L_8:
$0222	$1283			BCF	STATUS, RP0
$0223	$080C			MOVF	PIR1, 0
$0224	$00F1			MOVWF	STACK_1
$0225	$3000			MOVLW	0
$0226	$1AF1			BTFSC	STACK_1, 5
$0227	$3001			MOVLW	1
$0228	$00F1			MOVWF	STACK_1
$0229	$0871			MOVF	STACK_1, 0
$022A	$3A01			XORLW	1
$022B	$1903			BTFSC	STATUS, Z
$022C	$2A22			GOTO	USART_b75_L_8
;USART_b75.ppas,36 :: 		
$022D	$	USART_b75_L_9:
$022D	$	USART_b75_L_0:
;USART_b75.ppas,37 :: 		
$022D	$0008			RETURN
$0004	$	_main:
;Pic1.pbas,9 :: 		main:
$0004	$	_main_main:
;Pic1.pbas,10 :: 		TRISA=%11111111
$0004	$30FF			MOVLW	255
$0005	$1303			BCF	STATUS, RP1
$0006	$1683			BSF	STATUS, RP0
$0007	$0085			MOVWF	TRISA
;Pic1.pbas,11 :: 		TRISB=%01101111
$0008	$306F			MOVLW	111
$0009	$0086			MOVWF	TRISB
;Pic1.pbas,12 :: 		TRISC=%00000000
$000A	$0187			CLRF	TRISC, 1
;Pic1.pbas,13 :: 		INTCON=%00000000
$000B	$018B			CLRF	INTCON, 1
;Pic1.pbas,14 :: 		ANSEL=%00000000
$000C	$1703			BSF	STATUS, RP1
$000D	$1283			BCF	STATUS, RP0
$000E	$019E			CLRF	ANSEL, 1
;Pic1.pbas,15 :: 		ANSELH=%00000000
$000F	$019F			CLRF	ANSELH, 1
;Pic1.pbas,17 :: 		Usart_Init(9600)
$0010	$3019			MOVLW	25
$0011	$1303			BCF	STATUS, RP1
$0012	$1683			BSF	STATUS, RP0
$0013	$0099			MOVWF	SPBRG
$0014	$1518			BSF	TXSTA, BRGH
$0015	$2219			CALL	_usart_init
;Pic1.pbas,18 :: 		PORTC=0
$0016	$0187			CLRF	PORTC, 1
;Pic1.pbas,19 :: 		i=0
$0017	$01A0			CLRF	_i
$0018	$01A1			CLRF	_i+1
;Pic1.pbas,20 :: 		b0=false
$0019	$01A2			CLRF	_b0, 1
;Pic1.pbas,21 :: 		b1=false
$001A	$01A3			CLRF	_b1, 1
;Pic1.pbas,22 :: 		b2=false
$001B	$01A4			CLRF	_b2, 1
;Pic1.pbas,23 :: 		b3=false
$001C	$01A5			CLRF	_b3, 1
;Pic1.pbas,24 :: 		b4=false
$001D	$01A6			CLRF	_b4, 1
;Pic1.pbas,25 :: 		b5=false
$001E	$01A7			CLRF	_b5, 1
;Pic1.pbas,26 :: 		b6=false
$001F	$01A8			CLRF	_b6, 1
;Pic1.pbas,27 :: 		ba0=false
$0020	$01A9			CLRF	_ba0, 1
;Pic1.pbas,28 :: 		ba1=false
$0021	$01AA			CLRF	_ba1, 1
;Pic1.pbas,29 :: 		ba2=false
$0022	$01AB			CLRF	_ba2, 1
;Pic1.pbas,30 :: 		ba3=false
$0023	$01AC			CLRF	_ba3, 1
;Pic1.pbas,31 :: 		ba4=false
$0024	$01AD			CLRF	_ba4, 1
;Pic1.pbas,32 :: 		ba5=false
$0025	$01AE			CLRF	_ba5, 1
;Pic1.pbas,33 :: 		atualiza=false
$0026	$01AF			CLRF	_atualiza, 1
;Pic1.pbas,35 :: 		executa:
$0027	$	_main_executa:
;Pic1.pbas,36 :: 		if USART_Data_Ready() > 0 then
$0027	$2253			CALL	_usart_data_ready
$0028	$0870			MOVF	STACK_0, 0
$0029	$3C00			SUBLW	0
$002A	$1803			BTFSC	STATUS, C
$002B	$2835			GOTO	Pic1_L_2
$002C	$	Pic1_L_1:
;Pic1.pbas,37 :: 		info = USART_Read()
$002C	$222E			CALL	_usart_read
$002D	$0870			MOVF	STACK_0, 0
$002E	$00B0			MOVWF	_info
;Pic1.pbas,38 :: 		if (info = 65) then 'A
$002F	$0870			MOVF	STACK_0, 0
$0030	$3A41			XORLW	65
$0031	$1D03			BTFSS	STATUS, Z
$0032	$2835			GOTO	Pic1_L_5
$0033	$	Pic1_L_4:
;Pic1.pbas,39 :: 		atualiza = true
$0033	$30FF			MOVLW	255
$0034	$00AF			MOVWF	_atualiza
$0035	$	Pic1_L_5:
;Pic1.pbas,40 :: 		end if
$0035	$	Pic1_L_6:
$0035	$	Pic1_L_2:
;Pic1.pbas,41 :: 		end if
$0035	$	Pic1_L_3:
;Pic1.pbas,44 :: 		if (testbit(portA,0) = 1) then
$0035	$3001			MOVLW	1
$0036	$0505			ANDWF	PORTA, 0
$0037	$00F1			MOVWF	STACK_1
$0038	$0871			MOVF	STACK_1, 0
$0039	$3A01			XORLW	1
$003A	$1D03			BTFSS	STATUS, Z
$003B	$2845			GOTO	Pic1_L_8
$003C	$	Pic1_L_7:
;Pic1.pbas,45 :: 		if b0 = false then
$003C	$0822			MOVF	_b0, 0
$003D	$3A00			XORLW	0
$003E	$1D03			BTFSS	STATUS, Z
$003F	$2845			GOTO	Pic1_L_11
$0040	$	Pic1_L_10:
;Pic1.pbas,46 :: 		b0 = true
$0040	$30FF			MOVLW	255
$0041	$00A2			MOVWF	_b0
;Pic1.pbas,47 :: 		i = i + 1
$0042	$0AA0			INCF	_i, 1
$0043	$1903			BTFSC	STATUS, Z
$0044	$0AA1			INCF	_i+1, 1
$0045	$	Pic1_L_11:
;Pic1.pbas,48 :: 		end if
$0045	$	Pic1_L_12:
$0045	$	Pic1_L_8:
;Pic1.pbas,49 :: 		end if
$0045	$	Pic1_L_9:
;Pic1.pbas,50 :: 		if testbit(portA,0) = 0 then
$0045	$3001			MOVLW	1
$0046	$0505			ANDWF	PORTA, 0
$0047	$00F1			MOVWF	STACK_1
$0048	$0871			MOVF	STACK_1, 0
$0049	$3A00			XORLW	0
$004A	$1D03			BTFSS	STATUS, Z
$004B	$2851			GOTO	Pic1_L_14
$004C	$	Pic1_L_13:
;Pic1.pbas,51 :: 		if b0 = true then
$004C	$0822			MOVF	_b0, 0
$004D	$3AFF			XORLW	255
$004E	$1D03			BTFSS	STATUS, Z
$004F	$2851			GOTO	Pic1_L_17
$0050	$	Pic1_L_16:
;Pic1.pbas,52 :: 		b0 = false
$0050	$01A2			CLRF	_b0, 1
$0051	$	Pic1_L_17:
;Pic1.pbas,53 :: 		end if
$0051	$	Pic1_L_18:
$0051	$	Pic1_L_14:
;Pic1.pbas,54 :: 		end if
$0051	$	Pic1_L_15:
;Pic1.pbas,57 :: 		if testbit(portA,1) = 1 then
$0051	$3000			MOVLW	0
$0052	$1885			BTFSC	PORTA, 1
$0053	$3001			MOVLW	1
$0054	$00F1			MOVWF	STACK_1
$0055	$0871			MOVF	STACK_1, 0
$0056	$3A01			XORLW	1
$0057	$1D03			BTFSS	STATUS, Z
$0058	$2863			GOTO	Pic1_L_20
$0059	$	Pic1_L_19:
;Pic1.pbas,58 :: 		if b1 = false then
$0059	$0823			MOVF	_b1, 0
$005A	$3A00			XORLW	0
$005B	$1D03			BTFSS	STATUS, Z
$005C	$2863			GOTO	Pic1_L_23
$005D	$	Pic1_L_22:
;Pic1.pbas,59 :: 		b1 = true
$005D	$30FF			MOVLW	255
$005E	$00A3			MOVWF	_b1
;Pic1.pbas,60 :: 		i = i - 1
$005F	$3001			MOVLW	1
$0060	$02A0			SUBWF	_i, 1
$0061	$1C03			BTFSS	STATUS, C
$0062	$03A1			DECF	_i+1, 1
$0063	$	Pic1_L_23:
;Pic1.pbas,61 :: 		end if
$0063	$	Pic1_L_24:
$0063	$	Pic1_L_20:
;Pic1.pbas,62 :: 		end if
$0063	$	Pic1_L_21:
;Pic1.pbas,63 :: 		if testbit(portA,1) = 0 then
$0063	$3000			MOVLW	0
$0064	$1885			BTFSC	PORTA, 1
$0065	$3001			MOVLW	1
$0066	$00F1			MOVWF	STACK_1
$0067	$0871			MOVF	STACK_1, 0
$0068	$3A00			XORLW	0
$0069	$1D03			BTFSS	STATUS, Z
$006A	$2870			GOTO	Pic1_L_26
$006B	$	Pic1_L_25:
;Pic1.pbas,64 :: 		if b1 = true then
$006B	$0823			MOVF	_b1, 0
$006C	$3AFF			XORLW	255
$006D	$1D03			BTFSS	STATUS, Z
$006E	$2870			GOTO	Pic1_L_29
$006F	$	Pic1_L_28:
;Pic1.pbas,65 :: 		b1 = false
$006F	$01A3			CLRF	_b1, 1
$0070	$	Pic1_L_29:
;Pic1.pbas,66 :: 		end if
$0070	$	Pic1_L_30:
$0070	$	Pic1_L_26:
;Pic1.pbas,67 :: 		end if
$0070	$	Pic1_L_27:
;Pic1.pbas,70 :: 		if testbit(portA,2) = 1 then
$0070	$3000			MOVLW	0
$0071	$1905			BTFSC	PORTA, 2
$0072	$3001			MOVLW	1
$0073	$00F1			MOVWF	STACK_1
$0074	$0871			MOVF	STACK_1, 0
$0075	$3A01			XORLW	1
$0076	$1D03			BTFSS	STATUS, Z
$0077	$2882			GOTO	Pic1_L_32
$0078	$	Pic1_L_31:
;Pic1.pbas,71 :: 		if b2 = false then
$0078	$0824			MOVF	_b2, 0
$0079	$3A00			XORLW	0
$007A	$1D03			BTFSS	STATUS, Z
$007B	$2882			GOTO	Pic1_L_35
$007C	$	Pic1_L_34:
;Pic1.pbas,72 :: 		b2 = true
$007C	$30FF			MOVLW	255
$007D	$00A4			MOVWF	_b2
;Pic1.pbas,73 :: 		i = i - 1
$007E	$3001			MOVLW	1
$007F	$02A0			SUBWF	_i, 1
$0080	$1C03			BTFSS	STATUS, C
$0081	$03A1			DECF	_i+1, 1
$0082	$	Pic1_L_35:
;Pic1.pbas,74 :: 		end if
$0082	$	Pic1_L_36:
$0082	$	Pic1_L_32:
;Pic1.pbas,75 :: 		end if
$0082	$	Pic1_L_33:
;Pic1.pbas,76 :: 		if testbit(portA,2) = 0 then
$0082	$3000			MOVLW	0
$0083	$1905			BTFSC	PORTA, 2
$0084	$3001			MOVLW	1
$0085	$00F1			MOVWF	STACK_1
$0086	$0871			MOVF	STACK_1, 0
$0087	$3A00			XORLW	0
$0088	$1D03			BTFSS	STATUS, Z
$0089	$288F			GOTO	Pic1_L_38
$008A	$	Pic1_L_37:
;Pic1.pbas,77 :: 		if b2 = true then
$008A	$0824			MOVF	_b2, 0
$008B	$3AFF			XORLW	255
$008C	$1D03			BTFSS	STATUS, Z
$008D	$288F			GOTO	Pic1_L_41
$008E	$	Pic1_L_40:
;Pic1.pbas,78 :: 		b2 = false
$008E	$01A4			CLRF	_b2, 1
$008F	$	Pic1_L_41:
;Pic1.pbas,79 :: 		end if
$008F	$	Pic1_L_42:
$008F	$	Pic1_L_38:
;Pic1.pbas,80 :: 		end if
$008F	$	Pic1_L_39:
;Pic1.pbas,83 :: 		if testbit(portA,5) = 1 then
$008F	$3000			MOVLW	0
$0090	$1A85			BTFSC	PORTA, 5
$0091	$3001			MOVLW	1
$0092	$00F1			MOVWF	STACK_1
$0093	$0871			MOVF	STACK_1, 0
$0094	$3A01			XORLW	1
$0095	$1D03			BTFSS	STATUS, Z
$0096	$28A5			GOTO	Pic1_L_44
$0097	$	Pic1_L_43:
;Pic1.pbas,84 :: 		if b3 = false then
$0097	$0825			MOVF	_b3, 0
$0098	$3A00			XORLW	0
$0099	$1D03			BTFSS	STATUS, Z
$009A	$28A5			GOTO	Pic1_L_47
$009B	$	Pic1_L_46:
;Pic1.pbas,85 :: 		b3 = true
$009B	$30FF			MOVLW	255
$009C	$00A5			MOVWF	_b3
;Pic1.pbas,86 :: 		if ba3 = true then
$009D	$082C			MOVF	_ba3, 0
$009E	$3AFF			XORLW	255
$009F	$1D03			BTFSS	STATUS, Z
$00A0	$28A3			GOTO	Pic1_L_50
$00A1	$	Pic1_L_49:
;Pic1.pbas,87 :: 		ba3 = false
$00A1	$01AC			CLRF	_ba3, 1
$00A2	$28A5			GOTO	Pic1_L_51
;Pic1.pbas,88 :: 		else
$00A3	$	Pic1_L_50:
;Pic1.pbas,89 :: 		ba3 = true
$00A3	$30FF			MOVLW	255
$00A4	$00AC			MOVWF	_ba3
;Pic1.pbas,90 :: 		end if
$00A5	$	Pic1_L_51:
$00A5	$	Pic1_L_47:
;Pic1.pbas,91 :: 		end if
$00A5	$	Pic1_L_48:
$00A5	$	Pic1_L_44:
;Pic1.pbas,92 :: 		end if
$00A5	$	Pic1_L_45:
;Pic1.pbas,94 :: 		if testbit(portA,5) = 0 then
$00A5	$3000			MOVLW	0
$00A6	$1A85			BTFSC	PORTA, 5
$00A7	$3001			MOVLW	1
$00A8	$00F1			MOVWF	STACK_1
$00A9	$0871			MOVF	STACK_1, 0
$00AA	$3A00			XORLW	0
$00AB	$1D03			BTFSS	STATUS, Z
$00AC	$28AE			GOTO	Pic1_L_53
$00AD	$	Pic1_L_52:
;Pic1.pbas,95 :: 		b3 = false
$00AD	$01A5			CLRF	_b3, 1
$00AE	$	Pic1_L_53:
;Pic1.pbas,96 :: 		end if
$00AE	$	Pic1_L_54:
;Pic1.pbas,97 :: 		if (ba3 = true) or (atualiza = true) then
$00AE	$082C			MOVF	_ba3, 0
$00AF	$3AFF			XORLW	255
$00B0	$30FF			MOVLW	255
$00B1	$1D03			BTFSS	STATUS, Z
$00B2	$3000			MOVLW	0
$00B3	$00F1			MOVWF	STACK_1
$00B4	$082F			MOVF	_atualiza, 0
$00B5	$3AFF			XORLW	255
$00B6	$30FF			MOVLW	255
$00B7	$1D03			BTFSS	STATUS, Z
$00B8	$3000			MOVLW	0
$00B9	$00F0			MOVWF	STACK_0
$00BA	$0871			MOVF	STACK_1, 0
$00BB	$04F0			IORWF	STACK_0, 1
$00BC	$1903			BTFSC	STATUS, Z
$00BD	$28C8			GOTO	Pic1_L_56
$00BE	$	Pic1_L_55:
;Pic1.pbas,98 :: 		IntToStr(i, txt)
$00BE	$0820			MOVF	_i, 0
$00BF	$00C6			MOVWF	FARG_IntToStr
$00C0	$0821			MOVF	_i+1, 0
$00C1	$00C7			MOVWF	FARG_IntToStr+1
$00C2	$3031			MOVLW	_txt
$00C3	$00C8			MOVWF	FARG_IntToStr+2
$00C4	$20D9			CALL	_inttostr
;Pic1.pbas,99 :: 		Usart_Write_Text(txt)
$00C5	$3031			MOVLW	_txt
$00C6	$00C6			MOVWF	FARG_Usart_Write_Text
$00C7	$2203			CALL	_usart_write_text
$00C8	$	Pic1_L_56:
;Pic1.pbas,100 :: 		end if
$00C8	$	Pic1_L_57:
;Pic1.pbas,102 :: 		if (i > 999) then
$00C8	$3080			MOVLW	128
$00C9	$3A03			XORLW	3
$00CA	$00F0			MOVWF	STACK_0
$00CB	$3080			MOVLW	128
$00CC	$0621			XORWF	_i+1, 0
$00CD	$0270			SUBWF	STACK_0, 0
$00CE	$1D03			BTFSS	STATUS, Z
$00CF	$28D2			GOTO	L_main_0
$00D0	$0820			MOVF	_i, 0
$00D1	$3CE7			SUBLW	231
$00D2	$	L_main_0:
$00D2	$1803			BTFSC	STATUS, C
$00D3	$28D6			GOTO	Pic1_L_59
$00D4	$	Pic1_L_58:
;Pic1.pbas,103 :: 		i = 0
$00D4	$01A0			CLRF	_i
$00D5	$01A1			CLRF	_i+1
$00D6	$	Pic1_L_59:
;Pic1.pbas,104 :: 		end if
$00D6	$	Pic1_L_60:
;Pic1.pbas,106 :: 		info = 0
$00D6	$01B0			CLRF	_info, 1
;Pic1.pbas,108 :: 		goto executa
$00D7	$2827			GOTO	_main_executa
$00D8	$28D8			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$00D9		IntToStr
$017C		Div_16x16_S
$01D6		Div_16x16_S_L
$0203		Usart_Write_Text
$0219		USART_Init
$022E		USART_Read
$0241		USART_Write
$0253		USART_Data_Ready


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$0004		_main_main:
$0027		_main_executa:
$002C		Pic1_L_1:
$0033		Pic1_L_4:
$0035		Pic1_L_2:
$0035		Pic1_L_3:
$0035		Pic1_L_5:
$0035		Pic1_L_6:
$003C		Pic1_L_7:
$0040		Pic1_L_10:
$0045		Pic1_L_11:
$0045		Pic1_L_12:
$0045		Pic1_L_8:
$0045		Pic1_L_9:
$004C		Pic1_L_13:
$0050		Pic1_L_16:
$0051		Pic1_L_14:
$0051		Pic1_L_15:
$0051		Pic1_L_17:
$0051		Pic1_L_18:
$0059		Pic1_L_19:
$005D		Pic1_L_22:
$0063		Pic1_L_20:
$0063		Pic1_L_21:
$0063		Pic1_L_23:
$0063		Pic1_L_24:
$006B		Pic1_L_25:
$006F		Pic1_L_28:
$0070		Pic1_L_26:
$0070		Pic1_L_27:
$0070		Pic1_L_29:
$0070		Pic1_L_30:
$0078		Pic1_L_31:
$007C		Pic1_L_34:
$0082		Pic1_L_32:
$0082		Pic1_L_33:
$0082		Pic1_L_35:
$0082		Pic1_L_36:
$008A		Pic1_L_37:
$008E		Pic1_L_40:
$008F		Pic1_L_38:
$008F		Pic1_L_39:
$008F		Pic1_L_41:
$008F		Pic1_L_42:
$0097		Pic1_L_43:
$009B		Pic1_L_46:
$00A1		Pic1_L_49:
$00A3		Pic1_L_50:
$00A5		Pic1_L_44:
$00A5		Pic1_L_45:
$00A5		Pic1_L_47:
$00A5		Pic1_L_48:
$00A5		Pic1_L_51:
$00AD		Pic1_L_52:
$00AE		Pic1_L_53:
$00AE		Pic1_L_54:
$00BE		Pic1_L_55:
$00C8		Pic1_L_56:
$00C8		Pic1_L_57:
$00D2		L_main_0:
$00D4		Pic1_L_58:
$00D6		Pic1_L_59:
$00D6		Pic1_L_60:
$00D9		_inttostr:
$00E1		L_IntToStr_4:
$00E3		conv_L_56:
$00F9		conv_L_57:
$00F9		conv_L_58:
$0103		L_IntToStr_5:
$0105		conv_L_60:
$010F		conv_L_61:
$010F		conv_L_62:
$011A		L_IntToStr_6:
$011C		conv_L_63:
$011D		conv_L_64:
$011D		conv_L_65:
$0126		L_IntToStr_7:
$0128		conv_L_66:
$0129		conv_L_67:
$0129		conv_L_68:
$0133		L_IntToStr_8:
$0135		conv_L_69:
$0136		conv_L_70:
$0136		conv_L_71:
$0140		L_IntToStr_9:
$0142		conv_L_72:
$0143		conv_L_73:
$0143		conv_L_74:
$0154		conv_L_77:
$0176		conv_L_78:
$0179		conv_L_81:
$017B		conv_L_55:
$017B		conv_L_82:
$017B		conv_L_83:
$017C		_div_16x16_s:
$01D5		math_L_7:
$01D6		_div_16x16_s_l:
$0202		math_L_6:
$0203		_usart_write_text:
$020A		USART_b75_L_47:
$0218		USART_b75_L_45:
$0218		USART_b75_L_48:
$0219		_usart_init:
$0219		USART_b75_L_1:
$021C		USART_b75_L_2:
$021F		USART_b75_L_3:
$0221		USART_b75_L_4:
$0221		USART_b75_L_5:
$0222		USART_b75_L_6:
$0222		USART_b75_L_8:
$022D		USART_b75_L_0:
$022D		USART_b75_L_9:
$022E		_usart_read:
$023C		USART_b75_L_20:
$023D		USART_b75_L_24:
$023D		USART_b75_L_25:
$023E		USART_b75_L_19:
$023E		USART_b75_L_21:
$023E		USART_b75_L_22:
$023E		USART_b75_L_26:
$0241		_usart_write:
$0241		USART_b75_L_14:
$024F		USART_b75_L_15:
$0252		USART_b75_L_12:
$0253		_usart_data_ready:
$025D		USART_b75_L_18:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0007		PORTC
$000A		PCLATH
$000B		INTCON
$000C		PIR1
$0018		RCSTA
$0019		TXREG
$001A		RCREG
$0020		_i
$0022		_b0
$0023		_b1
$0024		_b2
$0025		_b3
$0026		_b4
$0027		_b5
$0028		_b6
$0029		_ba0
$002A		_ba1
$002B		_ba2
$002C		_ba3
$002D		_ba4
$002E		_ba5
$002F		_atualiza
$0030		_info
$0031		_txt
$0046		_usart_data_ready_local_result
$0046		_usart_read_local_result
$0046		FARG_IntToStr
$0046		FARG_USART_Init
$0046		FARG_Usart_Write_Text
$0047		_usart_write_text_local_i
$0048		_usart_write_text_local_data
$0048		FARG_IntToStr+2
$0049		_inttostr_local_len
$004A		_inttostr_local_negative
$004B		FARG_USART_Write
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0098		TXSTA
$0099		SPBRG
$011E		ANSEL
$011F		ANSELH


