;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 08/05/2020 23:23:03
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0327	$	_div_16x16_s_l:
$0327	$1303			BCF	STATUS, RP1
$0328	$1283			BCF	STATUS, RP0
;math.ppas,291 :: 		
;math.ppas,293 :: 		
$0329	$0D71			RLF	STACK_1, W
;math.ppas,294 :: 		
$032A	$0DF8			RLF	STACK_8, F
;math.ppas,295 :: 		
$032B	$0DF9			RLF	STACK_9, F
;math.ppas,296 :: 		
$032C	$0874			MOVF	STACK_4, W
;math.ppas,297 :: 		
$032D	$02F8			SUBWF	STACK_8, F
;math.ppas,298 :: 		
$032E	$0875			MOVF	STACK_5, W
;math.ppas,299 :: 		
$032F	$1C03			BTFSS	STATUS, C
;math.ppas,300 :: 		
$0330	$0F75			INCFSZ	STACK_5, W
;math.ppas,301 :: 		
$0331	$02F9			SUBWF	STACK_9, F
;math.ppas,302 :: 		
$0332	$0DF0			RLF	STACK_0, F
;math.ppas,304 :: 		
$0333	$0DF1			RLF	STACK_1, F
;math.ppas,305 :: 		
$0334	$300F			MOVLW	15
;math.ppas,307 :: 		
$0335	$00FC			MOVWF	STACK_12
;math.ppas,308 :: 		
$0336	$0D71			RLF	STACK_1, W
;math.ppas,309 :: 		
$0337	$0DF8			RLF	STACK_8, F
;math.ppas,310 :: 		
$0338	$0DF9			RLF	STACK_9, F
;math.ppas,312 :: 		
$0339	$0874			MOVF	STACK_4, W
;math.ppas,313 :: 		
$033A	$1C70			BTFSS	STACK_0, 0
;math.ppas,314 :: 		
$033B	$2B42			GOTO	$+7
;math.ppas,315 :: 		
$033C	$02F8			SUBWF	STACK_8, F
;math.ppas,316 :: 		
$033D	$0875			MOVF	STACK_5, W
;math.ppas,317 :: 		
$033E	$1C03			BTFSS	STATUS, C
;math.ppas,318 :: 		
$033F	$0F75			INCFSZ	STACK_5, W
;math.ppas,319 :: 		
$0340	$02F9			SUBWF	STACK_9, F
;math.ppas,321 :: 		
$0341	$2B47			GOTO	$+6
;math.ppas,322 :: 		
$0342	$07F8			ADDWF	STACK_8, F
;math.ppas,323 :: 		
$0343	$0875			MOVF	STACK_5, W
;math.ppas,324 :: 		
$0344	$1803			BTFSC	STATUS, C
;math.ppas,325 :: 		
$0345	$0F75			INCFSZ	STACK_5, W
;math.ppas,327 :: 		
$0346	$07F9			ADDWF	STACK_9, F
;math.ppas,328 :: 		
$0347	$0DF0			RLF	STACK_0, F
;math.ppas,330 :: 		
$0348	$0DF1			RLF	STACK_1, F
;math.ppas,331 :: 		
$0349	$0BFC			DECFSZ	STACK_12, F
;math.ppas,333 :: 		
$034A	$2B36			GOTO	$-20
;math.ppas,334 :: 		
$034B	$1870			BTFSC	STACK_0, 0
;math.ppas,335 :: 		
$034C	$2B53			GOTO	$+7
;math.ppas,336 :: 		
$034D	$0874			MOVF	STACK_4, W
;math.ppas,337 :: 		
$034E	$07F8			ADDWF	STACK_8, F
;math.ppas,338 :: 		
$034F	$0875			MOVF	STACK_5, W
;math.ppas,339 :: 		
$0350	$1803			BTFSC	STATUS, C
;math.ppas,340 :: 		
$0351	$0F75			INCFSZ	STACK_5, W
;math.ppas,341 :: 		
$0352	$07F9			ADDWF	STACK_9, F
;math.ppas,342 :: 		
$0353	$	math_L_6:
;math.ppas,343 :: 		
$0353	$0008			RETURN
$02CD	$	_div_16x16_s:
$02CD	$1303			BCF	STATUS, RP1
$02CE	$1283			BCF	STATUS, RP0
;math.ppas,346 :: 		
;math.ppas,348 :: 		
$02CF	$01FD			CLRF	STACK_13
;math.ppas,349 :: 		
$02D0	$01F9			CLRF	STACK_9
;math.ppas,350 :: 		
$02D1	$01F8			CLRF	STACK_8
;math.ppas,351 :: 		
$02D2	$0871			MOVF	STACK_1, W
;math.ppas,352 :: 		
$02D3	$0470			IORWF	STACK_0, W
;math.ppas,353 :: 		
$02D4	$1903			BTFSC	STATUS, Z
;math.ppas,355 :: 		
$02D5	$3400			RETLW	0
;math.ppas,356 :: 		
$02D6	$0871			MOVF	STACK_1, W
;math.ppas,357 :: 		
$02D7	$0675			XORWF	STACK_5, W
;math.ppas,358 :: 		
$02D8	$00FA			MOVWF	STACK_10
;math.ppas,359 :: 		
$02D9	$1BFA			BTFSC	STACK_10, 7
;math.ppas,361 :: 		
$02DA	$09FD			COMF	STACK_13, F
;math.ppas,363 :: 		
$02DB	$01FB			CLRF	STACK_11
;math.ppas,364 :: 		
$02DC	$1FF5			BTFSS	STACK_5, 7
;math.ppas,366 :: 		
$02DD	$2AE3			GOTO	$+6
;math.ppas,367 :: 		
$02DE	$09F4			COMF	STACK_4, F
;math.ppas,368 :: 		
$02DF	$09F5			COMF	STACK_5, F
;math.ppas,369 :: 		
$02E0	$0AF4			INCF	STACK_4, F
;math.ppas,370 :: 		
$02E1	$1903			BTFSC	STATUS, Z
;math.ppas,372 :: 		
$02E2	$0AF5			INCF	STACK_5, F
;math.ppas,373 :: 		
$02E3	$1FF1			BTFSS	STACK_1, 7
;math.ppas,375 :: 		
$02E4	$2AEA			GOTO	$+6
;math.ppas,376 :: 		
$02E5	$09F0			COMF	STACK_0, F
;math.ppas,377 :: 		
$02E6	$09F1			COMF	STACK_1, F
;math.ppas,378 :: 		
$02E7	$0AF0			INCF	STACK_0, F
;math.ppas,379 :: 		
$02E8	$1903			BTFSC	STATUS, Z
;math.ppas,381 :: 		
$02E9	$0AF1			INCF	STACK_1, F
;math.ppas,382 :: 		
$02EA	$0871			MOVF	STACK_1, W
;math.ppas,383 :: 		
$02EB	$0475			IORWF	STACK_5, W
;math.ppas,384 :: 		
$02EC	$00FA			MOVWF	STACK_10
;math.ppas,385 :: 		
$02ED	$1BFA			BTFSC	STACK_10, 7
;math.ppas,386 :: 		
$02EE	$2AFF			GOTO	$+17
;math.ppas,388 :: 		
$02EF	$2327			CALL	_div_16x16_s_l
;math.ppas,390 :: 		
$02F0	$187B			BTFSC	STACK_11, 0
;math.ppas,392 :: 		
$02F1	$2B12			GOTO	$+33
;math.ppas,393 :: 		
$02F2	$1FFD			BTFSS	STACK_13, 7
;math.ppas,395 :: 		
$02F3	$3400			RETLW	0
;math.ppas,396 :: 		
$02F4	$09F0			COMF	STACK_0, F
;math.ppas,397 :: 		
$02F5	$09F1			COMF	STACK_1, F
;math.ppas,398 :: 		
$02F6	$0AF0			INCF	STACK_0, F
;math.ppas,399 :: 		
$02F7	$1903			BTFSC	STATUS, Z
;math.ppas,401 :: 		
$02F8	$0AF1			INCF	STACK_1, F
;math.ppas,402 :: 		
$02F9	$09F8			COMF	STACK_8, F
;math.ppas,403 :: 		
$02FA	$09F9			COMF	STACK_9, F
;math.ppas,404 :: 		
$02FB	$0AF8			INCF	STACK_8, F
;math.ppas,405 :: 		
$02FC	$1903			BTFSC	STATUS, Z
;math.ppas,407 :: 		
$02FD	$0AF9			INCF	STACK_9, F
;math.ppas,409 :: 		
$02FE	$3400			RETLW	0
;math.ppas,410 :: 		
$02FF	$1FF5			BTFSS	STACK_5, 7
;math.ppas,411 :: 		
$0300	$2B0E			GOTO	$+14
;math.ppas,412 :: 		
$0301	$1BF1			BTFSC	STACK_1, 7
;math.ppas,413 :: 		
$0302	$2B0A			GOTO	$+8
;math.ppas,414 :: 		
$0303	$0871			MOVF	STACK_1, W
;math.ppas,415 :: 		
$0304	$00F9			MOVWF	STACK_9
;math.ppas,416 :: 		
$0305	$0870			MOVF	STACK_0, W
;math.ppas,417 :: 		
$0306	$00F8			MOVWF	STACK_8
;math.ppas,418 :: 		
$0307	$01F1			CLRF	STACK_1
;math.ppas,419 :: 		
$0308	$01F0			CLRF	STACK_0
;math.ppas,420 :: 		
$0309	$2AF2			GOTO	$-23
;math.ppas,421 :: 		
$030A	$01F1			CLRF	STACK_1
;math.ppas,422 :: 		
$030B	$01F0			CLRF	STACK_0
;math.ppas,423 :: 		
$030C	$0AF0			INCF	STACK_0, F
;math.ppas,425 :: 		
$030D	$3400			RETLW	0
;math.ppas,426 :: 		
$030E	$09F1			COMF	STACK_1, F
;math.ppas,427 :: 		
$030F	$09F0			COMF	STACK_0, F
;math.ppas,428 :: 		
$0310	$0AFB			INCF	STACK_11, F
;math.ppas,430 :: 		
$0311	$2AEF			GOTO	$-34
;math.ppas,431 :: 		
$0312	$0AF8			INCF	STACK_8, F
;math.ppas,432 :: 		
$0313	$1903			BTFSC	STATUS, Z
;math.ppas,433 :: 		
$0314	$0AF9			INCF	STACK_9, F
;math.ppas,434 :: 		
$0315	$0874			MOVF	STACK_4, W
;math.ppas,435 :: 		
$0316	$0278			SUBWF	STACK_8, W
;math.ppas,436 :: 		
$0317	$1D03			BTFSS	STATUS, Z
;math.ppas,437 :: 		
$0318	$2AF2			GOTO	$-38
;math.ppas,438 :: 		
$0319	$0875			MOVF	STACK_5, W
;math.ppas,439 :: 		
$031A	$0279			SUBWF	STACK_9, W
;math.ppas,440 :: 		
$031B	$1D03			BTFSS	STATUS, Z
;math.ppas,441 :: 		
$031C	$2AF2			GOTO	$-42
;math.ppas,442 :: 		
$031D	$01F9			CLRF	STACK_9
;math.ppas,443 :: 		
$031E	$01F8			CLRF	STACK_8
;math.ppas,444 :: 		
$031F	$0AF0			INCF	STACK_0, F
;math.ppas,445 :: 		
$0320	$1903			BTFSC	STATUS, Z
;math.ppas,446 :: 		
$0321	$0AF1			INCF	STACK_1, F
;math.ppas,447 :: 		
$0322	$1FF1			BTFSS	STACK_1, 7
;math.ppas,448 :: 		
$0323	$2AF2			GOTO	$-49
;math.ppas,449 :: 		
$0324	$0000			NOP
;math.ppas,450 :: 		
$0325	$34FF			RETLW	255
;math.ppas,451 :: 		
$0326	$	math_L_7:
;math.ppas,452 :: 		
$0326	$0008			RETURN
$037F	$	_usart_write:
;USART_b75.ppas,40 :: 		
;USART_b75.ppas,42 :: 		
$037F	$	USART_b75_L_14:
$037F	$1303			BCF	STATUS, RP1
$0380	$1683			BSF	STATUS, RP0
$0381	$0818			MOVF	TXSTA, 0
$0382	$00F1			MOVWF	STACK_1
$0383	$3000			MOVLW	0
$0384	$18F1			BTFSC	STACK_1, 1
$0385	$3001			MOVLW	1
$0386	$00F1			MOVWF	STACK_1
$0387	$0871			MOVF	STACK_1, 0
$0388	$3A00			XORLW	0
$0389	$1D03			BTFSS	STATUS, Z
$038A	$2B8D			GOTO	USART_b75_L_15
;USART_b75.ppas,43 :: 		
$038B	$0000			NOP
$038C	$2B7F			GOTO	USART_b75_L_14
$038D	$	USART_b75_L_15:
;USART_b75.ppas,44 :: 		
$038D	$1283			BCF	STATUS, RP0
$038E	$084E			MOVF	FARG_USART_Write, 0
$038F	$0099			MOVWF	TXREG
$0390	$	USART_b75_L_12:
;USART_b75.ppas,45 :: 		
$0390	$0008			RETURN
$01EB	$	_inttostr:
;conv.ppas,100 :: 		
;conv.ppas,101 :: 		
$01EB	$1303			BCF	STATUS, RP1
$01EC	$1283			BCF	STATUS, RP0
$01ED	$084A			MOVF	FARG_IntToStr+1, 0
$01EE	$3A80			XORLW	128
$01EF	$1D03			BTFSS	STATUS, Z
$01F0	$29F3			GOTO	L_IntToStr_4
$01F1	$3000			MOVLW	0
$01F2	$0649			XORWF	FARG_IntToStr, 0
$01F3	$	L_IntToStr_4:
$01F3	$1D03			BTFSS	STATUS, Z
$01F4	$2A0B			GOTO	conv_L_57
$01F5	$	conv_L_56:
;conv.ppas,103 :: 		
$01F5	$084B			MOVF	FARG_IntToStr+2, 0
$01F6	$0084			MOVWF	FSR
$01F7	$302D			MOVLW	45
$01F8	$0080			MOVWF	INDF
$01F9	$0A84			INCF	FSR, 1
$01FA	$3033			MOVLW	51
$01FB	$0080			MOVWF	INDF
$01FC	$0A84			INCF	FSR, 1
$01FD	$3032			MOVLW	50
$01FE	$0080			MOVWF	INDF
$01FF	$0A84			INCF	FSR, 1
$0200	$3037			MOVLW	55
$0201	$0080			MOVWF	INDF
$0202	$0A84			INCF	FSR, 1
$0203	$3036			MOVLW	54
$0204	$0080			MOVWF	INDF
$0205	$0A84			INCF	FSR, 1
$0206	$3038			MOVLW	56
$0207	$0080			MOVWF	INDF
$0208	$0A84			INCF	FSR, 1
$0209	$0180			CLRF	INDF
;conv.ppas,104 :: 		
$020A	$2A8D			GOTO	conv_L_55
;conv.ppas,105 :: 		
$020B	$	conv_L_57:
$020B	$	conv_L_58:
;conv.ppas,106 :: 		
$020B	$01CD			CLRF	_inttostr_local_negative, 1
;conv.ppas,107 :: 		
$020C	$3080			MOVLW	128
$020D	$064A			XORWF	FARG_IntToStr+1, 0
$020E	$00F0			MOVWF	STACK_0
$020F	$3080			MOVLW	128
$0210	$0270			SUBWF	STACK_0, 0
$0211	$1D03			BTFSS	STATUS, Z
$0212	$2A15			GOTO	L_IntToStr_5
$0213	$3000			MOVLW	0
$0214	$0249			SUBWF	FARG_IntToStr, 0
$0215	$	L_IntToStr_5:
$0215	$1803			BTFSC	STATUS, C
$0216	$2A21			GOTO	conv_L_61
$0217	$	conv_L_60:
;conv.ppas,109 :: 		
$0217	$30FF			MOVLW	255
$0218	$00CD			MOVWF	_inttostr_local_negative
;conv.ppas,110 :: 		
$0219	$0849			MOVF	FARG_IntToStr, 0
$021A	$3C00			SUBLW	0
$021B	$00C9			MOVWF	FARG_IntToStr
$021C	$084A			MOVF	FARG_IntToStr+1, 0
$021D	$1C03			BTFSS	STATUS, C
$021E	$3F01			ADDLW	1
$021F	$01CA			CLRF	FARG_IntToStr+1
$0220	$02CA			SUBWF	FARG_IntToStr+1, 1
;conv.ppas,111 :: 		
$0221	$	conv_L_61:
$0221	$	conv_L_62:
;conv.ppas,112 :: 		
$0221	$3001			MOVLW	1
$0222	$00CC			MOVWF	_inttostr_local_len
;conv.ppas,113 :: 		
$0223	$3080			MOVLW	128
$0224	$00F0			MOVWF	STACK_0
$0225	$3080			MOVLW	128
$0226	$064A			XORWF	FARG_IntToStr+1, 0
$0227	$0270			SUBWF	STACK_0, 0
$0228	$1D03			BTFSS	STATUS, Z
$0229	$2A2C			GOTO	L_IntToStr_6
$022A	$0849			MOVF	FARG_IntToStr, 0
$022B	$3C09			SUBLW	9
$022C	$	L_IntToStr_6:
$022C	$1803			BTFSC	STATUS, C
$022D	$2A2F			GOTO	conv_L_64
$022E	$	conv_L_63:
;conv.ppas,114 :: 		
$022E	$0ACC			INCF	_inttostr_local_len, 1
$022F	$	conv_L_64:
$022F	$	conv_L_65:
;conv.ppas,115 :: 		
$022F	$3080			MOVLW	128
$0230	$00F0			MOVWF	STACK_0
$0231	$3080			MOVLW	128
$0232	$064A			XORWF	FARG_IntToStr+1, 0
$0233	$0270			SUBWF	STACK_0, 0
$0234	$1D03			BTFSS	STATUS, Z
$0235	$2A38			GOTO	L_IntToStr_7
$0236	$0849			MOVF	FARG_IntToStr, 0
$0237	$3C63			SUBLW	99
$0238	$	L_IntToStr_7:
$0238	$1803			BTFSC	STATUS, C
$0239	$2A3B			GOTO	conv_L_67
$023A	$	conv_L_66:
;conv.ppas,116 :: 		
$023A	$0ACC			INCF	_inttostr_local_len, 1
$023B	$	conv_L_67:
$023B	$	conv_L_68:
;conv.ppas,117 :: 		
$023B	$3080			MOVLW	128
$023C	$3A03			XORLW	3
$023D	$00F0			MOVWF	STACK_0
$023E	$3080			MOVLW	128
$023F	$064A			XORWF	FARG_IntToStr+1, 0
$0240	$0270			SUBWF	STACK_0, 0
$0241	$1D03			BTFSS	STATUS, Z
$0242	$2A45			GOTO	L_IntToStr_8
$0243	$0849			MOVF	FARG_IntToStr, 0
$0244	$3CE7			SUBLW	231
$0245	$	L_IntToStr_8:
$0245	$1803			BTFSC	STATUS, C
$0246	$2A48			GOTO	conv_L_70
$0247	$	conv_L_69:
;conv.ppas,118 :: 		
$0247	$0ACC			INCF	_inttostr_local_len, 1
$0248	$	conv_L_70:
$0248	$	conv_L_71:
;conv.ppas,119 :: 		
$0248	$3080			MOVLW	128
$0249	$3A27			XORLW	39
$024A	$00F0			MOVWF	STACK_0
$024B	$3080			MOVLW	128
$024C	$064A			XORWF	FARG_IntToStr+1, 0
$024D	$0270			SUBWF	STACK_0, 0
$024E	$1D03			BTFSS	STATUS, Z
$024F	$2A52			GOTO	L_IntToStr_9
$0250	$0849			MOVF	FARG_IntToStr, 0
$0251	$3C0F			SUBLW	15
$0252	$	L_IntToStr_9:
$0252	$1803			BTFSC	STATUS, C
$0253	$2A55			GOTO	conv_L_73
$0254	$	conv_L_72:
;conv.ppas,120 :: 		
$0254	$0ACC			INCF	_inttostr_local_len, 1
$0255	$	conv_L_73:
$0255	$	conv_L_74:
;conv.ppas,121 :: 		
$0255	$084B			MOVF	FARG_IntToStr+2, 0
$0256	$0084			MOVWF	FSR
$0257	$3020			MOVLW	32
$0258	$0080			MOVWF	INDF
$0259	$0A84			INCF	FSR, 1
$025A	$0080			MOVWF	INDF
$025B	$0A84			INCF	FSR, 1
$025C	$0080			MOVWF	INDF
$025D	$0A84			INCF	FSR, 1
$025E	$0080			MOVWF	INDF
$025F	$0A84			INCF	FSR, 1
$0260	$0080			MOVWF	INDF
$0261	$0A84			INCF	FSR, 1
$0262	$0080			MOVWF	INDF
$0263	$0A84			INCF	FSR, 1
$0264	$0180			CLRF	INDF
;conv.ppas,122 :: 		
$0265	$0384			DECF	FSR, 1
;conv.ppas,123 :: 		
$0266	$	conv_L_77:
$0266	$084C			MOVF	_inttostr_local_len, 0
$0267	$3C00			SUBLW	0
$0268	$1803			BTFSC	STATUS, C
$0269	$2A88			GOTO	conv_L_78
;conv.ppas,125 :: 		
$026A	$300A			MOVLW	10
$026B	$00F4			MOVWF	STACK_4
$026C	$01F5			CLRF	STACK_4+1
$026D	$0849			MOVF	FARG_IntToStr, 0
$026E	$00F0			MOVWF	STACK_0
$026F	$084A			MOVF	FARG_IntToStr+1, 0
$0270	$00F1			MOVWF	STACK_0+1
$0271	$22CD			CALL	_div_16x16_s
$0272	$0878			MOVF	STACK_8, 0
$0273	$00F0			MOVWF	STACK_0
$0274	$0879			MOVF	STACK_9, 0
$0275	$00F1			MOVWF	STACK_1
$0276	$3030			MOVLW	48
$0277	$0770			ADDWF	STACK_0, 0
$0278	$0080			MOVWF	INDF
;conv.ppas,126 :: 		
;conv.ppas,127 :: 		
$0279	$0384			DECF	FSR, 1
;conv.ppas,128 :: 		
$027A	$300A			MOVLW	10
$027B	$00F4			MOVWF	STACK_4
$027C	$01F5			CLRF	STACK_4+1
$027D	$0849			MOVF	FARG_IntToStr, 0
$027E	$00F0			MOVWF	STACK_0
$027F	$084A			MOVF	FARG_IntToStr+1, 0
$0280	$00F1			MOVWF	STACK_0+1
$0281	$22CD			CALL	_div_16x16_s
$0282	$0870			MOVF	STACK_0, 0
$0283	$00C9			MOVWF	FARG_IntToStr
$0284	$0871			MOVF	STACK_0+1, 0
$0285	$00CA			MOVWF	FARG_IntToStr+1
;conv.ppas,129 :: 		
$0286	$03CC			DECF	_inttostr_local_len, 1
;conv.ppas,130 :: 		
$0287	$2A66			GOTO	conv_L_77
$0288	$	conv_L_78:
;conv.ppas,131 :: 		
$0288	$084D			MOVF	_inttostr_local_negative, 0
$0289	$1903			BTFSC	STATUS, Z
$028A	$2A8D			GOTO	conv_L_82
$028B	$	conv_L_81:
;conv.ppas,133 :: 		
$028B	$302D			MOVLW	45
$028C	$0080			MOVWF	INDF
;conv.ppas,134 :: 		
$028D	$	conv_L_82:
$028D	$	conv_L_83:
$028D	$	conv_L_55:
;conv.ppas,135 :: 		
$028D	$0008			RETURN
$0354	$	_usart_write_text:
;USART_b75.ppas,121 :: 		
;USART_b75.ppas,122 :: 		
$0354	$1303			BCF	STATUS, RP1
$0355	$1283			BCF	STATUS, RP0
$0356	$01CA			CLRF	_usart_write_text_local_i, 1
;USART_b75.ppas,123 :: 		
$0357	$0849			MOVF	FARG_Usart_Write_Text, 0
$0358	$0084			MOVWF	FSR
$0359	$0800			MOVF	INDF, 0
$035A	$00CB			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,124 :: 		
$035B	$	USART_b75_L_47:
$035B	$084B			MOVF	_usart_write_text_local_data, 0
$035C	$3A00			XORLW	0
$035D	$1903			BTFSC	STATUS, Z
$035E	$2B69			GOTO	USART_b75_L_48
;USART_b75.ppas,126 :: 		
$035F	$084B			MOVF	_usart_write_text_local_data, 0
$0360	$00CE			MOVWF	FARG_USART_Write
$0361	$237F			CALL	_usart_write
;USART_b75.ppas,127 :: 		
$0362	$0ACA			INCF	_usart_write_text_local_i, 1
;USART_b75.ppas,128 :: 		
$0363	$084A			MOVF	_usart_write_text_local_i, 0
$0364	$0749			ADDWF	FARG_Usart_Write_Text, 0
$0365	$0084			MOVWF	FSR
$0366	$0800			MOVF	INDF, 0
$0367	$00CB			MOVWF	_usart_write_text_local_data
;USART_b75.ppas,129 :: 		
$0368	$2B5B			GOTO	USART_b75_L_47
$0369	$	USART_b75_L_48:
$0369	$	USART_b75_L_45:
;USART_b75.ppas,130 :: 		
$0369	$0008			RETURN
$028E	$	_envia:
;Pic1.pbas,18 :: 		sub procedure envia
;Pic1.pbas,19 :: 		if priorit = 1 then
$028E	$3000			MOVLW	0
$028F	$1303			BCF	STATUS, RP1
$0290	$1283			BCF	STATUS, RP0
$0291	$0621			XORWF	_priorit+1, 0
$0292	$1D03			BTFSS	STATUS, Z
$0293	$2A96			GOTO	L_envia_0
$0294	$3001			MOVLW	1
$0295	$0620			XORWF	_priorit, 0
$0296	$	L_envia_0:
$0296	$1D03			BTFSS	STATUS, Z
$0297	$2AAE			GOTO	Pic1_L_2
$0298	$	Pic1_L_1:
;Pic1.pbas,20 :: 		intToStr(incN, txt)
$0298	$0822			MOVF	_incn, 0
$0299	$00C9			MOVWF	FARG_IntToStr
$029A	$0823			MOVF	_incn+1, 0
$029B	$00CA			MOVWF	FARG_IntToStr+1
$029C	$3024			MOVLW	_txt
$029D	$00CB			MOVWF	FARG_IntToStr+2
$029E	$21EB			CALL	_inttostr
;Pic1.pbas,21 :: 		Usart_Write_Text("1")
$029F	$3031			MOVLW	49
$02A0	$00C5			MOVWF	?envia_Local_Text+0
$02A1	$01C6			CLRF	?envia_Local_Text+1
$02A2	$3045			MOVLW	?envia_Local_Text
$02A3	$00C9			MOVWF	FARG_Usart_Write_Text
$02A4	$2354			CALL	_usart_write_text
;Pic1.pbas,22 :: 		Usart_Write_Text(txt)
$02A5	$3024			MOVLW	_txt
$02A6	$00C9			MOVWF	FARG_Usart_Write_Text
$02A7	$2354			CALL	_usart_write_text
;Pic1.pbas,23 :: 		Usart_Write_Text("/")
$02A8	$302F			MOVLW	47
$02A9	$00C5			MOVWF	?envia_Local_Text+0
$02AA	$01C6			CLRF	?envia_Local_Text+1
$02AB	$3045			MOVLW	?envia_Local_Text
$02AC	$00C9			MOVWF	FARG_Usart_Write_Text
$02AD	$2354			CALL	_usart_write_text
$02AE	$	Pic1_L_2:
;Pic1.pbas,24 :: 		end if
$02AE	$	Pic1_L_3:
;Pic1.pbas,25 :: 		if priorit = 2 then
$02AE	$3000			MOVLW	0
$02AF	$0621			XORWF	_priorit+1, 0
$02B0	$1D03			BTFSS	STATUS, Z
$02B1	$2AB4			GOTO	L_envia_1
$02B2	$3002			MOVLW	2
$02B3	$0620			XORWF	_priorit, 0
$02B4	$	L_envia_1:
$02B4	$1D03			BTFSS	STATUS, Z
$02B5	$2ACC			GOTO	Pic1_L_5
$02B6	$	Pic1_L_4:
;Pic1.pbas,26 :: 		intToStr(incP, txt)
$02B6	$082B			MOVF	_incp, 0
$02B7	$00C9			MOVWF	FARG_IntToStr
$02B8	$082C			MOVF	_incp+1, 0
$02B9	$00CA			MOVWF	FARG_IntToStr+1
$02BA	$3024			MOVLW	_txt
$02BB	$00CB			MOVWF	FARG_IntToStr+2
$02BC	$21EB			CALL	_inttostr
;Pic1.pbas,27 :: 		Usart_Write_Text("2")
$02BD	$3032			MOVLW	50
$02BE	$00C5			MOVWF	?envia_Local_Text+0
$02BF	$01C6			CLRF	?envia_Local_Text+1
$02C0	$3045			MOVLW	?envia_Local_Text
$02C1	$00C9			MOVWF	FARG_Usart_Write_Text
$02C2	$2354			CALL	_usart_write_text
;Pic1.pbas,28 :: 		Usart_Write_Text(txt)
$02C3	$3024			MOVLW	_txt
$02C4	$00C9			MOVWF	FARG_Usart_Write_Text
$02C5	$2354			CALL	_usart_write_text
;Pic1.pbas,29 :: 		Usart_Write_Text("/")
$02C6	$302F			MOVLW	47
$02C7	$00C5			MOVWF	?envia_Local_Text+0
$02C8	$01C6			CLRF	?envia_Local_Text+1
$02C9	$3045			MOVLW	?envia_Local_Text
$02CA	$00C9			MOVWF	FARG_Usart_Write_Text
$02CB	$2354			CALL	_usart_write_text
$02CC	$	Pic1_L_5:
;Pic1.pbas,30 :: 		end if
$02CC	$	Pic1_L_6:
$02CC	$	Pic1_L_0:
$02CC	$0008			RETURN
$036A	$	_usart_init:
;USART_b75.ppas,22 :: 		
;USART_b75.ppas,24 :: 		
$036A	$	USART_b75_L_1:
$036A	$1303			BCF	STATUS, RP1
$036B	$1683			BSF	STATUS, RP0
$036C	$1698			BSF	TXSTA, 5
$036D	$	USART_b75_L_2:
;USART_b75.ppas,25 :: 		
$036D	$3090			MOVLW	144
$036E	$1283			BCF	STATUS, RP0
$036F	$0098			MOVWF	RCSTA
;USART_b75.ppas,31 :: 		
$0370	$	USART_b75_L_3:
$0370	$1683			BSF	STATUS, RP0
$0371	$1686			BSF	TRISB, 5
$0372	$	USART_b75_L_4:
;USART_b75.ppas,32 :: 		
$0372	$	USART_b75_L_5:
$0372	$1786			BSF	TRISB, 7
$0373	$	USART_b75_L_6:
;USART_b75.ppas,35 :: 		
$0373	$	USART_b75_L_8:
$0373	$1283			BCF	STATUS, RP0
$0374	$080C			MOVF	PIR1, 0
$0375	$00F1			MOVWF	STACK_1
$0376	$3000			MOVLW	0
$0377	$1AF1			BTFSC	STACK_1, 5
$0378	$3001			MOVLW	1
$0379	$00F1			MOVWF	STACK_1
$037A	$0871			MOVF	STACK_1, 0
$037B	$3A01			XORLW	1
$037C	$1903			BTFSC	STATUS, Z
$037D	$2B73			GOTO	USART_b75_L_8
;USART_b75.ppas,36 :: 		
$037E	$	USART_b75_L_9:
$037E	$	USART_b75_L_0:
;USART_b75.ppas,37 :: 		
$037E	$0008			RETURN
$0004	$	_main:
;Pic1.pbas,33 :: 		main:
$0004	$	_main_main:
;Pic1.pbas,34 :: 		TRISA=%11111111
$0004	$30FF			MOVLW	255
$0005	$1303			BCF	STATUS, RP1
$0006	$1683			BSF	STATUS, RP0
$0007	$0085			MOVWF	TRISA
;Pic1.pbas,35 :: 		TRISB=%01101111
$0008	$306F			MOVLW	111
$0009	$0086			MOVWF	TRISB
;Pic1.pbas,36 :: 		TRISC=%00000000
$000A	$0187			CLRF	TRISC, 1
;Pic1.pbas,37 :: 		INTCON=%00000000
$000B	$018B			CLRF	INTCON, 1
;Pic1.pbas,38 :: 		ANSEL=%00000000
$000C	$1703			BSF	STATUS, RP1
$000D	$1283			BCF	STATUS, RP0
$000E	$019E			CLRF	ANSEL, 1
;Pic1.pbas,39 :: 		ANSELH=%00000000
$000F	$019F			CLRF	ANSELH, 1
;Pic1.pbas,41 :: 		Usart_Init(9600)
$0010	$3019			MOVLW	25
$0011	$1303			BCF	STATUS, RP1
$0012	$1683			BSF	STATUS, RP0
$0013	$0099			MOVWF	SPBRG
$0014	$1518			BSF	TXSTA, BRGH
$0015	$236A			CALL	_usart_init
;Pic1.pbas,42 :: 		PORTC=0
$0016	$0187			CLRF	PORTC, 1
;Pic1.pbas,43 :: 		incP=0
$0017	$01AB			CLRF	_incp
$0018	$01AC			CLRF	_incp+1
;Pic1.pbas,44 :: 		incN=0
$0019	$01A2			CLRF	_incn
$001A	$01A3			CLRF	_incn+1
;Pic1.pbas,45 :: 		b0=false
$001B	$01AD			CLRF	_b0, 1
;Pic1.pbas,46 :: 		b1=false
$001C	$01AE			CLRF	_b1, 1
;Pic1.pbas,47 :: 		b2=false
$001D	$01AF			CLRF	_b2, 1
;Pic1.pbas,48 :: 		b3=false
$001E	$01B0			CLRF	_b3, 1
;Pic1.pbas,49 :: 		b4=false
$001F	$01B1			CLRF	_b4, 1
;Pic1.pbas,50 :: 		b5=false
$0020	$01B2			CLRF	_b5, 1
;Pic1.pbas,51 :: 		b6=false
$0021	$01B3			CLRF	_b6, 1
;Pic1.pbas,52 :: 		priorit = 1
$0022	$3001			MOVLW	1
$0023	$00A0			MOVWF	_priorit
$0024	$01A1			CLRF	_priorit+1
;Pic1.pbas,54 :: 		executa:
$0025	$	_main_executa:
;Pic1.pbas,57 :: 		if (testbit(portA,0) = 1) then
$0025	$3001			MOVLW	1
$0026	$0505			ANDWF	PORTA, 0
$0027	$00F2			MOVWF	STACK_2
$0028	$0872			MOVF	STACK_2, 0
$0029	$3A01			XORLW	1
$002A	$1D03			BTFSS	STATUS, Z
$002B	$2841			GOTO	Pic1_L_9
$002C	$	Pic1_L_8:
;Pic1.pbas,58 :: 		if b0 = false then
$002C	$082D			MOVF	_b0, 0
$002D	$3A00			XORLW	0
$002E	$1D03			BTFSS	STATUS, Z
$002F	$2841			GOTO	Pic1_L_12
$0030	$	Pic1_L_11:
;Pic1.pbas,59 :: 		b0 = true
$0030	$30FF			MOVLW	255
$0031	$00AD			MOVWF	_b0
;Pic1.pbas,60 :: 		if priorit = 1 then
$0032	$3000			MOVLW	0
$0033	$0621			XORWF	_priorit+1, 0
$0034	$1D03			BTFSS	STATUS, Z
$0035	$2838			GOTO	L_main_2
$0036	$3001			MOVLW	1
$0037	$0620			XORWF	_priorit, 0
$0038	$	L_main_2:
$0038	$1D03			BTFSS	STATUS, Z
$0039	$283E			GOTO	Pic1_L_15
$003A	$	Pic1_L_14:
;Pic1.pbas,61 :: 		incN = incN + 1
$003A	$0AA2			INCF	_incn, 1
$003B	$1903			BTFSC	STATUS, Z
$003C	$0AA3			INCF	_incn+1, 1
$003D	$2841			GOTO	Pic1_L_16
;Pic1.pbas,62 :: 		else
$003E	$	Pic1_L_15:
;Pic1.pbas,63 :: 		incP = incP + 1
$003E	$0AAB			INCF	_incp, 1
$003F	$1903			BTFSC	STATUS, Z
$0040	$0AAC			INCF	_incp+1, 1
;Pic1.pbas,64 :: 		end if
$0041	$	Pic1_L_16:
$0041	$	Pic1_L_12:
;Pic1.pbas,65 :: 		end if
$0041	$	Pic1_L_13:
$0041	$	Pic1_L_9:
;Pic1.pbas,66 :: 		end if
$0041	$	Pic1_L_10:
;Pic1.pbas,67 :: 		if testbit(portA,0) = 0 then
$0041	$3001			MOVLW	1
$0042	$0505			ANDWF	PORTA, 0
$0043	$00F2			MOVWF	STACK_2
$0044	$0872			MOVF	STACK_2, 0
$0045	$3A00			XORLW	0
$0046	$1D03			BTFSS	STATUS, Z
$0047	$284D			GOTO	Pic1_L_18
$0048	$	Pic1_L_17:
;Pic1.pbas,68 :: 		if b0 = true then
$0048	$082D			MOVF	_b0, 0
$0049	$3AFF			XORLW	255
$004A	$1D03			BTFSS	STATUS, Z
$004B	$284D			GOTO	Pic1_L_21
$004C	$	Pic1_L_20:
;Pic1.pbas,69 :: 		b0 = false
$004C	$01AD			CLRF	_b0, 1
$004D	$	Pic1_L_21:
;Pic1.pbas,70 :: 		end if
$004D	$	Pic1_L_22:
$004D	$	Pic1_L_18:
;Pic1.pbas,71 :: 		end if
$004D	$	Pic1_L_19:
;Pic1.pbas,74 :: 		if testbit(portA,1) = 1 then
$004D	$3000			MOVLW	0
$004E	$1885			BTFSC	PORTA, 1
$004F	$3001			MOVLW	1
$0050	$00F2			MOVWF	STACK_2
$0051	$0872			MOVF	STACK_2, 0
$0052	$3A01			XORLW	1
$0053	$1D03			BTFSS	STATUS, Z
$0054	$286C			GOTO	Pic1_L_24
$0055	$	Pic1_L_23:
;Pic1.pbas,75 :: 		if b1 = false then
$0055	$082E			MOVF	_b1, 0
$0056	$3A00			XORLW	0
$0057	$1D03			BTFSS	STATUS, Z
$0058	$286C			GOTO	Pic1_L_27
$0059	$	Pic1_L_26:
;Pic1.pbas,76 :: 		b1 = true
$0059	$30FF			MOVLW	255
$005A	$00AE			MOVWF	_b1
;Pic1.pbas,77 :: 		if priorit = 1 then
$005B	$3000			MOVLW	0
$005C	$0621			XORWF	_priorit+1, 0
$005D	$1D03			BTFSS	STATUS, Z
$005E	$2861			GOTO	L_main_3
$005F	$3001			MOVLW	1
$0060	$0620			XORWF	_priorit, 0
$0061	$	L_main_3:
$0061	$1D03			BTFSS	STATUS, Z
$0062	$2868			GOTO	Pic1_L_30
$0063	$	Pic1_L_29:
;Pic1.pbas,78 :: 		incN = incN - 1
$0063	$3001			MOVLW	1
$0064	$02A2			SUBWF	_incn, 1
$0065	$1C03			BTFSS	STATUS, C
$0066	$03A3			DECF	_incn+1, 1
$0067	$286C			GOTO	Pic1_L_31
;Pic1.pbas,79 :: 		else
$0068	$	Pic1_L_30:
;Pic1.pbas,80 :: 		incP = incP - 1
$0068	$3001			MOVLW	1
$0069	$02AB			SUBWF	_incp, 1
$006A	$1C03			BTFSS	STATUS, C
$006B	$03AC			DECF	_incp+1, 1
;Pic1.pbas,81 :: 		end if
$006C	$	Pic1_L_31:
$006C	$	Pic1_L_27:
;Pic1.pbas,82 :: 		end if
$006C	$	Pic1_L_28:
$006C	$	Pic1_L_24:
;Pic1.pbas,83 :: 		end if
$006C	$	Pic1_L_25:
;Pic1.pbas,84 :: 		if testbit(portA,1) = 0 then
$006C	$3000			MOVLW	0
$006D	$1885			BTFSC	PORTA, 1
$006E	$3001			MOVLW	1
$006F	$00F2			MOVWF	STACK_2
$0070	$0872			MOVF	STACK_2, 0
$0071	$3A00			XORLW	0
$0072	$1D03			BTFSS	STATUS, Z
$0073	$2879			GOTO	Pic1_L_33
$0074	$	Pic1_L_32:
;Pic1.pbas,85 :: 		if b1 = true then
$0074	$082E			MOVF	_b1, 0
$0075	$3AFF			XORLW	255
$0076	$1D03			BTFSS	STATUS, Z
$0077	$2879			GOTO	Pic1_L_36
$0078	$	Pic1_L_35:
;Pic1.pbas,86 :: 		b1 = false
$0078	$01AE			CLRF	_b1, 1
$0079	$	Pic1_L_36:
;Pic1.pbas,87 :: 		end if
$0079	$	Pic1_L_37:
$0079	$	Pic1_L_33:
;Pic1.pbas,88 :: 		end if
$0079	$	Pic1_L_34:
;Pic1.pbas,91 :: 		if testbit(portA,2) = 1 then
$0079	$3000			MOVLW	0
$007A	$1905			BTFSC	PORTA, 2
$007B	$3001			MOVLW	1
$007C	$00F2			MOVWF	STACK_2
$007D	$0872			MOVF	STACK_2, 0
$007E	$3A01			XORLW	1
$007F	$1D03			BTFSS	STATUS, Z
$0080	$288B			GOTO	Pic1_L_39
$0081	$	Pic1_L_38:
;Pic1.pbas,92 :: 		if b2 = false then
$0081	$082F			MOVF	_b2, 0
$0082	$3A00			XORLW	0
$0083	$1D03			BTFSS	STATUS, Z
$0084	$288B			GOTO	Pic1_L_42
$0085	$	Pic1_L_41:
;Pic1.pbas,93 :: 		b2 = true
$0085	$30FF			MOVLW	255
$0086	$00AF			MOVWF	_b2
;Pic1.pbas,94 :: 		incN = 0
$0087	$01A2			CLRF	_incn
$0088	$01A3			CLRF	_incn+1
;Pic1.pbas,95 :: 		incP = 0
$0089	$01AB			CLRF	_incp
$008A	$01AC			CLRF	_incp+1
$008B	$	Pic1_L_42:
;Pic1.pbas,96 :: 		end if
$008B	$	Pic1_L_43:
$008B	$	Pic1_L_39:
;Pic1.pbas,97 :: 		end if
$008B	$	Pic1_L_40:
;Pic1.pbas,98 :: 		if testbit(portA,2) = 0 then
$008B	$3000			MOVLW	0
$008C	$1905			BTFSC	PORTA, 2
$008D	$3001			MOVLW	1
$008E	$00F2			MOVWF	STACK_2
$008F	$0872			MOVF	STACK_2, 0
$0090	$3A00			XORLW	0
$0091	$1D03			BTFSS	STATUS, Z
$0092	$2898			GOTO	Pic1_L_45
$0093	$	Pic1_L_44:
;Pic1.pbas,99 :: 		if b2 = true then
$0093	$082F			MOVF	_b2, 0
$0094	$3AFF			XORLW	255
$0095	$1D03			BTFSS	STATUS, Z
$0096	$2898			GOTO	Pic1_L_48
$0097	$	Pic1_L_47:
;Pic1.pbas,100 :: 		b2 = false
$0097	$01AF			CLRF	_b2, 1
$0098	$	Pic1_L_48:
;Pic1.pbas,101 :: 		end if
$0098	$	Pic1_L_49:
$0098	$	Pic1_L_45:
;Pic1.pbas,102 :: 		end if
$0098	$	Pic1_L_46:
;Pic1.pbas,105 :: 		if testbit(portA,3) = 1 then
$0098	$3000			MOVLW	0
$0099	$1985			BTFSC	PORTA, 3
$009A	$3001			MOVLW	1
$009B	$00F2			MOVWF	STACK_2
$009C	$0872			MOVF	STACK_2, 0
$009D	$3A01			XORLW	1
$009E	$1D03			BTFSS	STATUS, Z
$009F	$28B5			GOTO	Pic1_L_51
$00A0	$	Pic1_L_50:
;Pic1.pbas,106 :: 		if b3 = false then
$00A0	$0830			MOVF	_b3, 0
$00A1	$3A00			XORLW	0
$00A2	$1D03			BTFSS	STATUS, Z
$00A3	$28B5			GOTO	Pic1_L_54
$00A4	$	Pic1_L_53:
;Pic1.pbas,107 :: 		b3 = true
$00A4	$30FF			MOVLW	255
$00A5	$00B0			MOVWF	_b3
;Pic1.pbas,108 :: 		if priorit = 1 then
$00A6	$3000			MOVLW	0
$00A7	$0621			XORWF	_priorit+1, 0
$00A8	$1D03			BTFSS	STATUS, Z
$00A9	$28AC			GOTO	L_main_4
$00AA	$3001			MOVLW	1
$00AB	$0620			XORWF	_priorit, 0
$00AC	$	L_main_4:
$00AC	$1D03			BTFSS	STATUS, Z
$00AD	$28B2			GOTO	Pic1_L_57
$00AE	$	Pic1_L_56:
;Pic1.pbas,109 :: 		priorit = 2
$00AE	$3002			MOVLW	2
$00AF	$00A0			MOVWF	_priorit
$00B0	$01A1			CLRF	_priorit+1
$00B1	$28B5			GOTO	Pic1_L_58
;Pic1.pbas,110 :: 		else
$00B2	$	Pic1_L_57:
;Pic1.pbas,111 :: 		priorit = 1
$00B2	$3001			MOVLW	1
$00B3	$00A0			MOVWF	_priorit
$00B4	$01A1			CLRF	_priorit+1
;Pic1.pbas,112 :: 		end if
$00B5	$	Pic1_L_58:
$00B5	$	Pic1_L_54:
;Pic1.pbas,113 :: 		end if
$00B5	$	Pic1_L_55:
$00B5	$	Pic1_L_51:
;Pic1.pbas,114 :: 		end if
$00B5	$	Pic1_L_52:
;Pic1.pbas,115 :: 		if testbit(portA,3) = 0 then
$00B5	$3000			MOVLW	0
$00B6	$1985			BTFSC	PORTA, 3
$00B7	$3001			MOVLW	1
$00B8	$00F2			MOVWF	STACK_2
$00B9	$0872			MOVF	STACK_2, 0
$00BA	$3A00			XORLW	0
$00BB	$1D03			BTFSS	STATUS, Z
$00BC	$28C2			GOTO	Pic1_L_60
$00BD	$	Pic1_L_59:
;Pic1.pbas,116 :: 		if b3 = true then
$00BD	$0830			MOVF	_b3, 0
$00BE	$3AFF			XORLW	255
$00BF	$1D03			BTFSS	STATUS, Z
$00C0	$28C2			GOTO	Pic1_L_63
$00C1	$	Pic1_L_62:
;Pic1.pbas,117 :: 		b3 = false
$00C1	$01B0			CLRF	_b3, 1
$00C2	$	Pic1_L_63:
;Pic1.pbas,118 :: 		end if
$00C2	$	Pic1_L_64:
$00C2	$	Pic1_L_60:
;Pic1.pbas,119 :: 		end if
$00C2	$	Pic1_L_61:
;Pic1.pbas,122 :: 		if testbit(portA,5) = 1 then
$00C2	$3000			MOVLW	0
$00C3	$1A85			BTFSC	PORTA, 5
$00C4	$3001			MOVLW	1
$00C5	$00F2			MOVWF	STACK_2
$00C6	$0872			MOVF	STACK_2, 0
$00C7	$3A01			XORLW	1
$00C8	$1D03			BTFSS	STATUS, Z
$00C9	$28D1			GOTO	Pic1_L_66
$00CA	$	Pic1_L_65:
;Pic1.pbas,123 :: 		if b5 = false then
$00CA	$0832			MOVF	_b5, 0
$00CB	$3A00			XORLW	0
$00CC	$1D03			BTFSS	STATUS, Z
$00CD	$28D1			GOTO	Pic1_L_69
$00CE	$	Pic1_L_68:
;Pic1.pbas,124 :: 		b5 = true
$00CE	$30FF			MOVLW	255
$00CF	$00B2			MOVWF	_b5
;Pic1.pbas,125 :: 		envia
$00D0	$228E			CALL	_envia
$00D1	$	Pic1_L_69:
;Pic1.pbas,126 :: 		end if
$00D1	$	Pic1_L_70:
$00D1	$	Pic1_L_66:
;Pic1.pbas,127 :: 		end if
$00D1	$	Pic1_L_67:
;Pic1.pbas,128 :: 		if testbit(portA,5) = 0 then
$00D1	$3000			MOVLW	0
$00D2	$1A85			BTFSC	PORTA, 5
$00D3	$3001			MOVLW	1
$00D4	$00F2			MOVWF	STACK_2
$00D5	$0872			MOVF	STACK_2, 0
$00D6	$3A00			XORLW	0
$00D7	$1D03			BTFSS	STATUS, Z
$00D8	$28DA			GOTO	Pic1_L_72
$00D9	$	Pic1_L_71:
;Pic1.pbas,129 :: 		b5 = false
$00D9	$01B2			CLRF	_b5, 1
$00DA	$	Pic1_L_72:
;Pic1.pbas,130 :: 		end if
$00DA	$	Pic1_L_73:
;Pic1.pbas,132 :: 		if incN > 999 then
$00DA	$3080			MOVLW	128
$00DB	$3A03			XORLW	3
$00DC	$00F0			MOVWF	STACK_0
$00DD	$3080			MOVLW	128
$00DE	$0623			XORWF	_incn+1, 0
$00DF	$0270			SUBWF	STACK_0, 0
$00E0	$1D03			BTFSS	STATUS, Z
$00E1	$28E4			GOTO	L_main_5
$00E2	$0822			MOVF	_incn, 0
$00E3	$3CE7			SUBLW	231
$00E4	$	L_main_5:
$00E4	$1803			BTFSC	STATUS, C
$00E5	$28EA			GOTO	Pic1_L_75
$00E6	$	Pic1_L_74:
;Pic1.pbas,133 :: 		incN = 999
$00E6	$30E7			MOVLW	231
$00E7	$00A2			MOVWF	_incn
$00E8	$3003			MOVLW	3
$00E9	$00A3			MOVWF	_incn+1
$00EA	$	Pic1_L_75:
;Pic1.pbas,134 :: 		end if
$00EA	$	Pic1_L_76:
;Pic1.pbas,135 :: 		if incN < 0 then
$00EA	$3080			MOVLW	128
$00EB	$0623			XORWF	_incn+1, 0
$00EC	$00F0			MOVWF	STACK_0
$00ED	$3080			MOVLW	128
$00EE	$0270			SUBWF	STACK_0, 0
$00EF	$1D03			BTFSS	STATUS, Z
$00F0	$28F3			GOTO	L_main_6
$00F1	$3000			MOVLW	0
$00F2	$0222			SUBWF	_incn, 0
$00F3	$	L_main_6:
$00F3	$1803			BTFSC	STATUS, C
$00F4	$28F7			GOTO	Pic1_L_78
$00F5	$	Pic1_L_77:
;Pic1.pbas,136 :: 		incN = 0
$00F5	$01A2			CLRF	_incn
$00F6	$01A3			CLRF	_incn+1
$00F7	$	Pic1_L_78:
;Pic1.pbas,137 :: 		end if
$00F7	$	Pic1_L_79:
;Pic1.pbas,139 :: 		if incP > 999 then
$00F7	$3080			MOVLW	128
$00F8	$3A03			XORLW	3
$00F9	$00F0			MOVWF	STACK_0
$00FA	$3080			MOVLW	128
$00FB	$062C			XORWF	_incp+1, 0
$00FC	$0270			SUBWF	STACK_0, 0
$00FD	$1D03			BTFSS	STATUS, Z
$00FE	$2901			GOTO	L_main_7
$00FF	$082B			MOVF	_incp, 0
$0100	$3CE7			SUBLW	231
$0101	$	L_main_7:
$0101	$1803			BTFSC	STATUS, C
$0102	$2907			GOTO	Pic1_L_81
$0103	$	Pic1_L_80:
;Pic1.pbas,140 :: 		incP = 999
$0103	$30E7			MOVLW	231
$0104	$00AB			MOVWF	_incp
$0105	$3003			MOVLW	3
$0106	$00AC			MOVWF	_incp+1
$0107	$	Pic1_L_81:
;Pic1.pbas,141 :: 		end if
$0107	$	Pic1_L_82:
;Pic1.pbas,142 :: 		if incP < 0 then
$0107	$3080			MOVLW	128
$0108	$062C			XORWF	_incp+1, 0
$0109	$00F0			MOVWF	STACK_0
$010A	$3080			MOVLW	128
$010B	$0270			SUBWF	STACK_0, 0
$010C	$1D03			BTFSS	STATUS, Z
$010D	$2910			GOTO	L_main_8
$010E	$3000			MOVLW	0
$010F	$022B			SUBWF	_incp, 0
$0110	$	L_main_8:
$0110	$1803			BTFSC	STATUS, C
$0111	$2914			GOTO	Pic1_L_84
$0112	$	Pic1_L_83:
;Pic1.pbas,143 :: 		incP = 0
$0112	$01AB			CLRF	_incp
$0113	$01AC			CLRF	_incp+1
$0114	$	Pic1_L_84:
;Pic1.pbas,144 :: 		end if
$0114	$	Pic1_L_85:
;Pic1.pbas,146 :: 		incN = incN + 1
$0114	$0822			MOVF	_incn, 0
$0115	$3F01			ADDLW	1
$0116	$00C3			MOVWF	FLOC_main+6
$0117	$3000			MOVLW	0
$0118	$1803			BTFSC	STATUS, C
$0119	$3F01			ADDLW	1
$011A	$0723			ADDWF	_incn+1, 0
$011B	$00C4			MOVWF	FLOC_main+7
$011C	$0843			MOVF	FLOC_main+6, 0
$011D	$00A2			MOVWF	_incn
$011E	$0844			MOVF	FLOC_main+7, 0
$011F	$00A3			MOVWF	_incn+1
;Pic1.pbas,147 :: 		delay_ms(5)
$0120	$3007			MOVLW	7
$0121	$00FB			MOVWF	STACK_11
$0122	$30FF			MOVLW	255
$0123	$00FA			MOVWF	STACK_10
$0124	$0BFB			DECFSZ	STACK_11, F
$0125	$2927			GOTO	$+2
$0126	$292A			GOTO	$+4
$0127	$0BFA			DECFSZ	STACK_10, F
$0128	$2927			GOTO	$-1
$0129	$2924			GOTO	$-5
$012A	$3078			MOVLW	120
$012B	$00FA			MOVWF	STACK_10
$012C	$0BFA			DECFSZ	STACK_10, F
$012D	$292C			GOTO	$-1
$012E	$0000			NOP
$012F	$0000			NOP
;Pic1.pbas,149 :: 		valor = incN div 1000
$0130	$30E8			MOVLW	232
$0131	$00F4			MOVWF	STACK_4
$0132	$3003			MOVLW	3
$0133	$00F5			MOVWF	STACK_4+1
$0134	$0843			MOVF	FLOC_main+6, 0
$0135	$00F0			MOVWF	STACK_0
$0136	$0844			MOVF	FLOC_main+7, 0
$0137	$00F1			MOVWF	STACK_0+1
$0138	$22CD			CALL	_div_16x16_s
$0139	$0870			MOVF	STACK_0, 0
$013A	$00C1			MOVWF	FLOC_main+4
$013B	$0871			MOVF	STACK_0+1, 0
$013C	$00C2			MOVWF	FLOC_main+5
$013D	$0841			MOVF	FLOC_main+4, 0
$013E	$00B4			MOVWF	_valor
$013F	$0842			MOVF	FLOC_main+5, 0
$0140	$00B5			MOVWF	_valor+1
;Pic1.pbas,150 :: 		uni =(incN div 100) mod 10
$0141	$3064			MOVLW	100
$0142	$00F4			MOVWF	STACK_4
$0143	$01F5			CLRF	STACK_4+1
$0144	$0843			MOVF	FLOC_main+6, 0
$0145	$00F0			MOVWF	STACK_0
$0146	$0844			MOVF	FLOC_main+7, 0
$0147	$00F1			MOVWF	STACK_0+1
$0148	$22CD			CALL	_div_16x16_s
$0149	$300A			MOVLW	10
$014A	$00F4			MOVWF	STACK_4
$014B	$01F5			CLRF	STACK_4+1
$014C	$22CD			CALL	_div_16x16_s
$014D	$0878			MOVF	STACK_8, 0
$014E	$00F0			MOVWF	STACK_0
$014F	$0879			MOVF	STACK_9, 0
$0150	$00F1			MOVWF	STACK_1
$0151	$0870			MOVF	STACK_0, 0
$0152	$00BF			MOVWF	FLOC_main+2
$0153	$0871			MOVF	STACK_0+1, 0
$0154	$00C0			MOVWF	FLOC_main+3
$0155	$083F			MOVF	FLOC_main+2, 0
$0156	$00B6			MOVWF	_uni
$0157	$0840			MOVF	FLOC_main+3, 0
$0158	$00B7			MOVWF	_uni+1
;Pic1.pbas,151 :: 		cen =(incN div 10) mod 10
$0159	$300A			MOVLW	10
$015A	$00F4			MOVWF	STACK_4
$015B	$01F5			CLRF	STACK_4+1
$015C	$0843			MOVF	FLOC_main+6, 0
$015D	$00F0			MOVWF	STACK_0
$015E	$0844			MOVF	FLOC_main+7, 0
$015F	$00F1			MOVWF	STACK_0+1
$0160	$22CD			CALL	_div_16x16_s
$0161	$300A			MOVLW	10
$0162	$00F4			MOVWF	STACK_4
$0163	$01F5			CLRF	STACK_4+1
$0164	$22CD			CALL	_div_16x16_s
$0165	$0878			MOVF	STACK_8, 0
$0166	$00F0			MOVWF	STACK_0
$0167	$0879			MOVF	STACK_9, 0
$0168	$00F1			MOVWF	STACK_1
$0169	$0870			MOVF	STACK_0, 0
$016A	$00BD			MOVWF	FLOC_main+0
$016B	$0871			MOVF	STACK_0+1, 0
$016C	$00BE			MOVWF	FLOC_main+1
$016D	$083D			MOVF	FLOC_main+0, 0
$016E	$00B8			MOVWF	_cen
$016F	$083E			MOVF	FLOC_main+1, 0
$0170	$00B9			MOVWF	_cen+1
;Pic1.pbas,152 :: 		dez =(incN mod 10)
$0171	$300A			MOVLW	10
$0172	$00F4			MOVWF	STACK_4
$0173	$01F5			CLRF	STACK_4+1
$0174	$0843			MOVF	FLOC_main+6, 0
$0175	$00F0			MOVWF	STACK_0
$0176	$0844			MOVF	FLOC_main+7, 0
$0177	$00F1			MOVWF	STACK_0+1
$0178	$22CD			CALL	_div_16x16_s
$0179	$0878			MOVF	STACK_8, 0
$017A	$00F0			MOVWF	STACK_0
$017B	$0879			MOVF	STACK_9, 0
$017C	$00F1			MOVWF	STACK_1
$017D	$0870			MOVF	STACK_0, 0
$017E	$00BA			MOVWF	_dez
$017F	$0871			MOVF	STACK_0+1, 0
$0180	$00BB			MOVWF	_dez+1
;Pic1.pbas,153 :: 		portC = uni + 16
$0181	$3010			MOVLW	16
$0182	$073F			ADDWF	FLOC_main+2, 0
$0183	$00F2			MOVWF	STACK_2
$0184	$0840			MOVF	FLOC_main+3, 0
$0185	$1803			BTFSC	STATUS, C
$0186	$3F01			ADDLW	1
$0187	$00F3			MOVWF	STACK_2+1
$0188	$3000			MOVLW	0
$0189	$07F3			ADDWF	STACK_2+1, 1
$018A	$0872			MOVF	STACK_2, 0
$018B	$0087			MOVWF	PORTC
;Pic1.pbas,154 :: 		delay_ms(5)
$018C	$3007			MOVLW	7
$018D	$00FB			MOVWF	STACK_11
$018E	$30FF			MOVLW	255
$018F	$00FA			MOVWF	STACK_10
$0190	$0BFB			DECFSZ	STACK_11, F
$0191	$2993			GOTO	$+2
$0192	$2996			GOTO	$+4
$0193	$0BFA			DECFSZ	STACK_10, F
$0194	$2993			GOTO	$-1
$0195	$2990			GOTO	$-5
$0196	$3078			MOVLW	120
$0197	$00FA			MOVWF	STACK_10
$0198	$0BFA			DECFSZ	STACK_10, F
$0199	$2998			GOTO	$-1
$019A	$0000			NOP
$019B	$0000			NOP
;Pic1.pbas,155 :: 		portC = dez + 32
$019C	$3020			MOVLW	32
$019D	$07F0			ADDWF	STACK_0, 1
$019E	$1803			BTFSC	STATUS, C
$019F	$0AF1			INCF	STACK_0+1, 1
$01A0	$0870			MOVF	STACK_0, 0
$01A1	$0087			MOVWF	PORTC
;Pic1.pbas,156 :: 		delay_ms(5)
$01A2	$3007			MOVLW	7
$01A3	$00FB			MOVWF	STACK_11
$01A4	$30FF			MOVLW	255
$01A5	$00FA			MOVWF	STACK_10
$01A6	$0BFB			DECFSZ	STACK_11, F
$01A7	$29A9			GOTO	$+2
$01A8	$29AC			GOTO	$+4
$01A9	$0BFA			DECFSZ	STACK_10, F
$01AA	$29A9			GOTO	$-1
$01AB	$29A6			GOTO	$-5
$01AC	$3078			MOVLW	120
$01AD	$00FA			MOVWF	STACK_10
$01AE	$0BFA			DECFSZ	STACK_10, F
$01AF	$29AE			GOTO	$-1
$01B0	$0000			NOP
$01B1	$0000			NOP
;Pic1.pbas,157 :: 		portC = cen + 64
$01B2	$3040			MOVLW	64
$01B3	$073D			ADDWF	FLOC_main+0, 0
$01B4	$00F0			MOVWF	STACK_0
$01B5	$083E			MOVF	FLOC_main+1, 0
$01B6	$1803			BTFSC	STATUS, C
$01B7	$3F01			ADDLW	1
$01B8	$00F1			MOVWF	STACK_0+1
$01B9	$3000			MOVLW	0
$01BA	$07F1			ADDWF	STACK_0+1, 1
$01BB	$0870			MOVF	STACK_0, 0
$01BC	$0087			MOVWF	PORTC
;Pic1.pbas,158 :: 		delay_ms(5)
$01BD	$3007			MOVLW	7
$01BE	$00FB			MOVWF	STACK_11
$01BF	$30FF			MOVLW	255
$01C0	$00FA			MOVWF	STACK_10
$01C1	$0BFB			DECFSZ	STACK_11, F
$01C2	$29C4			GOTO	$+2
$01C3	$29C7			GOTO	$+4
$01C4	$0BFA			DECFSZ	STACK_10, F
$01C5	$29C4			GOTO	$-1
$01C6	$29C1			GOTO	$-5
$01C7	$3078			MOVLW	120
$01C8	$00FA			MOVWF	STACK_10
$01C9	$0BFA			DECFSZ	STACK_10, F
$01CA	$29C9			GOTO	$-1
$01CB	$0000			NOP
$01CC	$0000			NOP
;Pic1.pbas,159 :: 		portc = valor + 128
$01CD	$3080			MOVLW	128
$01CE	$0741			ADDWF	FLOC_main+4, 0
$01CF	$00F0			MOVWF	STACK_0
$01D0	$0842			MOVF	FLOC_main+5, 0
$01D1	$1803			BTFSC	STATUS, C
$01D2	$3F01			ADDLW	1
$01D3	$00F1			MOVWF	STACK_0+1
$01D4	$3000			MOVLW	0
$01D5	$07F1			ADDWF	STACK_0+1, 1
$01D6	$0870			MOVF	STACK_0, 0
$01D7	$0087			MOVWF	PORTC
;Pic1.pbas,160 :: 		delay_ms(5)
$01D8	$3007			MOVLW	7
$01D9	$00FB			MOVWF	STACK_11
$01DA	$30FF			MOVLW	255
$01DB	$00FA			MOVWF	STACK_10
$01DC	$0BFB			DECFSZ	STACK_11, F
$01DD	$29DF			GOTO	$+2
$01DE	$29E2			GOTO	$+4
$01DF	$0BFA			DECFSZ	STACK_10, F
$01E0	$29DF			GOTO	$-1
$01E1	$29DC			GOTO	$-5
$01E2	$3078			MOVLW	120
$01E3	$00FA			MOVWF	STACK_10
$01E4	$0BFA			DECFSZ	STACK_10, F
$01E5	$29E4			GOTO	$-1
$01E6	$0000			NOP
$01E7	$0000			NOP
;Pic1.pbas,162 :: 		info = 0
$01E8	$01BC			CLRF	_info, 1
;Pic1.pbas,164 :: 		goto executa
$01E9	$2825			GOTO	_main_executa
$01EA	$29EA			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$01EB		IntToStr
$028E		envia
$02CD		Div_16x16_S
$0327		Div_16x16_S_L
$0354		Usart_Write_Text
$036A		USART_Init
$037F		USART_Write


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$0004		_main_main:
$0025		_main_executa:
$002C		Pic1_L_8:
$0030		Pic1_L_11:
$0038		L_main_2:
$003A		Pic1_L_14:
$003E		Pic1_L_15:
$0041		Pic1_L_10:
$0041		Pic1_L_12:
$0041		Pic1_L_13:
$0041		Pic1_L_16:
$0041		Pic1_L_9:
$0048		Pic1_L_17:
$004C		Pic1_L_20:
$004D		Pic1_L_18:
$004D		Pic1_L_19:
$004D		Pic1_L_21:
$004D		Pic1_L_22:
$0055		Pic1_L_23:
$0059		Pic1_L_26:
$0061		L_main_3:
$0063		Pic1_L_29:
$0068		Pic1_L_30:
$006C		Pic1_L_24:
$006C		Pic1_L_25:
$006C		Pic1_L_27:
$006C		Pic1_L_28:
$006C		Pic1_L_31:
$0074		Pic1_L_32:
$0078		Pic1_L_35:
$0079		Pic1_L_33:
$0079		Pic1_L_34:
$0079		Pic1_L_36:
$0079		Pic1_L_37:
$0081		Pic1_L_38:
$0085		Pic1_L_41:
$008B		Pic1_L_39:
$008B		Pic1_L_40:
$008B		Pic1_L_42:
$008B		Pic1_L_43:
$0093		Pic1_L_44:
$0097		Pic1_L_47:
$0098		Pic1_L_45:
$0098		Pic1_L_46:
$0098		Pic1_L_48:
$0098		Pic1_L_49:
$00A0		Pic1_L_50:
$00A4		Pic1_L_53:
$00AC		L_main_4:
$00AE		Pic1_L_56:
$00B2		Pic1_L_57:
$00B5		Pic1_L_51:
$00B5		Pic1_L_52:
$00B5		Pic1_L_54:
$00B5		Pic1_L_55:
$00B5		Pic1_L_58:
$00BD		Pic1_L_59:
$00C1		Pic1_L_62:
$00C2		Pic1_L_60:
$00C2		Pic1_L_61:
$00C2		Pic1_L_63:
$00C2		Pic1_L_64:
$00CA		Pic1_L_65:
$00CE		Pic1_L_68:
$00D1		Pic1_L_66:
$00D1		Pic1_L_67:
$00D1		Pic1_L_69:
$00D1		Pic1_L_70:
$00D9		Pic1_L_71:
$00DA		Pic1_L_72:
$00DA		Pic1_L_73:
$00E4		L_main_5:
$00E6		Pic1_L_74:
$00EA		Pic1_L_75:
$00EA		Pic1_L_76:
$00F3		L_main_6:
$00F5		Pic1_L_77:
$00F7		Pic1_L_78:
$00F7		Pic1_L_79:
$0101		L_main_7:
$0103		Pic1_L_80:
$0107		Pic1_L_81:
$0107		Pic1_L_82:
$0110		L_main_8:
$0112		Pic1_L_83:
$0114		Pic1_L_84:
$0114		Pic1_L_85:
$01EB		_inttostr:
$01F3		L_IntToStr_4:
$01F5		conv_L_56:
$020B		conv_L_57:
$020B		conv_L_58:
$0215		L_IntToStr_5:
$0217		conv_L_60:
$0221		conv_L_61:
$0221		conv_L_62:
$022C		L_IntToStr_6:
$022E		conv_L_63:
$022F		conv_L_64:
$022F		conv_L_65:
$0238		L_IntToStr_7:
$023A		conv_L_66:
$023B		conv_L_67:
$023B		conv_L_68:
$0245		L_IntToStr_8:
$0247		conv_L_69:
$0248		conv_L_70:
$0248		conv_L_71:
$0252		L_IntToStr_9:
$0254		conv_L_72:
$0255		conv_L_73:
$0255		conv_L_74:
$0266		conv_L_77:
$0288		conv_L_78:
$028B		conv_L_81:
$028D		conv_L_55:
$028D		conv_L_82:
$028D		conv_L_83:
$028E		_envia:
$0296		L_envia_0:
$0298		Pic1_L_1:
$02AE		Pic1_L_2:
$02AE		Pic1_L_3:
$02B4		L_envia_1:
$02B6		Pic1_L_4:
$02CC		Pic1_L_0:
$02CC		Pic1_L_5:
$02CC		Pic1_L_6:
$02CD		_div_16x16_s:
$0326		math_L_7:
$0327		_div_16x16_s_l:
$0353		math_L_6:
$0354		_usart_write_text:
$035B		USART_b75_L_47:
$0369		USART_b75_L_45:
$0369		USART_b75_L_48:
$036A		_usart_init:
$036A		USART_b75_L_1:
$036D		USART_b75_L_2:
$0370		USART_b75_L_3:
$0372		USART_b75_L_4:
$0372		USART_b75_L_5:
$0373		USART_b75_L_6:
$0373		USART_b75_L_8:
$037E		USART_b75_L_0:
$037E		USART_b75_L_9:
$037F		_usart_write:
$037F		USART_b75_L_14:
$038D		USART_b75_L_15:
$0390		USART_b75_L_12:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0007		PORTC
$000A		PCLATH
$000B		INTCON
$000C		PIR1
$0018		RCSTA
$0019		TXREG
$001A		RCREG
$0020		_priorit
$0022		_incn
$0024		_txt
$002B		_incp
$002D		_b0
$002E		_b1
$002F		_b2
$0030		_b3
$0031		_b4
$0032		_b5
$0033		_b6
$0034		_valor
$0036		_uni
$0038		_cen
$003A		_dez
$003C		_info
$003D		?T7__main
$0045		?envia_Local_Text
$0045		FARG_USART_Init
$0049		FARG_IntToStr
$0049		FARG_Usart_Write_Text
$004A		_usart_write_text_local_i
$004B		_usart_write_text_local_data
$004B		FARG_IntToStr+2
$004C		_inttostr_local_len
$004D		_inttostr_local_negative
$004E		FARG_USART_Write
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0098		TXSTA
$0099		SPBRG
$011E		ANSEL
$011F		ANSELH


